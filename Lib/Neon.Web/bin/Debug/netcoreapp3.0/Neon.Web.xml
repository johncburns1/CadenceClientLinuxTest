<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Web</name>
    </assembly>
    <members>
        <member name="T:Neon.Web.NeonController">
            <summary>
            Enhances the <see cref="T:Microsoft.AspNetCore.Mvc.Controller"/> class to simplify and enhance web application logging.
            </summary>
            <remarks>
            <para>
            This class provides two logging related enhancements.  First, <see cref="T:Neon.Web.NeonController"/>
            implements <see cref="T:Neon.Diagnostics.INeonLogger"/> so that all of the standard logging methods are directly
            available in the context of the derived controller.  Events will be logged with the module
            set to <b>"Web-"</b> prefixing the name of the controller.
            </para>
            <para>
            The <see cref="P:Neon.Web.NeonController.ActivityId"/> property can also be used to easily correlate operations that
            span multiple systems and services.  An activity is a globally unique string that can be
            used to corelate a parent operation with any decendent operations.  For example, a parent
            operation such as <b>get-weather</b> may need to call several other web services to 
            <b>get-current-weather</b>, <b>get-forecast</b>, <b>get-weather-alerts</b>,... and these
            child services may need to call other services.  The essential idea here is to generate 
            an activity ID for the parent operation, recursively pass this to any child operations and
            then include the activity ID in any logged errors or warnings.
            </para>
            <para>
            This can be very useful operationally for diagnosing problems.  A typical scanario is:
            a parent operation fails and an error is logged and the operator can then review the
            logs with the activity across all systems and services to disgnose exactly what happened.
            </para>
            <para>
            The Neon framework and <b>cluster</b> have built-in mechanisms to make this easy.
            <see cref="T:Neon.Diagnostics.INeonLogger"/> logging methods include <b>activityId</b> as first class parameters
            and the cluster pipeline implicitly process and persist <b>activity-id</b> fields
            from event streams.  
            </para>
            <para>
            The <b>neon-proxy-public</b> and <b>neon-proxy-private</b> services are also aware
            of activity IDs and will include these in the HTTP traffic logs and also generate
            new activity IDs for inbound requests that don't already have them.  This value will
            be available as the <see cref="P:Neon.Web.NeonController.ActivityId"/> property.
            </para>
            <para>
            To enable cross system/service activity correlation, you'll need to include the 
            <see cref="P:Neon.Web.NeonController.ActivityId"/> as the <b>X-Request-ID</b> header in requests made to
            those systems.  The <see cref="T:Neon.Net.JsonClient"/> includes built-in methods that make 
            this easy.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Web.NeonController.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Web.NeonController.InternalActivityId">
            <summary>
            <b>Internal use only:</b> Return's the request's <b>X-Request-ID</b> header
            value or <c>null</c>.  Application services should use <see cref="P:Neon.Web.NeonController.ActivityId"/>
            which guarantees that a valid activity ID will be returned.
            </summary>
        </member>
        <member name="P:Neon.Web.NeonController.ActivityId">
            <summary>
            Returns the opaque globally unique activity ID for the current operation.
            </summary>
            <remarks>
            <para>
            Activity IDs can be used to correlate information like logs operations across 
            multiple systems by high-level operation.  For example, a user request to and
            API service may need to be satisified by multiple API requests to other APIs
            or services
            </para>
            <para>
            Neon uses the HTTP <b>X-Request-ID</b> header to correlate requests.  This
            is an opaque globally unique string.  This is generated automatically by 
            <b>neon-proxy-public</b> and <b>neon-proxy-private</b> for inbound HTTP
            requests that don't already have this header value.
            </para>
            <para>
            This property always returns a valid activity ID.  This will be the activity
            ID header included in the request or a newly generated ID.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Web.NeonController.GetLogger">
            <summary>
            Returns the logger to use for this instance.
            </summary>
            <returns>The logger.</returns>
        </member>
        <member name="P:Neon.Web.NeonController.IsLogDebugEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonController.IsLogSInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonController.IsLogInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonController.IsLogWarnEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonController.IsLogErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonController.IsLogSErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonController.IsLogCriticalEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Critical(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Critical(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Debug(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Debug(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Error(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Error(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Info(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Info(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.SError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.SError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.SInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.SInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Warn(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.Warn(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.IsLogLevelEnabled(Neon.Diagnostics.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogDebug(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogSInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogWarn(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogSError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogCritical(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogDebug(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogSInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogWarn(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogSError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogCritical(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogMetrics(Neon.Diagnostics.LogLevel,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogMetrics(Neon.Diagnostics.LogLevel,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonController.LogMetrics(Neon.Diagnostics.LogLevel,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Web.NeonControllerBase">
            <summary>
            Enhances the <see cref="T:Microsoft.AspNetCore.Mvc.ControllerBase"/> class to simplify and enhance web service logging.
            </summary>
            <remarks>
            <para>
            This class provides two logging related enhancements.  First, <see cref="T:Neon.Web.NeonController"/>
            implements <see cref="T:Neon.Diagnostics.INeonLogger"/> so that all of the standard logging methods are directly
            available in the context of the derived controller.  Events will be logged with the module
            set to <b>"Web-"</b> prefixing the name of the controller.
            </para>
            <para>
            The <see cref="P:Neon.Web.NeonControllerBase.ActivityId"/> property can also be used to easily correlate operations that
            span multiple systems and services.  An activity is a globally unique string that can be
            used to corelate a parent operation with any decendent operations.  For example, a parent
            operation such as <b>get-weather</b> may need to call several other web services to 
            <b>get-current-weather</b>, <b>get-forecast</b>, <b>get-weather-alerts</b>,... and these
            child services may need to call other services.  The essential idea here is to generate 
            an activity ID for the parent operation, recursively pass this to any child operations and
            then include the activity ID in any logged errors or warnings.
            </para>
            <para>
            This can be very useful operationally for diagnosing problems.  A typical scanario is:
            a parent operation fails and an error is logged and the operator can then review the
            logs with the activity across all systems and services to disgnose exactly what happened.
            </para>
            <para>
            The Neon framework and <b>cluster</b> have built-in mechanisms to make this easy.
            <see cref="T:Neon.Diagnostics.INeonLogger"/> logging methods include <b>activityId</b> as first class parameters
            and the cluster pipeline implicitly process and persist <b>activity-id</b> fields
            from event streams.  
            </para>
            <para>
            The <b>neon-proxy-public</b> and <b>neon-proxy-private</b> services are also aware
            of activity IDs and will include these in the HTTP traffic logs and also generate
            new activity IDs for inbound requests that don't already have them.  This value will
            be available as the <see cref="P:Neon.Web.NeonControllerBase.ActivityId"/> property.
            </para>
            <para>
            To enable cross system/service activity correlation, you'll need to include the 
            <see cref="P:Neon.Web.NeonControllerBase.ActivityId"/> as the <b>X-Request-ID</b> header in requests made to
            those systems.  The <see cref="T:Neon.Net.JsonClient"/> includes built-in methods that make 
            this easy.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.InternalActivityId">
            <summary>
            <b>Internal use only:</b> Return's the request's <b>X-Request-ID</b> header
            value or <c>null</c>.  Application services should use <see cref="P:Neon.Web.NeonControllerBase.ActivityId"/>
            which guarantees that a valid activity ID will be returned.
            </summary>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.ActivityId">
            <summary>
            Returns the opaque globally unique activity ID for the current operation.
            </summary>
            <remarks>
            <para>
            Activity IDs can be used to correlate information like logs operations across 
            multiple systems by high-level operation.  For example, a user request to and
            API service may need to be satisified by multiple API requests to other APIs
            or services
            </para>
            <para>
            Neon uses the HTTP <b>X-Request-ID</b> header to correlate requests.  This
            is an opaque globally unique string.  This is generated automatically by 
            <b>neon-proxy-public</b> and <b>neon-proxy-private</b> for inbound HTTP
            requests that don't already have this header value.
            </para>
            <para>
            This property always returns a valid activity ID.  This will be the activity
            ID header included in the request or a newly generated ID.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.GetLogger">
            <summary>
            Returns the logger to use for this instance.
            </summary>
            <returns>The logger.</returns>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.IsLogDebugEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.IsLogSInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.IsLogInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.IsLogWarnEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.IsLogErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.IsLogSErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Web.NeonControllerBase.IsLogCriticalEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Critical(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Critical(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Debug(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Debug(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Error(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Error(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Info(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Info(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.SError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.SError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.SInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.SInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Warn(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.Warn(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.IsLogLevelEnabled(Neon.Diagnostics.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogDebug(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogSInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogWarn(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogSError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogCritical(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogDebug(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogSInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogWarn(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogSError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogCritical(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogMetrics(Neon.Diagnostics.LogLevel,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogMetrics(Neon.Diagnostics.LogLevel,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.NeonControllerBase.LogMetrics(Neon.Diagnostics.LogLevel,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Web.Program">
            <summary>
            We apparently need a main program entry when building with the 
            <b>Microsoft.NET.Sdk.Web</b> SDK.  We'll fake one here.
            </summary>
        </member>
        <member name="M:Neon.Web.Program.Main(System.String[])">
            <summary>
            Fake program entry point.
            </summary>
            <param name="args">Command line arguments.</param>
            <returns>The exit code.</returns>
        </member>
        <member name="T:Neon.Web.RoundTripJsonInputFormatter">
            <summary>
            <para>
            Handles deserialization of JSON objects for noSQL scenarios that supports round 
            trips without any property loss, even if one side of the transaction is out 
            of data and is not aware of all of the possible JSON properties.
            </para>
            <para>
            This class is designed to support classes generated by the <b>Neon.CodeGen</b>
            assembly that implement <see cref="T:Neon.Data.IRoundtripData"/>.
            </para>
            </summary>
        </member>
        <member name="M:Neon.Web.RoundTripJsonInputFormatter.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="allowRoundtripFormatter">
            Optional lamba function that returns <c>true</c> if the type is allowed
            to be handled by the formatter.  Passing <c>null</c> indicates that all
            types should be handled.
            </param>
        </member>
        <member name="M:Neon.Web.RoundTripJsonInputFormatter.CanReadType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.RoundTripJsonInputFormatter.ReadRequestBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.InputFormatterContext,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Web.RoundTripJsonOutputFormatter">
            <summary>
            <para>
            Handles serialization of JSON objects for noSQL scenarios that supports round 
            trips without any property loss, even if one side of the transaction is out 
            of data and is not aware of all of the possible JSON properties.
            </para>
            <para>
            This class is designed to support classes generated by the <b>Neon.CodeGen</b>
            assembly that implement <see cref="T:Neon.Data.IRoundtripData"/>.
            </para>
            </summary>
        </member>
        <member name="M:Neon.Web.RoundTripJsonOutputFormatter.#ctor(System.Func{System.Type,System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="allowRoundtripFormatter">
            Optional lamba function that returns <c>true</c> if the type is allowed
            to be handled by the formatter.  Passing <c>null</c> indicates that all
            types should be handled.
            </param>
        </member>
        <member name="M:Neon.Web.RoundTripJsonOutputFormatter.CanWriteType(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Web.RoundTripJsonOutputFormatter.WriteResponseBodyAsync(Microsoft.AspNetCore.Mvc.Formatters.OutputFormatterWriteContext,System.Text.Encoding)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Web.WebHelper">
            <summary>
            Utility methods for <b>AspNetCore</b> applications.
            </summary>
        </member>
        <member name="M:Neon.Web.WebHelper.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Web.WebHelper.GenerateActivityId">
            <summary>
            Generates an opaque globally unique activity ID.
            </summary>
            <returns>The activity ID string.</returns>
        </member>
        <member name="M:Neon.Web.WebHelper.GetUri(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the full URI for an <see cref="T:Microsoft.AspNetCore.Http.HttpRequest"/> (not including the port number).
            </summary>
            <param name="request">The request.</param>
            <returns>The fully qualified URI including any query parameters.</returns>
        </member>
        <member name="M:Neon.Web.WebHelper.GetSourceAddress(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns the source IP address for an HTTP request.
            </summary>
            <param name="request">The request.</param>
            <returns>The source IP address (as a string) or <c>null</c> if this couldn't be determined.</returns>
        </member>
        <member name="M:Neon.Web.WebHelper.AddNeon(Microsoft.Extensions.DependencyInjection.IMvcBuilder,Neon.Common.IServiceContainer,System.Boolean)">
            <summary>
            Adds the services from an <see cref="T:Neon.Common.IServiceContainer"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            This is commonly used when configuring services for an ASP.NET application pipeline.  The method
            also enables response compression by default.
            </summary>
            <param name="builder">The target <see cref="T:Microsoft.Extensions.DependencyInjection.IMvcBuilder"/>.</param>
            <param name="source">The service source container or <c>null</c> to copy from <see cref="P:Neon.Common.NeonHelper.ServiceContainer"/>.</param>
            <param name="disableResponseCompression">Optionally disable response compression.</param>
            <returns>The <paramref name="builder"/>.</returns>
        </member>
        <member name="M:Neon.Web.WebHelper.AddNeon(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Boolean,System.Func{System.Type,System.Boolean})">
            <summary>
            Performs Neon related initialization including adding the the <see cref="T:Neon.Web.RoundTripJsonInputFormatter"/>,
            <see cref="T:Neon.Web.RoundTripJsonOutputFormatter"/> and <b>Newtonsoft JSON</b> formatters to the
            request pipeline.  These handle serialization and deserailzation of JSON text submitted to and
            returned from web services and classes generated by <b>Neon.CodeGen</b> implementing 
            <see cref="T:Neon.Data.IRoundtripData"/> as well as many basic .NET types.
            </summary>
            <param name="builder">The MVC builder.</param>
            <param name="disableRoundTripFormatters">Optionally disable adding the round-trip formatters.</param>
            <param name="allowRoundtripFormatter">
            Optional lamda function that can be used to customize which types allowed
            to be handled by the custom round-trip formatters.  When this is <c>null</c>, 
            all types will be handled by the formatters, otherwise only those types
            where this function returns <c>true</c> will be handled by the custom formatters.
            Other types will be passed on to the remaining formatters.
            </param>
            <returns>The <paramref name="builder"/>.</returns>
            <remarks>
            <para>
            This provides both backwards and forwards data compatibility on both the client and service
            side by retaining object properties that one side or the other doesn't know about.  This enables
            scenarios where new properties are added to a data object but the solution components aren't
            all upgraded at the same time as a monolithic app.
            </para>
            </remarks>
        </member>
    </members>
</doc>
