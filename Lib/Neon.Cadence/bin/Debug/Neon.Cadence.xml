<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Cadence</name>
    </assembly>
    <members>
        <member name="T:Neon.Cadence.ActivityBase">
            <summary>
            Base class for all application Cadence activity implementations.
            </summary>
            <remarks>
            <para>
            Cadence activities are intended to perform most of the work related to
            actually implementing a workflow.  This includes interacting with the
            outside world by obtaining and updating external state as well as performing
            long running computations and operations.  Activities are where you'll 
            interact with databases and external services.
            </para>
            <para>
            Workflows are generally intended to invoke one or more activities
            and then use their results to decide which other activities need to
            run and then combine these activity results into the workflow result,
            as required.  Workflows can be considered to handle the decisions
            and activities are responsible for doing things.
            </para>
            <para>
            Activities are very easy to implement, simply derive your custom
            activity type from <see cref="T:Neon.Cadence.ActivityBase"/> and then implement a
            <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/> method with your custom code.
            This accepts a byte array with your custom activity arguments 
            as a parameter and returns a byte array as your activity result.
            Both of these values may be <c>null</c>.  Activities report failures
            by throwing an exception from their <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/>
            methods.
            </para>
            <para>
            Unlike the <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> method, the 
            <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/> method implementations has
            few limitations.  This method can use threads, can reference global
            state like time, environment variables and perform non-itempotent 
            operations like generating random numbers, UUIDs, etc.
            </para>
            <note>
            Although activities are not required to be idempotent from a Cadence
            perspective, this may be required for some workflows.  You'll need
            to carefully code your activities for these situations.
            </note>
            <para>
            The only real requirement for most activties is that your <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/>
            needs to call <see cref="M:Neon.Cadence.ActivityBase.SendHeartbeatAsync(System.Byte[])"/> periodically at
            an interval no greater than <see cref="P:Neon.Cadence.ActivityBase.Info"/>.<see cref="P:Neon.Cadence.ActivityInfo.HeartbeatTimeout"/>.
            This proves to Cadence that the activity is still healthy and running and
            also provides an opportunity for long running and computationally expecsive
            activities to checkpoint their current state so they won't need to start
            completely over when the activity is rescheduled.
            </para>
            <para>
            Cadence supports two kinds of activities: <b>normal</b> and <b>local</b>.
            <b>normal</b> activities are registered via <see cref="M:Neon.Cadence.CadenceClient.RegisterActivityAsync``1(System.String)"/>
            and are scheduled by the Cadence cluster to be executed on workers.  Workflows
            invoke theses using <see cref="M:Neon.Cadence.WorkflowBase.CallActivityAsync(System.String,System.Byte[],Neon.Cadence.Internal.ActivityOptions,System.Threading.CancellationToken)"/>.
            </para>
            <para>
            <b>local</b> activities simply run on the local worker without needing to
            be registered or scheduled by the Cadence cluster.  These are very low overhead
            and intended for for simple short running activities (a few seconds).
            Workflows invoke local activities using <see cref="M:Neon.Cadence.WorkflowBase.CallLocalActivityAsync``1(System.Byte[],Neon.Cadence.Internal.LocalActivityOptions,System.Threading.CancellationToken)"/>.
            <b>Local activities do not support heartbeats.</b>
            </para>
            <note>
            You can distinguish between normal and local activities via <see cref="P:Neon.Cadence.ActivityBase.IsLocal"/>.
            </note>
            <para>
            Non-local activities may be cancelled explicitly and all activities will be
            cancelled if the parent workflow or the local worker is stopped.  Well behaved
            activities will monitor their <see cref="P:Neon.Cadence.ActivityBase.CancellationToken"/> for cancellation
            by registering a handler, periodically calling <see cref="P:System.Threading.CancellationToken.IsCancellationRequested"/>
            or <see cref="M:System.Threading.CancellationToken.ThrowIfCancellationRequested"/>.  Non-local activities 
            that implement checkpoints can use this as an opportunity to call <see cref="M:Neon.Cadence.ActivityBase.SendHeartbeatAsync(System.Byte[])"/>
            and persist checkpoint state and all activities should then throw or rethrow a 
            <see cref="T:System.Threading.Tasks.TaskCanceledException"/> from their <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/>
            method.
            </para>
            <para><b>External Activity Completion</b></para>
            <para>
            Normally, activities are self-contained and will finish whatever they're doing and then
            simply return.  It's often useful though to be able to have an activity kickoff operations
            on an external system, exit the activity indicating that it's still pending, and then
            have the external system manage the activity heartbeats and report the activity completion.
            </para>
            <para>
            To take advantage of this, you'll need to obtain the opaque activity identifier from
            <see cref="P:Neon.Cadence.ActivityBase.Info"/> via its <see cref="P:Neon.Cadence.ActivityInfo.TaskToken"/> property.
            This is a byte array including enough information for Cadence to identify the specific
            activity.  Your activity should start the external action, passing the task token and
            then call <see cref="M:Neon.Cadence.ActivityBase.CompleteExternallyAsync"/> which will thrown a
            <see cref="T:Neon.Cadence.CadenceActivityExternalCompletionException"/> that will exit the activity 
            and then be handled internally by informing Cadence that the activity will continue
            running.
            </para>
            <note>
            You should not depend on the structure or contents of the task token since this
            may change for future Cadence releases and you must allow the <see cref="T:Neon.Cadence.CadenceActivityExternalCompletionException"/>
            to be caught by the calling <see cref="T:Neon.Cadence.CadenceClient"/> so <see cref="M:Neon.Cadence.ActivityBase.CompleteExternallyAsync"/>
            will work properly.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Cadence.ActivityBase.ActivityKey">
            <summary>
            Used to map a Cadence client ID and workflow context ID into a
            key that can be used to dereference <see cref="F:Neon.Cadence.ActivityBase.idToActivity"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.ConstructInfo.Type">
            <summary>
            The activity type.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.ConstructInfo.Constructor">
            <summary>
            The activity constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.GetActivityTypeKey(Neon.Cadence.CadenceClient,System.String)">
            <summary>
            Prepends the Cadence client ID to the workflow type name to generate the
            key used to dereference the <see cref="F:Neon.Cadence.ActivityBase.nameToConstructInfo"/> dictionary.
            </summary>
            <param name="client">The Cadence client.</param>
            <param name="activityTypeName">The activity type name.</param>
            <returns>The prepended type name.</returns>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.Register(Neon.Cadence.CadenceClient,System.Type,System.String)">
            <summary>
            Registers an activity type.
            </summary>
            <param name="client">The associated client.</param>
            <param name="activityType">The activity type.</param>
            <param name="activityTypeName">The name used to identify the implementation.</param>
            <returns><c>true</c> if the activity was already registered.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if a different activity class has already been registered for <paramref name="activityTypeName"/>.</exception>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.UnregisterClient(Neon.Cadence.CadenceClient)">
            <summary>
            Removes all type activity type registrations for a Cadence client (when it's being disposed).
            </summary>
            <param name="client">The client being disposed.</param>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.Create(Neon.Cadence.CadenceClient,System.Type,System.Nullable{System.Int64})">
            <summary>
            Constructs an activity instance with the specified type.
            </summary>
            <param name="client">The associated client.</param>
            <param name="activityType">The activity type.</param>
            <param name="contextId">The activity context ID or <c>null</c> for local activities.</param>
            <returns>The constructed activity.</returns>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.Create(Neon.Cadence.CadenceClient,System.String,System.Nullable{System.Int64})">
            <summary>
            Constructs an activity instance with the specified activity type name.
            </summary>
            <param name="client">The associated client.</param>
            <param name="activityTypeName">The activity type name.</param>
            <param name="contextId">The activity context ID or <c>null</c> for local activities.</param>
            <returns>The constructed activity.</returns>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.OnProxyRequestAsync(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.ProxyRequest)">
            <summary>
            Called to handle a workflow related request message received from the cadence-proxy.
            </summary>
            <param name="client">The client that received the request.</param>
            <param name="request">The request message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.OnActivityInvokeRequest(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.ActivityInvokeRequest)">
            <summary>
            Handles received <see cref="T:Neon.Cadence.Internal.ActivityInvokeRequest"/> messages.
            </summary>
            <param name="client">The receiving Cadence client.</param>
            <param name="request">The request message.</param>
            <returns>The reply message.</returns>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.ActivityStoppingRequest(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.ActivityStoppingRequest)">
            <summary>
            Handles received <see cref="M:Neon.Cadence.ActivityBase.ActivityStoppingRequest(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.ActivityStoppingRequest)"/> messages.
            </summary>
            <param name="client">The receiving Cadence client.</param>
            <param name="request">The request message.</param>
            <returns>The reply message.</returns>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.Client">
            <summary>
            Returns the <see cref="T:Neon.Cadence.CadenceClient"/> managing this activity.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.IsLocal">
            <summary>
            Returns <c>true</c> for a local activity execution.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.CancellationTokenSource">
            <summary>
            The internal cancellation token source.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.CancellationToken">
            <summary>
            Returns the activity's cancellation token.  Activities can monitor this
            to gracefully handle activity cancellation.
            </summary>
            <remarks>
            <para>
            We recommend that all non-local activities that run for relatively long periods,
            monitor <see cref="P:Neon.Cadence.ActivityBase.CancellationToken"/> for activity cancellation so that they
            can gracefully ternminate including potentially calling <see cref="M:Neon.Cadence.ActivityBase.SendHeartbeatAsync(System.Byte[])"/>
            to checkpoint the current activity state.
            </para>
            <para>
            Cancelled activities should throw a <see cref="T:System.Threading.Tasks.TaskCanceledException"/> from
            their <see cref="M:Neon.Cadence.ActivityBase.OnRunAsync(Neon.Cadence.CadenceClient,System.Byte[])"/> method rather than returning 
            a result so that Cadence will reschedule the activity if possible.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.Info">
            <summary>
            Returns the additional information about the activity and the workflow
            that invoked it.  Note that this doesn't work for local activities.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown for local activities.</exception>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.Initialize(Neon.Cadence.CadenceClient,System.Nullable{System.Int64})">
            <summary>
            Called internally to initialize the activity.
            </summary>
            <param name="client">The associated client.</param>
            <param name="contextId">The activity's context ID or <c>null</c> for local activities.</param>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])">
            <summary>
            Called by Cadence to execute an activity.  Derived classes will need to implement
            their activity logic here.
            </summary>
            <param name="args">The activity arguments encoded into a byte array or <c>null</c>.</param>
            <returns>The activity result encoded as a byte array or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.OnRunAsync(Neon.Cadence.CadenceClient,System.Byte[])">
            <summary>
            Called internally to run the activity.
            </summary>
            <param name="client">The Cadence client.</param>
            <param name="args">The activity arguments.</param>
            <returns>Thye activity results.</returns>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.EnsureNotLocal">
            <summary>
            Ensures that the activity has an associated Cadence context and thus
            is not a local actvity.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown for local activities.</exception>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.SendHeartbeatAsync(System.Byte[])">
            <summary>
            <para>
            Sends a heartbeat with optional details to Cadence.
            </para>
            <note>
            <b>IMPORTANT:</b> Heartbeats are not supported for local activities.
            </note>
            </summary>
            <param name="details">Optional heartbeart details.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown for local activity executions.</exception>
            <remarks>
            <para>
            Long running activities need to send periodic heartbeats back to
            Cadence to prove that the activity is still alive.  This can also
            be used by activities to implement checkpoints or record other
            details.  This method sends a heartbeat with optional details
            encoded as a byte array.
            </para>
            <note>
            The maximum allowed time period between heartbeats is specified in 
            <see cref="T:Neon.Cadence.Internal.ActivityOptions"/> when activities are executed and it's
            also possible to enable automatic heartbeats sent by the Cadence client.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.HasLastHeartbeatDetailsAsync">
            <summary>
            <para>
            Determines whether the details from the last recorded heartbeat last
            failed attempt exist.
            </para>
            <note>
            <b>IMPORTANT:</b> Heartbeats are not supported for local activities.
            </note>
            </summary>
            <returns>The details from the last heartbeat or <c>null</c>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown for local activity executions.</exception>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.GetLastHeartbeatDetailsAsync">
            <summary>
            <para>
            Returns the details from the last recorded heartbeat last failed attempt
            at running the activity.
            </para>
            <note>
            <b>IMPORTANT:</b> Heartbeats are not supported for local activities.
            </note>
            </summary>
            <returns>The details from the last heartbeat or <c>null</c>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown for local activity executions.</exception>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.CompleteExternallyAsync">
            <summary>
            This method may be called within <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/> to indicate that the
            activity will be completed externally.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown for local activities.</exception>
            <remarks>
            <para>
            This method works by throwing an <see cref="T:Neon.Cadence.CadenceActivityExternalCompletionException"/> which
            will be caught and handled by the base <see cref="T:Neon.Cadence.ActivityBase"/> class.  You'll need to allow
            this exception to exit your <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/> method for this to work.
            </para>
            <note>
            This method doesn't work for local activities.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.IsLogDebugEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.IsLogSInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.IsLogInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.IsLogWarnEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.IsLogErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.IsLogSErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.ActivityBase.IsLogCriticalEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.IsLogLevelEnabled(Neon.Diagnostics.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogDebug(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogSInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogWarn(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogSError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogCritical(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogDebug(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogSInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogWarn(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogSError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogCritical(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogMetrics(Neon.Diagnostics.LogLevel,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogMetrics(Neon.Diagnostics.LogLevel,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.ActivityBase.LogMetrics(Neon.Diagnostics.LogLevel,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.ActivityInfo">
            <summary>
            Holds information about an executing activity.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.TaskToken">
            <summary>
            The activity task token.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.WorkflowTypeName">
            <summary>
            The parent workflow type name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.WorkflowDomain">
            <summary>
            The parent workflow domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.WorkflowRun">
            <summary>
            The parent workflow execution details.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.ActivityId">
            <summary>
            The activity ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.ActivityTypeName">
            <summary>
            The activity type name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.TaskList">
            <summary>
            The activity task list.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.HeartbeatTimeout">
            <summary>
            The maximum time between heartbeats.  0 means no heartbeat needed.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.ScheduledTimeUtc">
            <summary>
            Time (UTC) when the activity was scheduled.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.StartedTimeUtc">
            <summary>
            Time (UTC) when the activity was started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.DeadlineTimeUtc">
            <summary>
            Time (UTC) when the activity will timeout.
            </summary>
        </member>
        <member name="P:Neon.Cadence.ActivityInfo.Attempt">
            <summary>
            Indicates how many times the activity was been restarted.  This will be zero
            for the first execution, 1 for the second, and so on.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityOptions">
            <summary>
            Specifies the options used for executing an activity.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityOptions.TaskList">
            <summary>
            Optionally specifies the task list where the activity will be scheduled.
            This defaults to the same task list as the parent workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToCloseTimeout">
            <summary>
            Optionally specifies the end-to-end timeout for the activity.  The 
            default <see cref="F:System.TimeSpan.Zero"/> value uses the sum of 
            <see cref="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToStartTimeout"/> and <see cref="P:Neon.Cadence.Internal.ActivityOptions.StartToCloseTimeout"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToStartTimeout">
            <summary>
            Specifies the maximum time the activity be queued, waiting to be scheduled
            on a worker.  This defaults to 365 days.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityOptions.StartToCloseTimeout">
            <summary>
            Specifies the maximum time the activity may take to run.  This defaults
            to 365 days.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityOptions.HeartbeatTimeout">
            <summary>
            Optionally specifies the maximum time the activity has to send a heartbeat
            back to Cadence.  This defaults to <see cref="F:System.TimeSpan.Zero"/> which indicates
            that no heartbeating is required.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityOptions.WaitForCancellation">
            <summary>
            Optionally specifies that the cancelled activities won't be consider to be
            finished until that actually complete.  This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityOptions.RetryPolicy">
            <summary>
            Optionally specifies the activity retry policy.  The default value is <c>null</c> which specifies
            that there will be no retry attempts.
            </summary>
            <remarks>
            <para>
            When <see cref="P:Neon.Cadence.CadenceRetryPolicy.ExpirationInterval"/> is specified and it is larger than the activity's 
            <see cref="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToStartTimeout"/>, then the <see cref="P:Neon.Cadence.CadenceRetryPolicy.ExpirationInterval"/> will override 
            activity's <see cref="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToStartTimeout"/>. This is to avoid retrying on <see cref="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToStartTimeout"/>
            error which only happen when worker is not picking up the task within the timeout.
            </para>
            <para>
            Retrying <see cref="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToStartTimeout"/> does not make sense as it just
            mark the task as failed and create a new task and put back in the queue waiting worker to pick again. Cadence
            server also make sure the <see cref="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToStartTimeout"/> will not be larger than the workflow's timeout.
            Same apply to <see cref="P:Neon.Cadence.Internal.ActivityOptions.ScheduleToCloseTimeout"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityOptions.ToInternal">
            <summary>
            Converts the instance to its internal representation.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.ChildWorkflowOptions">
            <summary>
            Specifies the options to use when executing a child workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ChildWorkflowOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.Domain">
            <summary>
            Optionally specifies the domain where the child workflow will run. 
            This defaults to the parent workflow's domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.WorkflowID">
            <summary>
            Optionally specifies the workflow ID to assign to the child workflow.
            A UUID will be generated by default.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.TaskList">
            <summary>
            Optionally specifies the task list where the child workflow will be
            scheduled.  This defaults to the parent's task list.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.ExecutionStartToCloseTimeout">
            <summary>
            Specifies the maximum time the child workflow may run from start
            to finish.  This defaults to 365 days.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.TaskStartToCloseTimeout">
            <summary>
            Optionally specifies the decision task timeout for the child workflow.
            This defaults to <b>10 seconds</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.ChildTerminationPolicy">
            <summary>
            Optionally specifies what happens to the child workflow when the parent is terminated.
            This defaults to <see cref="F:Neon.Cadence.ChildTerminationPolicy.Abandon"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.WaitUntilFinished">
            <summary>
            Optionally specifies whether to wait for the child workflow to finish for any
            reason including being: completed, failed, timedout, terminated, or canceled.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.WorkflowIdReusePolicy">
            <summary>
            Controls how Cadence handles workflows that attempt to reuse workflow IDs.
            This defaults to <see cref="F:Neon.Cadence.WorkflowIdReusePolicy.AllowDuplicateFailedOnly"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.RetryPolicy">
            <summary>
            Optionally specifies a retry policy.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.CronSchedule">
            <summary>
            Optionally specifies a recurring schedule for the workflow.  This can be set to a string specifying
            the minute, hour, day of month, month, and day of week scheduling parameters using the standard Linux
            CRON format described here: <a href="https://en.wikipedia.org/wiki/Cron"/>
            </summary>
            <remarks>
            <para>
            Cadence accepts a CRON string formatted as a single line of text with 5 parameters separated by
            spaces.  The parameters specified the minute, hour, day of month, month, and day of week values:
            </para>
            <code>
            ┌───────────── minute (0 - 59)
            │ ┌───────────── hour (0 - 23)
            │ │ ┌───────────── day of the month (1 - 31)
            │ │ │ ┌───────────── month (1 - 12)
            │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
            │ │ │ │ │
            │ │ │ │ │
            * * * * * 
            </code>
            <para>
            Each parameter may be set to one of:
            </para>
            <list type="table">
            <item>
                <term><b>*</b></term>
                <description>
                Matches any value.
                </description>
            </item>
            <item>
                <term><b>value</b></term>
                <description>
                Matches a specific integer value.
                </description>
            </item>
            <item>
                <term><b>value1-value2</b></term>
                <description>
                Matches a range of values to be matched (inclusive).
                </description>
            </item>
            <item>
                <term><b>valiue1,value2,...</b></term>
                <description>
                Matches a list of values to be matched.
                </description>
            </item>
            <item>
                <term><b>value1/value2</b></term>
                <description>
                Matches values starting at <b>value1</b> and then those incremented by <b>value2</b>.
                </description>
            </item>
            </list>
            <para>
            You can use this handy CRON calculator to see how this works: <a href="https://crontab.guru"/>
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Cadence.Internal.ChildWorkflowOptions.Memo">
            <summary>
            Optionally specifies workflow metadata as a dictionary of named byte array values.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ChildWorkflowOptions.ToInternal">
            <summary>
            Converts this instance into the corresponding internal object.
            </summary>
            <returns>The equivalent <see cref="T:Neon.Cadence.Internal.InternalChildWorkflowOptions"/>.</returns>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityCompleteReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityCompleteRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityCompleteReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityCompleteReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityCompleteReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityCompleteRequest">
            <summary>
            <b>client --> proxy:</b> Sent to complete an activity externally.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityCompleteRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityCompleteRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityCompleteRequest.TaskToken">
            <summary>
            Optionally specifies the opaque activity task token.  You can specify the target activity via 
            <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.TaskToken"/> or <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.RunId"/>, <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.Domain"/>, and <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.ActivityId"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityCompleteRequest.RunId">
            <summary>
            Optionally specifies the opaque activity task token.  You can specify the target activity via 
            <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.TaskToken"/> or <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.RunId"/>, <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.Domain"/>, and <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.ActivityId"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityCompleteRequest.Domain">
            <summary>
            Optionally specifies the activity domain.  You can specify the target activity via 
            <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.TaskToken"/> or <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.RunId"/>, <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.Domain"/>, and <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.ActivityId"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityCompleteRequest.ActivityId">
            <summary>
            Optionally specifies the activity ID.  You can specify the target activity via 
            <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.TaskToken"/> or <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.RunId"/>, <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.Domain"/>, and <see cref="P:Neon.Cadence.Internal.ActivityCompleteRequest.ActivityId"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityCompleteRequest.Result">
            <summary>
            The activity result.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityCompleteRequest.Error">
            <summary>
            The activity error.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityCompleteRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityCompleteRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityExecuteLocalReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityExecuteLocalRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteLocalReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteLocalReply.Result">
            <summary>
            Returns the activity results encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteLocalReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteLocalReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityExecuteLocalRequest">
            <summary>
            <b>client --> proxy:</b> Starts a local workflow activity.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteLocalRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteLocalRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteLocalRequest.ActivityTypeId">
            <summary>
            Identifies the .NET type that implements the local activity. 
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteLocalRequest.Args">
            <summary>
            Optionally specifies the arguments to be passed to the activity encoded
            as a byte array.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteLocalRequest.Options">
            <summary>
            The local activity start options.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteLocalRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteLocalRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityExecuteReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityExecuteRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteReply.Result">
            <summary>
            Returns the activity results encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityExecuteRequest">
            <summary>
            <b>client --> proxy:</b> Starts a (non-local) workflow activity.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteRequest.Activity">
            <summary>
            Specifies the activity to execute
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteRequest.Args">
            <summary>
            Optionally specifies the arguments to be passed to the activity encoded
            as a byte array.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityExecuteRequest.Options">
            <summary>
            The activity start options.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityExecuteRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsReply.Details">
            <summary>
            Returns the activity heartbeat details encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsRequest">
            <summary>
            <b>client --> proxy:</b> Requests the details for the last heartbeat 
            recorded for a failed previous run of the activity.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetHeartbeatDetailsRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityGetInfoReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityGetInfoRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetInfoReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityGetInfoReply.Info">
            <summary>
            Returns the activity information.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetInfoReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetInfoReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityGetInfoRequest">
            <summary>
            <b>client --> proxy:</b> Requests the details for the last heartbeat 
            recorded for a failed previous run of the activity.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetInfoRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityGetInfoRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetInfoRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityGetInfoRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsReply.HasDetails">
            <summary>
            Indicates whether heartbeat details are available.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsRequest">
            <summary>
            <b>client --> proxy:</b> Determines whether a previous failed run on an
            activity recorded heartbeat details.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityHasHeartbeatDetailsRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityInvokeLocalReply">
            <summary>
            <b>client --> proxy:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityInvokeLocalRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeLocalReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeLocalReply.Result">
            <summary>
            Returns the activity results encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeLocalReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeLocalReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityInvokeLocalRequest">
            <summary>
            <b>proxy --> client:</b> Sent to a worker, instructing it to begin executing
            a local workflow activity.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeLocalRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeLocalRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeLocalRequest.ActivityContextId">
            <summary>
            Identifies the activity context.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeLocalRequest.ActivityTypeId">
            <summary>
            Identifies the .NET type that implements the local activity. 
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeLocalRequest.Args">
            <summary>
            Optionally specifies the activity arguments encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeLocalRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeLocalRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityInvokeReply">
            <summary>
            <b>client --> proxy:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityInvokeRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeReply.Result">
            <summary>
            Returns the activity results encoded as a byte array.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeReply.Pending">
            <summary>
            Indicates that the activity will be completed externally.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityInvokeRequest">
            <summary>
            <b>proxy --> client:</b> Sent to a worker, instructing it to begin executing
            a workflow activity.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeRequest.Activity">
            <summary>
            Identifies the registered activity type.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityInvokeRequest.Args">
            <summary>
            Optionally specifies the activity arguments encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityInvokeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityRecordHeartbeatReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityRecordHeartbeatRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRecordHeartbeatReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityRecordHeartbeatReply.Details">
            <summary>
            Returns the activity heartbeat details encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRecordHeartbeatReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRecordHeartbeatReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityRecordHeartbeatRequest">
            <summary>
            <b>client --> proxy:</b> Records an activity heartbeat.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRecordHeartbeatRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityRecordHeartbeatRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityRecordHeartbeatRequest.TaskToken">
            <summary>
            Overrides the <see cref="P:Neon.Cadence.Internal.ActivityRequest.ContextId"/> message property when
            non-null, indicating that the activity heartbeat is being sent externally.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityRecordHeartbeatRequest.Details">
            <summary>
            The activity heartbeat details encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRecordHeartbeatRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRecordHeartbeatRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityRegisterReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowRegisterRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRegisterReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRegisterReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRegisterReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityRegisterRequest">
            <summary>
            <b>client --> proxy:</b> Registers a workflow handler by name.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRegisterRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityRegisterRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityRegisterRequest.Name">
            <summary>
            Identifies the workflow implementation.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRegisterRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRegisterRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityReply">
            <summary>
            Base class for all activity replies.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityReply.ActivityContextId">
            <summary>
            Uniquely identifies the activity context associated with this reply.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityRequest">
            <summary>
            Base class for all activity requests.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityRequest.ContextId">
            <summary>
            Uniquely identifies the activity context associated with this request.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityStoppingReply">
            <summary>
            <b>client --> proxy:</b> Answers a <see cref="T:Neon.Cadence.Internal.ActivityStoppingRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityStoppingReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityStoppingReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityStoppingReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ActivityStoppingRequest">
            <summary>
            <b>proxy --> client:</b> Indicates that a worker is being stopped.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityStoppingRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityStoppingRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ActivityStoppingRequest.ActivityId">
            <summary>
            Specifies the activity being stopped.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityStoppingRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ActivityStoppingRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ProxyMessage">
            <summary>
            The base class for all messages transferred between the .NET Cadence client
            and the <b>cadence-proxy</b>.
            </summary>
            <remarks>
            <para>
            This class is designed to be a very simple and flexible way of communicating
            operations and status between the Cadence client and proxy.  The specific 
            message type is identified via the <see cref="P:Neon.Cadence.Internal.ProxyMessage.Type"/> property (one of the 
            <see cref="T:Neon.Cadence.Internal.InternalMessageTypes"/> values.  The <see cref="P:Neon.Cadence.Internal.ProxyMessage.Properties"/> dictionary will be
            used to pass named values.  Binary attachments may be passed using the 
            <see cref="P:Neon.Cadence.Internal.ProxyMessage.Attachments"/> property, a list of binary arrays.
            </para>
            <para>
            This is serialized to bytes using a simple structure consisting of 32-bit
            integers, UTF-8 encoded strings, and raw bytes with all integers encoded 
            using little-endian byte ordering.  Strings are encoded as a 32-bit 
            byte length, followed by that many UTF-8 encoded string bytes.  A ZERO
            byte length indicates an empty string and a length of -1 indicates a
            NULL string.  Encoded strings will look like:
            </para>
            <code>
            +------------------+
            |      LENGTH      |   32-bit (little endian)
            +------------------+
            |                  |
            |      UTF-8       |
            |      BYTES       |
            |                  |
            +------------------+
            </code>
            <para>
            A full encoded message will look like:
            </para>
            <code>
            +------------------+
            |   MESSAGE-TYPE   |   32-bit
            +------------------+
            |   PROPERTY-COUNT |   32-bit
            +------------------+
            |                  |
            |  +------------+  |
            |  |   NAME     |  |
            |  +------------+  |
            |  |   VALUE    |  |
            |  +------------+  |
            |       ...        |
            |                  |
            +------------------+
            |   ATTACH-COUNT   |   32-bit
            +------------------+
            |                  |
            |  +------------+  |
            |  |   LENGTH   |  |   32-bit
            |  +------------+  |
            |  |            |  |
            |  |            |  |
            |  |   BYTES    |  |
            |  |            |  |
            |  |            |  |
            |  +------------+  |
            |       ...        |
            |                  |
            +------------------+
            </code>
            <para>
            The message starts out with the 32-bit message type followed by the
            number of properties to follow.  Each argument consists of an encoded
            string for the argument name followed by an encoded string for the value.
            </para>
            <para>
            After the properties will be a 32-bit integer specifying the
            number of binary attachment with each encoded as its length in bytes
            followed by that actual attachment bytes.  An attachment with length
            set to -1 will be considered to be NULL.
            </para>
            <para>
            Proxy messages will be passed between the Cadence client and proxy
            via <b>PUT</b> requests using the <b>application/x-neon-cadence-proxy</b>
            content-type.  Note that request responses in both directions never
            include any content.
            </para>
            <para>
            Note that more complex message property may be passed as JSON strings
            that can be serialized and deserialized via the <see cref="M:Neon.Cadence.Internal.ProxyMessage.GetJsonProperty``1(Neon.Cadence.Internal.PropertyNameUtf8)"/>
            and <see cref="M:Neon.Cadence.Internal.ProxyMessage.SetJsonProperty``1(Neon.Cadence.Internal.PropertyNameUtf8,``0)"/> helper methods.
            </para>
            </remarks>
        </member>
        <member name="T:Neon.Cadence.Internal.ProxyMessage.PropertyNameBytes">
            <summary>
            The return value of <see cref="M:Neon.Cadence.Internal.ProxyMessage.ReadPropertyNameBytes(System.IO.BinaryReader)"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.ProxyMessage.ContentType">
            <summary>
            The content type to used for HTTP requests encapsulating a <see cref="T:Neon.Cadence.Internal.ProxyMessage"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.Deserialize``1(System.IO.Stream,System.Boolean)">
            <summary>
            Deserializes the message from a stream.
            </summary>
            <typeparam name="TMessage">The expected message type.</typeparam>
            <param name="input">The input stream.</param>
            <param name="ignoreTypeCode">Optionally ignore unspecified message types (used for unit testing).</param>
            <returns>The decoded message.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.ReadString(System.IO.BinaryReader)">
            <summary>
            Deserialzes a string.
            </summary>
            <param name="reader">The input reader.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.ReadPropertyNameBytes(System.IO.BinaryReader)">
            <summary>
            Deserialzes a string as UTF-8 bytes allocated from a local pool.
            The value returned should be added back to the pool when you're
            donw with it.
            </summary>
            <param name="reader">The input reader.</param>
            <returns>The UTF-8 encoded string bytes.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.WriteString(System.IO.BinaryWriter,System.String)">
            <summary>
            Serialize a string.
            </summary>
            <param name="writer">The output writer.</param>
            <param name="value">The string being serialized.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.WriteString(System.IO.BinaryWriter,Neon.Cadence.Internal.PropertyNameUtf8)">
            <summary>
            Serialize a string from a <see cref="T:Neon.Cadence.Internal.PropertyNameUtf8"/>.
            </summary>
            <param name="writer">The output writer.</param>
            <param name="value">The string being serialized.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ProxyMessage.Type">
            <summary>
            Indicates the message type, one of the <see cref="T:Neon.Cadence.Internal.InternalMessageTypes"/> values.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ProxyMessage.Properties">
            <summary>
            Returns a case insensitive dictionary that maps argument names to value strings.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ProxyMessage.Attachments">
            <summary>
            Returns the list of binary attachments.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SerializeAsStream(System.Boolean)">
            <summary>
            Serializes the message to a pooled <see cref="T:System.IO.MemoryStream"/>.  Be sure to
            add the stream returned back to the <see cref="T:Neon.Cadence.Internal.MemoryStreamPool"/> when you've 
            finished with it.
            </summary>
            <param name="ignoreTypeCode">Optionally ignore unspecified message types (used for unit testing).</param>
            <returns>A <see cref="T:System.IO.MemoryStream"/> holding the serialized message.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SerializeAsBytes(System.Boolean)">
            <summary>
            <para>
            Serializes the message to bytes.
            </para>
            <note>
            This method is intended for testing purposes.  Use <see cref="M:Neon.Cadence.Internal.ProxyMessage.SerializeAsStream(System.Boolean)"/>
            for production since that method will perform better by not needing to allocate a
            byte array with the message contents for every call.
            </note>
            </summary>
            <param name="ignoreTypeCode">Optionally ignore unspecified message types (used for unit testing).</param>
            <returns>The serialized byte array.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.Clone">
            <summary>
            Implemented by derived classes to make a copy of themselves for echo testing
            purposes.  Note that this is not implemented for the base <see cref="T:Neon.Cadence.Internal.ProxyMessage"/>
            class.
            </summary>
            <returns>The cloned message.</returns>
            <exception cref="T:System.NotImplementedException">Thrown by this base class.</exception>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <summary>
            Implemented by derived classes to copy message properties to another
            message instance during a <see cref="M:Neon.Cadence.Internal.ProxyMessage.Clone"/> operation.
            </summary>
            <param name="target">The target message.</param>
            <remarks>
            <note>
            The method implementation can safely assume that the <paramref name="target"/>
            message can be cast into the implementation's message type.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetStringProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.String)">
            <summary>
            Helper method for retrieving a string property.
            </summary>
            <param name="key">The property key.</param>
            <param name="def">The default value to be returned if the named property doesn't exist.</param>
            <returns>The string value.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetIntProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Int32)">
            <summary>
            Helper method for retrieving a 32-bit integer property.
            </summary>
            <param name="key">The property key.</param>
            <param name="def">The default value to be returned if the named property doesn't exist.</param>
            <returns>The integer value.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetLongProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Int64)">
            <summary>
            Helper method for retrieving a 64-bit integer property.
            </summary>
            <param name="key">The property key.</param>
            <param name="def">The default value to be returned if the named property doesn't exist.</param>
            <returns>The long value.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetBoolProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Boolean)">
            <summary>
            Helper method for retrieving a boolean property.
            </summary>
            <param name="key">The property key.</param>
            <param name="def">The default value to be returned if the named property doesn't exist.</param>
            <returns>The long value.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetEnumProperty``1(Neon.Cadence.Internal.PropertyNameUtf8,``0)">
            <summary>
            Helper method for retrieving an enumeration property.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="key">The property key.</param>
            <param name="def">The default value to be returned if the named property doesn't exist.</param>
            <returns>The long value.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetDoubleProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Double)">
            <summary>
            Helper method for retrieving a double property.
            </summary>
            <param name="key">The property key.</param>
            <param name="def">The default value to be returned if the named property doesn't exist.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetDateTimeProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.DateTime)">
            <summary>
            Helper method for retrieving a date/time property.
            </summary>
            <param name="key">The property key.</param>
            <param name="def">The default value to be returned if the named property doesn't exist.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetTimeSpanProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.TimeSpan)">
            <summary>
            Helper method for retrieving a timespan property.
            </summary>
            <param name="key">The property key.</param>
            <param name="def">The default value to be returned if the named property doesn't exist.</param>
            <returns>The double value.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetJsonProperty``1(Neon.Cadence.Internal.PropertyNameUtf8)">
            <summary>
            Helper method for retrieving a complex property serialized as a JSON string.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="key">The property key.</param>
            <returns>The parsed value if the property exists or <c>null</c>.</returns>
            <remarks>
            <note>
            <para>
            <b>IMPORTANT:</b> Be very careful when referencing properties that use this
            method because the behavior will probably be unexepected.  You should:
            </para>
            <list type="bullet">
                <item>
                When you need to access multiple subfields of the property value,
                dereference the property once, save the value to a variable and
                then use the variable to access the subproperty.  Not doing this
                will result in the JSON being parsed again for each property
                reference.
                </item>
                <item>
                Dereferencing the property and changing a subproperty value won't
                actually persist the change back to the underlying property.  You'll
                need to dereference the property to a variable, change the subproperty,
                and then use <see cref="M:Neon.Cadence.Internal.ProxyMessage.SetJsonProperty``1(Neon.Cadence.Internal.PropertyNameUtf8,``0)"/> to persist the
                change. 
                </item>
            </list>
            <para>
            These restrictions are a bit odd but we're not actually expecting to 
            be doing any of these things within the <b>cadence-client</b> code.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.GetBytesProperty(Neon.Cadence.Internal.PropertyNameUtf8)">
            <summary>
            Helper method for retrieving a byte array property.
            </summary>
            <param name="key">The property key.</param>]
            <returns>The byte array or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetStringProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.String)">
            <summary>
            Helper method for setting a string property.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetIntProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Int32)">
            <summary>
            Helper method for setting a 32-bit integer property.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetLongProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Int64)">
            <summary>
            Helper method for setting a 64-bit integer property.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetBoolProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Boolean)">
            <summary>
            Helper method for setting a boolean property.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetEnumProperty``1(Neon.Cadence.Internal.PropertyNameUtf8,``0)">
            <summary>
            Helper method for setting an enumeration property.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetDoubleProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Double)">
            <summary>
            Helper method for setting a double property.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetDateTimeProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.DateTime)">
            <summary>
            Helper method for setting a date/time property.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetTimeSpanProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.TimeSpan)">
            <summary>
            Helper method for setting a timespan property.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetJsonProperty``1(Neon.Cadence.Internal.PropertyNameUtf8,``0)">
            <summary>
            Helper method for setting a complex property as JSON.
            </summary>
            <typeparam name="T">The property type.</typeparam>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyMessage.SetBytesProperty(Neon.Cadence.Internal.PropertyNameUtf8,System.Byte[])">
            <summary>
            Helper method for setting a byte array property.
            </summary>
            <param name="key">The property key.</param>
            <param name="value">The property value.</param>
        </member>
        <member name="T:Neon.Cadence.Internal.ProxyReply">
            <summary>
            Base class for all proxy requests.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ProxyReply.RequestId">
            <summary>
            Uniquely identifies the request this reply answers.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ProxyReply.Error">
            <summary>
            Optionally indicates that the request failed.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyReply.ThrowOnError">
            <summary>
            Throws the related exception if the reply is reporting an error.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.ProxyRequest">
            <summary>
            Base class for all proxy requests.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ProxyRequest.RequestId">
            <summary>
            Uniquely identifies this request.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ProxyRequest.IsCancellable">
            <summary>
            Optionally indicates that the operation may be cancelled by the 
            workflow application.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ProxyRequest.ReplyType">
            <summary>
            Derived request types must return the type of the expected
            <see cref="T:Neon.Cadence.Internal.ProxyReply"/> message.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ProxyRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.CadenceError">
            <summary>
            <b>INTERNAL USE ONLY:</b> Describes a Cadence error.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CadenceError.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CadenceError.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CadenceError.#ctor(System.String,Neon.Cadence.CadenceErrorTypes)">
            <summary>
            Constructs an error from parameters.
            </summary>
            <param name="error">The GOLANG error string.</param>
            <param name="type">Optionally specifies the error type.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.CadenceError.#ctor(System.Exception)">
            <summary>
            Constructs an error from a .NET exception.
            </summary>
            <param name="e">The exception.</param>
        </member>
        <member name="P:Neon.Cadence.Internal.CadenceError.String">
            <summary>
            Specifies the GOLANG error string.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.CadenceError.Type">
            <summary>
            Optionally specifies the GOLANG error type.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CadenceError.GetErrorType">
            <summary>
            Returns the error type.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CadenceError.SetErrorType(Neon.Cadence.CadenceErrorTypes)">
            <summary>
            Sets the error type.
            </summary>
            <param name="type">The new type.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.CadenceError.ToException">
            <summary>
            Converts the instance into an <see cref="T:Neon.Cadence.CadenceException"/>.
            </summary>
            <returns>One of the exceptions derived from <see cref="T:Neon.Cadence.CadenceException"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.CadenceError.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.CancelReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="T:Neon.Cadence.Internal.CancelRequest"/>
            indicating that the operation was canceled, has already completed or doesn't
            exist.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CancelReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.CancelReply.WasCancelled">
            <summary>
            Set to <c>true</c> if the operation was actually cancelled or <c>false</c>
            if the operation had already completed, doesn't exist, or if cancellation
            is not appropriate for the operation and no action was performed.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CancelReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.CancelReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.CancelRequest">
            <summary>
            <b>client --> proxy:</b> Sent periodically to confirm that the proxy is
            still healthy.  The proxy should send a <see cref="T:Neon.Cadence.Internal.CancelReply"/>
            optionally indicating that there's a problem by specifying an error.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CancelRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.CancelRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.CancelRequest.TargetRequestId">
            <summary>
            The ID of the request being cancelled.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.CancelRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.CancelRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ConnectReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.ConnectRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ConnectReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ConnectReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ConnectReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.ConnectRequest">
            <summary>
            <b>client --> proxy:</b> Requests the proxy establish a connection with a Cadence cluster.
            This maps to a <c>NewClient()</c> in the proxy.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ConnectRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ConnectRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.ConnectRequest.Endpoints">
            <summary>
            <para>
            The Cadence server network endpoints separated by commas.
            These may include a DNS hostname or IP address with a
            network port, formatted like:
            </para>
            <code>
            my-server.nhive.io:5555
            1.2.3.4:5555
            </code>
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ConnectRequest.Identity">
            <summary>
            Optionally identifies the client application.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ConnectRequest.ClientTimeout">
            <summary>
            The default client timeout.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ConnectRequest.Domain">
            <summary>
            The default Cadence domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ConnectRequest.CreateDomain">
            <summary>
            Indicates whether the Cadence domain should be created if it
            doesn't already exist.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ConnectRequest.Retries">
            <summary>
            Specifies the number of time the client will attempt to connect
            to the Cadence cluster.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.ConnectRequest.RetryDelay">
            <summary>
            Specifies the time to delay before retrying to connect to the cluster.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.ConnectRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.ConnectRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.DomainDeprecateReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.DomainDeprecateRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDeprecateReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDeprecateReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDeprecateReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.DomainDeprecateRequest">
            <summary>
            <b>client --> proxy:</b> Requests that the proxy register a Cadence domain.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDeprecateRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDeprecateRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDeprecateRequest.Name">
            <summary>
            Name of the domain to be depreciated.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDeprecateRequest.SecurityToken">
            <summary>
            Optional security token.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDeprecateRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDeprecateRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.DomainDescribeReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.DomainDescribeRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDescribeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDescribeReply.DomainInfoName">
            <summary>
            The domain name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDescribeReply.DomainInfoDescription">
            <summary>
            Human readable description for the domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDescribeReply.DomainInfoStatus">
            <summary>
            The domain status.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDescribeReply.DomainInfoOwnerEmail">
            <summary>
            Owner email address.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDescribeReply.ConfigurationRetentionDays">
            <summary>
            The workflow history retention period in days.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDescribeReply.ConfigurationEmitMetrics">
            <summary>
            Enables metric generation.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDescribeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDescribeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.DomainDescribeRequest">
            <summary>
            <b>client --> proxy:</b> Requests the details for a named domain.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDescribeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDescribeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainDescribeRequest.Name">
            <summary>
            The target Cadence domain name.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDescribeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainDescribeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.DomainRegisterReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.DomainRegisterRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainRegisterReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainRegisterReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainRegisterReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.DomainRegisterRequest">
            <summary>
            <b>client --> proxy:</b> Requests that the proxy register a Cadence domain.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainRegisterRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainRegisterRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainRegisterRequest.Name">
            <summary>
            Name for the new domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainRegisterRequest.Description">
            <summary>
            Human readable description for the domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainRegisterRequest.OwnerEmail">
            <summary>
            Owner email address.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainRegisterRequest.EmitMetrics">
            <summary>
            Enable metrics.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainRegisterRequest.RetentionDays">
            <summary>
            The complete workflow history retention period in days.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainRegisterRequest.SecurityToken">
            <summary>
            Optional security token.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainRegisterRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainRegisterRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.DomainUpdateReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.DomainDescribeRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainUpdateReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainUpdateReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainUpdateReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.DomainUpdateRequest">
            <summary>
            <b>client --> proxy:</b> Requests the details for a named domain.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainUpdateRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainUpdateRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainUpdateRequest.Name">
            <summary>
            The target Cadence domain name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainUpdateRequest.UpdatedInfoDescription">
            <summary>
            Specifies the new description.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainUpdateRequest.UpdatedInfoOwnerEmail">
            <summary>
            Specifies the new owner's email address.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainUpdateRequest.ConfigurationEmitMetrics">
            <summary>
            Specifies the metrics emission setting.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainUpdateRequest.ConfigurationRetentionDays">
            <summary>
            Specifies the workfloy history retention period in days.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.DomainUpdateRequest.SecurityToken">
            <summary>
            Optional security token.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainUpdateRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.DomainUpdateRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.HeartbeatReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.HeartbeatRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.HeartbeatReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.HeartbeatReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.HeartbeatReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.HeartbeatRequest">
            <summary>
            <b>client --> proxy:</b> Sent periodically to confirm that the proxy is
            still healthy.  The proxy should send a <see cref="T:Neon.Cadence.Internal.HeartbeatReply"/>,
            possibly indicating that there's a problem by specifying an error.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.HeartbeatRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.HeartbeatRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.HeartbeatRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.HeartbeatRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.InitializeReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.InitializeRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InitializeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InitializeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.InitializeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.InitializeRequest">
            <summary>
            <b>client --> proxy:</b> Informs the proxy of the network endpoint
            where the client is listening for proxy messages.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InitializeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InitializeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.InitializeRequest.LibraryAddress">
            <summary>
            The IP address where the Cadence client is listening for proxy messages
            send by the <b>cadence-proxy</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InitializeRequest.LibraryPort">
            <summary>
            The port where the Cadence client is listening for proxy messages
            send by the <b>cadence-proxy</b>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InitializeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.InitializeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.NewWorkerReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.NewWorkerRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.NewWorkerReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.NewWorkerReply.WorkerId">
            <summary>
            The ID of the new worker.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.NewWorkerReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.NewWorkerReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.NewWorkerRequest">
            <summary>
            <b>client --> proxy:</b> Registers with Cadence that the current
            connection is capable of executing task and/or activities.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.NewWorkerRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.NewWorkerRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.NewWorkerRequest.Name">
            <summary>
            Specifies the name to be used to register the workflow or activity worker.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.NewWorkerRequest.Domain">
            <summary>
            The domain hosting the Cadence workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.NewWorkerRequest.TaskList">
            <summary>
            Identifies the task list for the source workflows and activities.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.NewWorkerRequest.Options">
            <summary>
            The worker options.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.NewWorkerRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.NewWorkerRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.PingReply">
            <summary>
            Sent in response to a <see cref="T:Neon.Cadence.Internal.PingRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.PingReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.PingReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.PingReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.PingRequest">
            <summary>
            Sent by either the client or proxy for measuring transaction throughput.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.PingRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.PingRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.PingRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.PingRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.StopWorkerReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.StopWorkerRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.StopWorkerReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.StopWorkerReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.StopWorkerReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.StopWorkerRequest">
            <summary>
            <b>client --> proxy:</b> Stops a Cadence worker.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.StopWorkerRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.StopWorkerRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.StopWorkerRequest.WorkerId">
            <summary>
            Identifies the worker being stopped.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.StopWorkerRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.StopWorkerRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.TerminateReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.TerminateRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.TerminateReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.TerminateReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.TerminateReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.TerminateRequest">
            <summary>
            <b>client --> proxy:</b> Signals the proxy that it should terminate gracefully.  The
            proxy should send a <see cref="T:Neon.Cadence.Internal.TerminateReply"/> back to the client and
            then exit, terminating the process.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.TerminateRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.TerminateRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.TerminateRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.TerminateRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalActivityInfo">
            <summary>
            Holds information about an executing activity.  This maps directly to the
            GOLANG client's <b>ActivityInfo</b> structure.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.TaskToken">
            <summary>
            The activity task token.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.WorkflowType">
            <summary>
            The parent workflow type name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.WorkflowDomain">
            <summary>
            The parent workflow domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.WorkflowExecution">
            <summary>
            The parent workflow execution details.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.ActivityId">
            <summary>
            The activity ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.ActivityType">
            <summary>
            The activity type.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.TaskList">
            <summary>
            The activity task list.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.HeartbeatTimeout">
            <summary>
            The maximum time between heartbeats.  0 means no heartbeat needed.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.ScheduledTimestamp">
            <summary>
            Time (UTC) when the activity was scheduled.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.StartedTimestamp">
            <summary>
            Time (UTC) when the activity was started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.Deadline">
            <summary>
            Time (UTC) when the activity will timeout.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityInfo.Attempt">
            <summary>
            Indicates how many times the activity was been restarted.  This will be zero
            for the first execution, 1 for the second, and so on.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalActivityInfo.ToPublic">
            <summary>
            Converts the instance into a public <see cref="T:Neon.Cadence.ActivityInfo"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalActivityOptions">
            <summary>
            Specifies the options used for executing an activity.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityOptions.TaskList">
            <summary>
            TaskList that the activity needs to be scheduled on.
            optional: The default task list with the same name as the workflow task list.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityOptions.ScheduleToCloseTimeout">
            <summary>
            ScheduleToCloseTimeout - The end to end time out for the activity needed.
            The zero value of this uses default value.
            Optional: The default value is the sum of ScheduleToStartTimeout and StartToCloseTimeout
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityOptions.ScheduleToStartTimeout">
            <summary>
            ScheduleToStartTimeout - The queue time out before the activity starts executed.
            Mandatory: No default.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityOptions.StartToCloseTimeout">
            <summary>
            StartToCloseTimeout - The time out from the start of execution to end of it.
            Mandatory: No default.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityOptions.HeartbeatTimeout">
            <summary>
            HeartbeatTimeout - The periodic timeout while the activity is in execution. This is
            the max interval the server needs to hear at-least one ping from the activity.
            Optional: Default zero, means no heart beating is needed.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityOptions.WaitForCancellation">
            <summary>
            WaitForCancellation - Whether to wait for cancelled activity to be completed(
            activity can be failed, completed, cancel accepted)
            Optional: default false
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityOptions.ActivityID">
            <summary>
            ActivityID - Business level activity ID, this is not needed for most of the cases if you have
            to specify this then talk to cadence team. This is something will be done in future.
            Optional: default empty string
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityOptions.RetryPolicy">
            <summary>
            RetryPolicy specify how to retry activity if error happens. When RetryPolicy.ExpirationInterval is specified
            and it is larger than the activity's ScheduleToStartTimeout, then the ExpirationInterval will override activity's
            ScheduleToStartTimeout. This is to avoid retrying on ScheduleToStartTimeout error which only happen when worker
            is not picking up the task within the timeout. Retrying ScheduleToStartTimeout does not make sense as it just
            mark the task as failed and create a new task and put back in the queue waiting worker to pick again. Cadence
            server also make sure the ScheduleToStartTimeout will not be larger than the workflow's timeout.
            Same apply to ScheduleToCloseTimeout. See more details about RetryPolicy on the doc for RetryPolicy.
            Optional: default is no retry
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalActivityType">
            <summary>
            <b>INTERNAL USE ONLY:</b> Identifies an activity type.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalActivityType.Name">
            <summary>
            Identifies the workflow implementation.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalChildTerminationPolicy">
            <summary>
            <b>INTERNAL USE ONLY:</b> Enumerates the possible child workflow behaviors 
            when the parent workflow is terminated.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalChildTerminationPolicy.TERMINATE">
            <summary>
            <para>
            All open child workflows will be terminated when parent workflow is terminated.
            </para>
            <note>
            This policy is not implemented.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalChildTerminationPolicy.REQUEST_CANCEL">
            <summary>
            <para>
            Cancel requests will be sent to all open child workflows to all open child 
            workflows when parent workflow is terminated.
            </para>
            <note>
            This policy is not implemented.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalChildTerminationPolicy.ABANDON">
            <summary>
            Child workflow execution will continue unaffected when parent workflow is
            terminated.  This is the default policy.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalChildWorkflowOptions">
            <summary>
            <para>
            <b>INTERNAL USE ONLY:</b> Specifies child workflow execution options.  This maps 
            closely to this Cadence GOLANG structure:
            </para>
            <para>
            https://godoc.org/go.uber.org/cadence/internal#ChildWorkflowOptions
            </para>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalChildWorkflowOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.Domain">
            <summary>
            Domain of the child workflow.
            Optional: the current workflow (parent)'s domain will be used if this is not provided.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.WorkflowID">
            <summary>
            WorkflowID of the child workflow to be scheduled.
            Optional: an auto generated workflowID will be used if this is not provided.        /// </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.TaskList">
            <summary>
            TaskList that the child workflow needs to be scheduled on.
            Optional: the parent workflow task list will be used if this is not provided.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.ExecutionStartToCloseTimeout">
            <summary>
            ExecutionStartToCloseTimeout - The end to end timeout for the child workflow execution.
            Mandatory: no default
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.TaskStartToCloseTimeout">
            <summary>
            TaskStartToCloseTimeout - The decision task timeout for the child workflow.
            Optional: default is 10s if this is not provided (or if 0 is provided).
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.ChildPolicy">
            <summary>
            ChildPolicy defines the behavior of child workflow when parent workflow is terminated.
            Optional: default to use ChildWorkflowPolicyAbandon. We currently only support this policy.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.WaitForCancellation">
            <summary>
            WaitForCancellation - Whether to wait for cancelled child workflow to be ended (child workflow can be ended
            as: completed/failed/timedout/terminated/canceled)
            Optional: default false
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.WorkflowIdReusePolicy">
            <summary>
            WorkflowIDReusePolicy - Whether server allow reuse of workflow ID, can be useful
            for dedup logic if set to WorkflowIdReusePolicyRejectDuplicate
            Optional: defaulted to WorkflowIDReusePolicyAllowDuplicateFailedOnly.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.RetryPolicy">
            <summary>
            RetryPolicy - Optional retry policy for workflow. If a retry policy is specified, in case of workflow failure
            server will start new workflow execution if needed based on the retry policy.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalChildWorkflowOptions.CronSchedule">
            <summary>
            <para>
            CronSchedule - Optional cron schedule for workflow. If a cron schedule is specified, the workflow will run
            as a cron based on the schedule. The scheduling will be based on UTC time. Schedule for next run only happen
            after the current run is completed/failed/timeout. If a RetryPolicy is also supplied, and the workflow failed
            or timeout, the workflow will be retried based on the retry policy. While the workflow is retrying, it won't
            schedule its next run. If next schedule is due while workflow is running (or retrying), then it will skip that
            schedule. Cron workflow will not stop until it is terminated or cancelled (by returning cadence.CanceledError).
            The cron spec is as following:
            </para>
            <code>
            ┌───────────── minute (0 - 59)
            │ ┌───────────── hour (0 - 23)
            │ │ ┌───────────── day of the month (1 - 31)
            │ │ │ ┌───────────── month (1 - 12)
            │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
            │ │ │ │ │
            │ │ │ │ │
            * * * * *
            </code>
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalDescribeWorkflowExecutionResponse">
            <summary>
            <b>INTERNAL USE ONLY:</b> Cadence workflow execution details response.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalDescribeWorkflowExecutionResponse.ExecutionConfiguration">
            <summary>
            Execution configuration.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalDescribeWorkflowExecutionResponse.WorkflowExecutionInfo">
            <summary>
            Execution info.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalDescribeWorkflowExecutionResponse.PendingActivities">
            <summary>
            Pending activities.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalDescribeWorkflowExecutionResponse.ToPublic">
            <summary>
            Converts the instance into a public <see cref="T:Neon.Cadence.WorkflowDetails"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalLocalActivityOptions">
            <summary>
            <b>INTERNAL USE ONLY:</b> Specifies local activity execution options.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalLocalActivityOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalLocalActivityOptions.ScheduleToCloseTimeoutSeconds">
            <summary>
            Specifies the maximum time the activity can run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalLocalActivityOptions.RetryPolicy">
            <summary>
            The activity retry policy.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalMemo">
            <summary>
            <b>INTERNAL USE ONLY:</b> Holds optional metadata describing workflow as a map
            relating string names to byte arrays.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalMemo.Fields">
            <summary>
            Metadata keyed by string names.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalMessageTypes">
            <summary>
            <b>INTERNAL USE ONLY:</b> Enumerates the possible message types.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.Unspecified">
            <summary>
            Indicates a message with an unspecified type.  This normally indicates an error.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.InitializeRequest">
            <summary>
            <b>client --> proxy:</b> Informs the proxy of the network endpoint where the
            client is listening for proxy messages.  The proxy should respond with an
            <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.InitializeReply"/> when it's ready to begin receiving inbound
            proxy messages.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.InitializeReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.InitializeRequest"/> message
            to indicate that the proxy ready to begin receiving inbound proxy messages.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ConnectRequest">
            <summary>
            client --> proxy: Requests that the proxy establish a connection to a Cadence
            cluster.  This maps to a <c>NewClient()</c> in the proxy.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ConnectReply">
            <summary>
            proxy --> client: Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ConnectRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.TerminateRequest">
            <summary>
            <b>client --> proxy:</b> Signals the proxy that it should terminate gracefully.  The
            proxy should send a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.TerminateReply"/> back to the client and
            then exit, terminating the process.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.TerminateReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.TerminateRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.DomainRegisterRequest">
            <summary>
            <b>client --> proxy:</b> Requests that the proxy register a Cadence domain.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.DomainRegisterReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.DomainRegisterRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.DomainDescribeRequest">
            <summary>
            <b>client --> proxy:</b> Requests that the proxy return the details for a Cadence domain.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.DomainDescribeReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.DomainDescribeRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.DomainUpdateRequest">
            <summary>
            <b>client --> proxy:</b> Requests that the proxy update a Cadence domain.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.DomainUpdateReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.DomainUpdateRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.HeartbeatRequest">
            <summary>
            <b>client --> proxy:</b> Sent periodically (every second) by the client to the
            proxy to verify that it is still healthy.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.HeartbeatReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.HeartbeatRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.CancelRequest">
            <summary>
            <b>client --> proxy:</b> Sent to request that a pending operation be cancelled.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.CancelReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.CancelRequest"/> message,
            indicating that the operation was canceled or that it already completed or no longer
            exists.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.NewWorkerRequest">
            <summary>
            <b>client --> proxy:</b> Indicates that the application is capable of handling workflows
            and activities within a specific Cadence domain and task lisk.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.NewWorkerReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.NewWorkerRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.StopWorkerRequest">
            <summary>
            <b>client --> proxy:</b> Stops a Cadence worker.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.StopWorkerReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.StopWorkerRequest"/> message,
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.PingRequest">
            <summary>
            Sent from either the client or proxy mainly for measuring the raw throughput of 
            client/proxy transactions.  The receiver simply responds immediately with a
            <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.PingReply"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.PingReply">
            <summary>
            Sent by either side in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.PingRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.DomainDeprecateRequest">
            <summary>
            <b>client --> proxy:</b> Requests that the proxy deprecate a Cadence domain.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.DomainDeprecateReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.DomainDeprecateRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowRegisterRequest">
            <summary>
            <b>client --> proxy:</b> Registers a workflow handler.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowRegisterReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowRegisterRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowExecuteRequest">
            <summary>
            <b>client --> proxy:</b> Starts a workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowExecuteReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowExecuteRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalRequest">
            <summary>
            <b>client --> proxy:</b> Signals a running workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalWithStartRequest">
             <summary>
            <b>client --> proxy:</b> Signals a workflow, starting it first if necessary.
             </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalWithStartReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalWithStartRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowCancelRequest">
            <summary>
            <b>client --> proxy:</b> Cancels a workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowCancelReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowCancelRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowTerminateRequest">
            <summary>
            <b>client --> proxy:</b> Terminates a workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowTerminateReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowTerminateRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetHistoryRequest">
            <summary>
            <b>client --> proxy:</b> Requests a workflow's history.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetHistoryReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetHistoryRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowListClosedRequest">
            <summary>
            <b>client --> proxy:</b> Requests the list of closed workflows.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowListClosedReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowListClosedRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowListOpenExecutionsRequest">
            <summary>
            <b>client --> proxy:</b> Requests the list of open workflows.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowListOpenExecutionsReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowListOpenExecutionsRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowQueryRequest">
            <summary>
            <b>client --> proxy:</b> Queries a workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowQueryReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowQueryRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowDescribeExecutionRequest">
            <summary>
            <b>client --> proxy:</b> Returns information about a worflow execution.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowDescribeExecutionReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowDescribeExecutionRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowDescribeTaskListRequest">
            <summary>
            <b>RESERVED:</b> This is not currently implemented.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowDescribeTaskListReply">
            <summary>
            <b>RESERVED:</b> This is not currently implemented.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowInvokeRequest">
            <summary>
            <b>proxy --> client:</b> Commands the client client and associated .NET application
            to process a workflow instance.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowInvokeReply">
            <summary>
            <b>client --> proxy:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowInvokeRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowExecuteChildRequest">
            <summary>
            <b>client --> proxy:</b> Initiates execution of a child workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowExecuteChildReply">
            <summary>
            <b>proxy --> cl;ient:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowExecuteChildRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalSubscribeRequest">
            <summary>
            <b>client --> proxy:</b> Indicates that .NET application wishes to consume signals from
            a named channel.  Any signals received by the proxy will be forwarded to the
            client via <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalInvokeRequest"/> messages.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalSubscribeReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalSubscribeRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalInvokeRequest">
            <summary>
            <b>proxy --> client:</b> Sent when a signal is received by the proxy on a subscribed channel.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalInvokeReply">
            <summary>
            <b>client --> proxy:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalInvokeRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowMutableRequest">
            <summary>
            <b>client --> proxy:</b> Implements the standard Cadence <i>side effect</i> behavior
            by including the mutable result being set.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowMutableReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowMutableRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetVersionRequest">
            <summary>
            <b>client --> proxy:</b> Manages workflow versioning.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetVersionReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetVersionRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSetCacheSizeRequest">
            <summary>
            <b>client --> proxy:</b> Sets the maximum number of bytes the client will use
            to cache the history of a sticky workflow on a workflow worker as a performance
            optimization.  When this is exceeded for a workflow, its full history will
            need to be retrieved from the Cadence cluster the next time the workflow
            instance is assigned to a worker. 
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSetCacheSizeReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSetCacheSizeRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetResultRequest">
            <summary>
            <b>client --> proxy:</b> Requests the workflow result encoded as a byte array, waiting
            for the workflow to complete if it is still running.  Note that this request will fail
            if the workflow did not run to completion.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetResultReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetResultRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowHasLastResultRequest">
            <summary>
             <b>client --> proxy:</b> Determines whether the last execution of the workflow has
             a completion result.  This can be used by CRON workflows to determine whether the
             last run returned a result.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowHasLastResultReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowHasLastResultRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetLastResultRequest">
            <summary>
             <b>client --> proxy:</b> Returns the result from the last execution of the workflow.
             This can be used by CRON workflows to retrieve state from the last workflow run.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetLastResultReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetLastResultRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowDisconnectContextRequest">
            <summary>
             <b>client --> proxy:</b> Commands the proxy to replace the current workflow context
             with a new disconnected context.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowDisconnectContextReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowDisconnectContextRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetTimeRequest">
            <summary>
            <b>client --> proxy:</b> Request the current workflow time (UTC).
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetTimeReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowGetTimeRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSleepRequest">
            <summary>
            <b>client --> proxy:</b> Sent to have the workflow sleep for a period of time.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSleepReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSleepRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowWaitForChildRequest">
            <summary>
            <b>client --> proxy:</b> Waits for a workflow that has already been started
            by a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowExecuteChildRequest"/> to finish.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowWaitForChildReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowWaitForChildRequest"/> message
            after the child is finish.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalChildRequest">
            <summary>
            <b>client --> proxy:</b> Sends a signal to a child workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalChildReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSignalChildRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowCancelChildRequest">
            <summary>
            <b>client --> proxy:</b> Cancels a child workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowCancelChildReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowCancelChildRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.UNUSED_2">
            <summary>
            <b>UNUSED:</b> Available message ID.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.UNUSED_3">
            <summary>
            <b>UNUSED:</b> Available message ID..
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSetQueryHandlerRequest">
            <summary>
            <b>client --> proxy:</b> Registers a query handler by name.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSetQueryHandlerReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowSetQueryHandlerRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowQueryInvokeRequest">
            <summary>
            <b>proxy --> client:</b> Invokes a query on a workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowQueryInvokeReply">
            <summary>
            <b>client --> proxy:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.WorkflowQueryInvokeRequest"/>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityExecuteRequest">
            <summary>
            <b>client --> proxy:</b> Executes an activity within the context of a workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityExecuteReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityExecuteRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityInvokeRequest">
            <summary>
            <b>proxy --> client:</b> Invokes an activity on an activity worker. 
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityInvokeReply">
            <summary>
            <b>client --> proxy:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityInvokeRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityGetHeartbeatDetailsRequest">
            <summary>
            <b>client --> proxy:</b> Requests the heartbeat details from the last failed activity run.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityGetHeartbeatDetailsReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityGetHeartbeatDetailsRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityLogRequest">
            <summary>
            <b>client --> proxy:</b> Logs a message for an activity.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityLogReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityLogRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityRecordHeartbeatRequest">
            <summary>
            <b>client --> proxy:</b> Records a heartbeat message for an activity.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityRecordHeartbeatReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityRecordHeartbeatRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityHasHeartbeatDetailsRequest">
            <summary>
            <b>client --> proxy:</b> Determines whether an activity execution has any heartbeat details.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityHasHeartbeatDetailsReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityHasHeartbeatDetailsRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityStoppingRequest">
            <summary>
            <b>proxy --> client:</b> Signals the client that an activity is being stopped. 
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityStoppingReply">
            <summary>
            <b>client --> proxy:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityStoppingRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityExecuteLocalRequest">
            <summary>
            <b>client --> proxy:</b> Executes a local activity within the context of a workflow.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityExecuteLocalReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityExecuteLocalRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityInvokeLocalRequest">
            <summary>
            <b>proxy --> client:</b> Invokes a local activity on an activity worker. 
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityInvokeLocalReply">
            <summary>
            <b>client --> proxy:</b> Sent in response to a <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityInvokeLocalRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityRegisterRequest">
            <summary>
            <b>client --> proxy:</b> Registers an activity handler.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityRegisterReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to an <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityRegisterRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityGetInfoRequest">
            <summary>
            <b>client --> proxy:</b> Requests information about an activity.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityGetInfoReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to an <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityGetInfoRequest"/> message.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityCompleteRequest">
            <summary>
            <b>client --> proxy:</b> Requests that an activity be completed externally.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityCompleteReply">
            <summary>
            <b>proxy --> client:</b> Sent in response to an <see cref="F:Neon.Cadence.Internal.InternalMessageTypes.ActivityCompleteRequest"/> message.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalPendingActivityInfo">
            <summary>
            <b>INTERNAL USE ONLY:</b> Describes an executing activity.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.ActivityID">
            <summary>
            The activity ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.ActivityType">
            <summary>
            The activity type.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.State">
            <summary>
            The activity state.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.HeartbeatDetails">
            <summary>
            Details from the last activity heartbeart.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.LastHeartbeatTimestamp">
            <summary>
            Time when the last activity heartbeat was received.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.LastStartedTimestamp">
            <summary>
            Time when the activity was most recently started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.Attempt">
            <summary>
            The number of times the activity has been started/restarted.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.MaximumAttempts">
            <summary>
            The maximum times the activity may be started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.ScheduledTimestamp">
            <summary>
            Time when the activity is scheduled to run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalPendingActivityInfo.ExpirationTimestamp">
            <summary>
            Time when the activity must complete.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalPendingActivityInfo.ToPublic">
            <summary>
            Converts the instance into the corresponding public <see cref="T:Neon.Cadence.DescribedActivityInfo"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalPendingActivityState">
            <summary>
            Enumerates the states for a pending activity.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalPendingActivityState.SCHEDULED">
            <summary>
            The activity has been scheduled but is not running.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalPendingActivityState.STARTED">
            <summary>
            The activity is running.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalPendingActivityState.CANCEL_REQUESTED">
            <summary>
            The activity is running but has a cancel request pending.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalProxyMessageAttribute">
            <summary>
            <b>INTERNAL USE ONLY:</b> Used to tag proxy message class implementations 
            and also associate the message class with the message type code.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalProxyMessageAttribute.#ctor(Neon.Cadence.Internal.InternalMessageTypes)">
            <summary>
            Constructor.
            </summary>
            <param name="type">Specifies the message type to be used when serializing the tagged message.</param>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalProxyMessageAttribute.Type">
            <summary>
            Returns the associated message type code.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalRegisterDomainRequest">
            <summary>
            Domain registration details.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRegisterDomainRequest.Name">
            <summary>
            The domain name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRegisterDomainRequest.Description">
            <summary>
            The domain description.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRegisterDomainRequest.OwnerEmail">
            <summary>
            The domain owner's email address.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRegisterDomainRequest.RetentionDays">
            <summary>
            The number of days to retain the history for workflowws
            completed in this domain.  This defaults to <b>7 days</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRegisterDomainRequest.EmitMetrics">
            <summary>
            Enables metric generation.  This defaults to <c>false.</c>
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalReplayStatus">
            <summary>
            Indicates a workflow's current replay status.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalReplayStatus.Unspecified">
            <summary>
            Indicates that the corresponding operation cannot determine the replay
            status (e.g. because the it didn't relate to an executing workflow).
            This is the default value.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalReplayStatus.NotReplaying">
            <summary>
            The related workflow is not replaying.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalReplayStatus.Replaying">
            <summary>
            The related workflow is replaying.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalResetPointInfo">
            <summary>
            <b>INTERNAL USE ONLY:</b> Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalResetPointInfo.BinaryChecksum">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalResetPointInfo.RunId">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalResetPointInfo.FirstDecisionCompletedId">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalResetPointInfo.CreatedTimeNano">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalResetPointInfo.ExpiringTimeNano">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalResetPointInfo.Resettable">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalResetPointInfo.ToPublic">
            <summary>
            Converts the instance into a public <see cref="T:Neon.Cadence.WorkflowResetPoint"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalResetPoints">
            <summary>
            <b>INTERNAL USE ONLY:</b> Decribes the reset points.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalResetPoints.Points">
            <summary>
            Lists the reset points.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalRetryPolicy">
            <summary>
            <para>
            <b>INTERNAL USE ONLY:</b> Used to serialize standard Neon <see cref="T:Neon.Retry.IRetryPolicy"/> 
            instances into a form compatible with the Cadence GOLANG client.  This class maps
            to the Cadence GOLANG client structure:
            </para>
            <para>
            https://godoc.org/go.uber.org/cadence/internal#RetryPolicy
            </para>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalRetryPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalRetryPolicy.#ctor(Neon.Retry.LinearRetryPolicy)">
            <summary>
            Constructs an instance from a <see cref="T:Neon.Retry.LinearRetryPolicy"/>.
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalRetryPolicy.#ctor(Neon.Retry.ExponentialRetryPolicy)">
            <summary>
            Constructs an instance from a <see cref="T:Neon.Retry.ExponentialRetryPolicy"/>,
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRetryPolicy.InitialInterval">
            <summary>
            Backoff interval for the first retry. If coefficient is 1.0 then it is used for all retries.
            Required, no default value.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRetryPolicy.BackoffCoefficient">
            <summary>
            Coefficient used to calculate the next retry backoff interval.
            The next retry interval is previous interval multiplied by this coefficient.
            Must be 1 or larger. Default is 2.0.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRetryPolicy.MaximumInterval">
            <summary>
            Specifies the maximim retry interval.  Retries intervals will start at <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.InitialInterval"/>
            and then be multiplied by <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.BackoffCoefficient"/> for each retry attempt until the
            interval reaches or exceeds <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.MaximumInterval"/>, at which point point each
            retry will use <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.MaximumInterval"/> for all subsequent attempts.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRetryPolicy.ExpirationInterval">
            <summary>
            Maximum time to retry.  Either <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.ExpirationInterval"/> or <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.MaximumAttempts"/> is 
            required.  Retries will stop when this is exceeded even if maximum retries is not been reached.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRetryPolicy.MaximumAttempts">
            <summary>
            Maximum number of attempts.  When exceeded the retries stop.  If not set or set to 0, it means 
            unlimited, and the policy will rely on <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.ExpirationInterval"/> to decide when to stop
            retrying.  Either <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.MaximumAttempts"/> or <see cref="P:Neon.Cadence.Internal.InternalRetryPolicy.MaximumInterval"/>"/> is required.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalRetryPolicy.NonRetriableErrorReasons">
            <summary>
            <para>
            Specifies Cadence errors that should not be retried. This is optional. Cadence server 
            will stop retrying if error reason matches this list.
            </para>
            <list type="bullet">
            <item>Custom errors: <b>cadence.NewCustomError(reason)</b></item>
            <item>Panic errors: <b>cadenceInternal:Panic</b></item>
            <item>Generic errors: <b>cadenceInternal:Generic</b></item>
            <item>
            Timeout errors: <b>cadenceInternal:Timeout TIMEOUT_TYPE</b>, where
            <b>TIMEOUT_TYPE</b> can be be <b>START_TO_CLOSE</b> or <b>HEARTBEAT</b>.
            </item>
            </list>
            <note>
            Cancellation is not a failure, so it won't be retried.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalStartWorkflowOptions">
            <summary>
            <para>
            <b>INTERNAL USE ONLY:</b> Specifies workflow execution options.  This maps 
            pretty closely to this Cadence GOLANG structure:
            </para>
            <para>
            https://godoc.org/go.uber.org/cadence/internal#StartWorkflowOptions
            </para>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalStartWorkflowOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalStartWorkflowOptions.ID">
            <summary>
            ID - The business identifier of the workflow execution.
            Optional: defaulted to a uuid.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalStartWorkflowOptions.TaskList">
            <summary>
            TaskList - The decisions of the workflow are scheduled on this queue.
            This is also the default task list on which activities are scheduled. The workflow author can choose
            to override this using activity options.  Mandatory: No default.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalStartWorkflowOptions.ExecutionStartToCloseTimeout">
            <summary>
            ExecutionStartToCloseTimeout - The time out for duration of workflow execution (expressed
            in nanoseconds).  Mandatory: No default.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalStartWorkflowOptions.DecisionTaskStartToCloseTimeout">
            <summary>
            DecisionTaskStartToCloseTimeout - The time out for processing decision task from the time the worker
            pulled this task. If a decision task is lost, it is retried after this timeout.
            Expressed as nanoseconds.  Optional: defaulted to 10 secs.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalStartWorkflowOptions.WorkflowIdReusePolicy">
            <summary>
            WorkflowIDReusePolicy - Whether server allow reuse of workflow ID, can be useful
            for dedup logic if set to WorkflowIdReusePolicyRejectDuplicate.
            Optional: defaulted to WorkflowIDReusePolicyAllowDuplicateFailedOnly.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalStartWorkflowOptions.RetryPolicy">
            <summary>
            RetryPolicy - Optional retry policy for workflow. If a retry policy is specified, in case of workflow failure
            server will start new workflow execution if needed based on the retry policy.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalStartWorkflowOptions.CronSchedule">
            <summary>
            <para>
            CronSchedule - Optional cron schedule for workflow. If a cron schedule is specified, the workflow will run
            as a cron based on the schedule. The scheduling will be based on UTC time. Schedule for next run only happen
            after the current run is completed/failed/timeout. If a RetryPolicy is also supplied, and the workflow failed
            or timeout, the workflow will be retried based on the retry policy. While the workflow is retrying, it won't
            schedule its next run. If next schedule is due while workflow is running (or retrying), then it will skip that
            schedule. Cron workflow will not stop until it is terminated or cancelled (by returning cadence.CanceledError).
            The cron spec is as following:
            </para>
            <code>
            ┌───────────── minute (0 - 59)
            │ ┌───────────── hour (0 - 23)
            │ │ ┌───────────── day of the month (1 - 31)
            │ │ │ ┌───────────── month (1 - 12)
            │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
            │ │ │ │ │
            │ │ │ │ │
            * * * * *
            </code>
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalStartWorkflowOptions.Memo">
            <summary>
            Memo - Optional info that will be shown in list workflow.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalTaskList">
            <summary>
            <b>INTERNAL USE ONLY:</b> Describes a task list.  This maps directly to the Cadence GOLANG <b>TaskList</b> structure.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalTaskList.Name">
            <summary>
            Identifies the task list.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalTaskList.TaskListKind">
            <summary>
            Indicates the task list kind.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalWorkerOptions">
            <summary>
            <b>INTERNAL USE ONLY:</b> Specifies the options Cadence will use when assigning
            workflow and activity executions to a user's worker service.  This maps fairly 
            closely to the  Cadence GOLANG <b>WorkerOptions</b>, but we removed a few fields
            that don't make sense to serialize.  See the remarks for more information.
            </summary>
            <remarks>
            <list type="table">
            <item>
                <term><b>MetricsScope</b></term>
                <description>
                I don't believe we'll really need to specify this on a per-workflow basis.
                </description>
            </item>
            <item>
                <term><b>Logger</b></term>
                <description>
                We're not going to support custom workflow loggers.
                </description>
            </item>
            <item>
                <term><b>BackgroundActivityContext </b></term>
                <description>
                I believe the <b>cadence-proxy</b> can a common context for all
                workflow executions.
                </description>
            </item>
            <item>
                <term><b>DataConverter </b></term>
                <description>
                This is not required because <b>cadence-proxy</b> deals only with
                raw byte arrays.
                </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.MaxConcurrentActivityExecutionSize">
            <summary>
            Optional: To set the maximum concurrent activity executions this worker can have.
            The zero value of this uses the default value.
            default: defaultMaxConcurrentActivityExecutionSize(1k)
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.WorkerActivitiesPerSecond">
            <summary>
            Optional: Sets the rate limiting on number of activities that can be executed per second per
            worker. This can be used to limit resources used by the worker.
            Notice that the number is represented in float, so that you can set it to less than
            1 if needed. For example, set the number to 0.1 means you want your activity to be executed
            once for every 10 seconds. This can be used to protect down stream services from flooding.
            The zero value of this uses the default value. Default: 100k
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.MaxConcurrentLocalActivityExecutionSize">
            <summary>
            Optional: To set the maximum concurrent local activity executions this worker can have.
            The zero value of this uses the default value.
            default: 1k
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.WorkerLocalActivitiesPerSecond">
            <summary>
            Optional: Sets the rate limiting on number of local activities that can be executed per second per
            worker. This can be used to limit resources used by the worker.
            Notice that the number is represented in float, so that you can set it to less than
            1 if needed. For example, set the number to 0.1 means you want your local activity to be executed
            once for every 10 seconds. This can be used to protect down stream services from flooding.
            The zero value of this uses the default value. Default: 100k
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.TaskListActivitiesPerSecond">
            <summary>
            Optional: Sets the rate limiting on number of activities that can be executed per second.
            This is managed by the server and controls activities per second for your entire task list
            whereas WorkerActivityTasksPerSecond controls activities only per worker.
            Notice that the number is represented in float, so that you can set it to less than
            1 if needed. For example, set the number to 0.1 means you want your activity to be executed
            once for every 10 seconds. This can be used to protect down stream services from flooding.
            The zero value of this uses the default value. Default: 100k
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.MaxConcurrentDecisionTaskExecutionSize">
            <summary>
            Optional: To set the maximum concurrent decision task executions this worker can have.
            The zero value of this uses the default value.
            default: defaultMaxConcurrentTaskExecutionSize(1k)
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.WorkerDecisionTasksPerSecond">
            <summary>
            Optional: Sets the rate limiting on number of decision tasks that can be executed per second per
            worker. This can be used to limit resources used by the worker.
            The zero value of this uses the default value. Default: 100k
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.AutoHeartBeat">
            <summary>
            Optional: if the activities need auto heart beating for those activities
            by the framework
            default: false not to heartbeat.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.Identity">
            <summary>
            Optional: Sets an identify that can be used to track this host for debugging.
            default: default identity that include hostname, groupName and process ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.EnableLoggingInReplay">
            <summary>
            Optional: Enable logging in replay.
            In the workflow code you can use workflow.GetLogger(ctx) to write logs. By default, the logger will skip log
            entry during replay mode so you won't see duplicate logs. This option will enable the logging in replay mode.
            This is only useful for debugging purpose.
            default: false
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.DisableWorkflowWorker">
            <summary>
            Optional: Disable running workflow workers.
            default: false
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.DisableActivityWorker">
            <summary>
            Optional: Disable running activity workers.
            default: false
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.DisableStickyExecution">
            <summary>
            Optional: Disable sticky execution.
            default: false
            Sticky Execution is to run the decision tasks for one workflow execution on same worker host. This is an
            optimization for workflow execution. When sticky execution is enabled, worker keeps the workflow state in
            memory. New decision task contains the new history events will be dispatched to the same worker. If this
            worker crashes, the sticky decision task will timeout after StickyScheduleToStartTimeout, and cadence server
            will clear the stickiness for that workflow execution and automatically reschedule a new decision task that
            is available for any worker to pick up and resume the progress.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.StickyScheduleToStartTimeout">
            <summary>
            Optional: Sticky schedule to start timeout.
            default: 5s
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.NonDeterministicWorkflowPolicy">
            <summary>
            Optional: Sets how decision worker deals with non-deterministic history events
            (presumably arising from non-deterministic workflow definitions or non-backward compatible workflow definition changes).
            default: NonDeterministicWorkflowPolicyBlockWorkflow, which just logs error but reply nothing back to server
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkerOptions.WorkerStopTimeout">
            <summary>
            Optional: worker graceful shutdown timeout.
            default: 0s
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalWorkflowCloseStatus">
            <summary>
            Enumerates the states for a pending activity.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalWorkflowCloseStatus.COMPLETED">
            <summary>
            The workflow completed successfully.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalWorkflowCloseStatus.FAILED">
            <summary>
            The workflow failed.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalWorkflowCloseStatus.CANCELED">
            <summary>
            The workflow was cancelled.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalWorkflowCloseStatus.TERMINATED">
            <summary>
            The workflow was terminated.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalWorkflowCloseStatus.CONTINUED_AS_NEW">
            <summary>
            The workflow was restarted (aka <i>continued as new</i>).
            </summary>
        </member>
        <member name="F:Neon.Cadence.Internal.InternalWorkflowCloseStatus.TIMED_OUT">
            <summary>
            The workflow timed out.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalWorkflowExecution">
            <summary>
            <b>INTERNAL USE ONLY:</b> Cadence workflow execution details.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecution.ID">
            <summary>
            The original ID assigned to the workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecution.RunID">
            <summary>
            The latest ID assigned to the workflow.  Note that this will differ
            from <see cref="P:Neon.Cadence.Internal.InternalWorkflowExecution.ID"/> when the workflow has been restarted.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalWorkflowExecution.ToPublic">
            <summary>
            Converts the instance into a public <see cref="T:Neon.Cadence.WorkflowRun"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalWorkflowExecution2">
            <summary>
            <b>INTERNAL USE ONLY:</b> Cadence workflow execution details.  Unforunately, this
            extra class is required because the GOLANG client also defines a second class
            that serializes slightly differently.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecution2.ID">
            <summary>
            The original ID assigned to the workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecution2.RunID">
            <summary>
            The latest ID assigned to the workflow.  Note that this will differ
            from <see cref="P:Neon.Cadence.Internal.InternalWorkflowExecution2.ID"/> when the workflow has been restarted.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalWorkflowExecution2.ToPublic">
            <summary>
            Converts the instance into a public <see cref="T:Neon.Cadence.WorkflowRun"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalWorkflowExecutionConfiguration">
            <summary>
            <b>INTERNAL USE ONLY:</b> Describes a workflow configuration.  This maps directly
            to the Cadence GOLANG  <b>WorkflowExecutionConfiguration </b> structure.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionConfiguration.TaskList">
            <summary>
            Identifies the task list where the workflow was scheduled.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionConfiguration.ExecutionStartToCloseTimeout">
            <summary>
            Maximum time the entire workflow may take to complete end-to-end (nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionConfiguration.TaskStartToCloseTimeoutSeconds">
            <summary>
            Maximum time a workflow task/decision may take to complete (nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionConfiguration.ChildPolicy">
            <summary>
            The termination policy to apply to the child workflow when
            the parent workflow is terminated.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalWorkflowExecutionConfiguration.ToPublic">
            <summary>
            Coverts the instance to a public <see cref="T:Neon.Cadence.WorkflowConfig"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalWorkflowExecutionInfo">
            <summary>
            <b>INTERNAL USE ONLY:</b> Describes a workflow execution.  This maps directly to the Cadence GOLANG <b>WorkflowExecutionInfo</b> structure. 
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.Execution">
            <summary>
            Describes the workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.WorkflowType">
            <summary>
            Identifies the workflow implementation.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.StartTime">
            <summary>
            Workflow start time.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.CloseTime">
            <summary>
            Workflow close time.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.WorkflowCloseStatus">
            <summary>
            Workflow close status.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.HistoryLength">
            <summary>
            Workflow history length.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.ParentDomainId">
            <summary>
            Identifies the domain where the parent workflow is running.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.ParentExecution">
            <summary>
            Identfies the parent workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.ExecutionTime">
            <summary>
            The workflow execution time.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.Memo">
            <summary>
            Optional workflow metadata.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.InternalWorkflowExecutionInfo.ToPublic">
            <summary>
            Converts the instance into a public <see cref="T:Neon.Cadence.WorkflowState"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.InternalWorkflowType">
            <summary>
            <b>INTERNAL USE ONLY:</b> Identifies a workflow type.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.InternalWorkflowType.Name">
            <summary>
            Identifies the workflow implementation.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Internal.MemoryStreamPool">
            <summary>
            Manages a pool of <see cref="T:System.IO.MemoryStream"/> instances used for serializing
            and deserializing proxy messages.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.MemoryStreamPool.Alloc">
            <summary>
            Allocates a stream from the pool.
            </summary>
            <returns>The allocated stream.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.MemoryStreamPool.Free(System.IO.MemoryStream)">
            <summary>
            Frees the stream by adding it back to the pool.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:Neon.Cadence.Internal.PropertyNames">
            <summary>
            Enumerates the Cadence proxy message property names as <see cref="T:Neon.Cadence.Internal.PropertyNameUtf8"/>
            values that have the UTF-8 encodings pre-computed.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNames.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNames.Add(Neon.Cadence.Internal.PropertyNameUtf8)">
            <summary>
            Adds a property name to the internal hash table.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNames.Lookup(System.Span{System.Byte})">
            <summary>
            Looks up a property name from a <c>byte</c> <see cref="T:System.Span`1"/>.
            </summary>
            <param name="byteSpan">The byte span.</param>
            <returns>The <see cref="T:Neon.Cadence.Internal.PropertyNameUtf8"/>.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the requested property name does not exist.</exception>
        </member>
        <member name="T:Neon.Cadence.Internal.PropertyNameUtf8">
            <summary>
            Maps a property name string to its UTF-8 form.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNameUtf8.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash code for a byte array.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNameUtf8.ComputeHash(System.Span{System.Byte})">
            <summary>
            Computes the hash code for a <c>byte</c> <see cref="T:System.Span`1"/>.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNameUtf8.Equal(System.Span{System.Byte},System.Byte[])">
            <summary>
            Compares a <b>byte</b> <see cref="T:System.Span`1"/> against a <c>byte</c> array
            for equality.
            </summary>
            <param name="byteSpan">The byte span.</param>
            <param name="byteArray">The byte array.</param>
            <returns><c>true</c> if the items are equal.</returns>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNameUtf8.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The property name string.</param>
        </member>
        <member name="P:Neon.Cadence.Internal.PropertyNameUtf8.Name">
            <summary>
            Returns the property name as a string.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.PropertyNameUtf8.NameUtf8">
            <summary>
            Returns the property name encoded as IUTF-8 bytes.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNameUtf8.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.PropertyNameUtf8.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowCancelChildReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowCancelChildRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelChildReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelChildReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelChildReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowCancelChildRequest">
            <summary>
            <b>client --> proxy:</b> Cancels a child workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelChildRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowCancelChildRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowCancelChildRequest.ChildId">
            <summary>
            Identifies the child workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelChildRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelChildRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowCancelReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowCancelRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowCancelRequest">
            <summary>
            <b>proxy --> client:</b> Cancels a workflow execution.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowCancelRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowCancelRequest.WorkflowId">
            <summary>
            Identifies the workflow by ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowCancelRequest.RunId">
            <summary>
            Identifies the specific workflow run to be cancelled.  The latest run
            will be cancelled when this is <c>null</c> or empty.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowCancelRequest.Domain">
            <summary>
            Optionally overrides the current client domain.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowCancelRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowDescribeExecutionReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowDescribeExecutionRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDescribeExecutionReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowDescribeExecutionReply.Details">
            <summary>
            The workflow execution details.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDescribeExecutionReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDescribeExecutionReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowDescribeExecutionRequest">
            <summary>
            <b>proxy --> client:</b> Sends a signal to a running workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDescribeExecutionRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowDescribeExecutionRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowDescribeExecutionRequest.WorkflowId">
            <summary>
            Identifies the workflow by ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowDescribeExecutionRequest.RunId">
            <summary>
            Identifies the specific workflow run to be cancelled.  The latest run
            will be cancelled when this is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDescribeExecutionRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDescribeExecutionRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowDisconnectContextReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowDisconnectContextRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDisconnectContextReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDisconnectContextReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDisconnectContextReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowDisconnectContextRequest">
            <summary>
            <b>client --> proxy:</b> Commands cadence-proxy to replace the current workflow
            context with context that is disconnected from the parent context.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDisconnectContextRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowDisconnectContextRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDisconnectContextRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowDisconnectContextRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowExecuteChildReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowExecuteChildReply"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteChildReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteChildReply.ChildId">
            <summary>
            The child workflow identifier.  This will be used in other messages such 
            as <see cref="T:Neon.Cadence.Internal.WorkflowSignalChildRequest"/>, <see cref="T:Neon.Cadence.Internal.WorkflowWaitForChildRequest"/>,
            and <see cref="T:Neon.Cadence.Internal.WorkflowCancelChildRequest"/> to identify the target child workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteChildReply.Execution">
            <summary>
            Returns details identifying the child workflow execution.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteChildReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteChildReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowExecuteChildRequest">
            <summary>
            <b>client --> proxy:</b> Begins execution of a child workflow returning the
            new workflow IDs.  A subsequent <see cref="T:Neon.Cadence.Internal.WorkflowWaitForChildRequest"/> message
            will be sent to wait for the workflow to actually finish.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteChildRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteChildRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteChildRequest.Workflow">
            <summary>
            Specifies the child workflow to be executed.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteChildRequest.Args">
            <summary>
            Specifies the child workflow arguments.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteChildRequest.Options">
            <summary>
            Specifies the child workflow options.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteChildRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteChildRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowExecuteReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowExecuteRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteReply.Execution">
            <summary>
            Returns details identifying the workflow execution.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowExecuteRequest">
            <summary>
            <b>proxy --> client:</b> Starts a workflow execution.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteRequest.Domain">
            <summary>
            Identifies the Cadence domain hosting the workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteRequest.Workflow">
            <summary>
            Identifies the workflow implementation to be started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteRequest.Args">
            <summary>
            Optionally specifies the workflow arguments encoded as a byte array.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowExecuteRequest.Options">
            <summary>
            Optionally specifies the workflow start options.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowExecuteRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowGetLastLastReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowGetLastResultRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetLastLastReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetLastLastReply.Result">
            <summary>
            Indicates the workflow's last completion result.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetLastLastReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetLastLastReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowGetLastResultRequest">
            <summary>
            <b>client --> proxy:</b> Returns the result from the last execution of the workflow.
             This can be used by CRON workflows to retrieve state from the last workflow run.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetLastResultRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetLastResultRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetLastResultRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetLastResultRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowGetResultReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowGetResultRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetResultReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetResultReply.Result">
            <summary>
            The query result bytes or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetResultReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetResultReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowGetResultRequest">
            <summary>
            <b>proxy --> client:</b> Requests the results from a workflow execution.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetResultRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetResultRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetResultRequest.WorkflowId">
            <summary>
            Identifies the workflow by ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetResultRequest.RunId">
            <summary>
            Identifies the specific workflow run.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetResultRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetResultRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowGetTimeReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowGetTimeReply"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetTimeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetTimeReply.Time">
            <summary>
            The current workflow time expressed as 100 nanosecond ticks
            since 01/01/0001 00:00.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetTimeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetTimeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowGetTimeRequest">
            <summary>
            <b>client --> proxy:</b> Requests the current workflow time.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetTimeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetTimeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetTimeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetTimeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowGetVersionReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowGetVersionRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetVersionReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetVersionReply.Version">
            <summary>
            Returns the workflow implementation version. 
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetVersionReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetVersionReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowGetVersionRequest">
            <summary>
            <b>client --> proxy:</b> Manages workflow versioning.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetVersionRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetVersionRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetVersionRequest.ChangeId">
            <summary>
            Identifies change from one workflow implementation version to another.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetVersionRequest.MinSupported">
            <summary>
            Specifies the minimum supported workflow implementation version.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowGetVersionRequest.MaxSupported">
            <summary>
            Specifies the maximum supported workflow implementation version.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetVersionRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowGetVersionRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowHasLastResultReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowHasLastResultRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowHasLastResultReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowHasLastResultReply.HasResult">
            <summary>
            Indicates whether the workflow has a last completion result.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowHasLastResultReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowHasLastResultReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowHasLastResultRequest">
            <summary>
            <b>client --> proxy:</b> Determines whether the last execution of the workflow has
             a completion result.  This can be used by CRON workflows to determine whether the
             last run returned a result.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowHasLastResultRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowHasLastResultRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowHasLastResultRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowHasLastResultRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowInvokeReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowInvokeRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowInvokeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.Result">
            <summary>
            The workflow execution result or <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNew">
            <summary>
            Indicates whether the workflow should be exited and then restarted,
            with an empty history.  This is useful for very long running looping
            workflows that would otherwise end up with very long task histories.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNewArgs">
            <summary>
            Specifies the arguments to use for the new workflow when 
            <see cref="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNew"/> is <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNewExecutionStartToCloseTimeout">
            <summary>
            Optionally overrides the current workflow's timeout for the restarted
            workflow when this value is greater than zero.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNewScheduleToCloseTimeout">
            <summary>
            Optionally overrides the current workflow's timeout for the restarted
            workflow when this value is greater than zero.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNewScheduleToStartTimeout">
            <summary>
            Optionally overrides the current workflow's timeout for the restarted
            workflow when this value is greater than zero.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNewStartToCloseTimeout">
            <summary>
            Optionally overrides the current workflow's timeout for the restarted
            workflow when this value is greater than zero.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNewTaskList">
            <summary>
            Optionally overrides the current workflow's task list for the restarted
            workflow when this value is not <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeReply.ContinueAsNewDomain">
            <summary>
            Optionally overrides the current workflow's domain for the restarted
            workflow when this value is not <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowInvokeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowInvokeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowInvokeRequest">
            <summary>
            <b>proxy --> client:</b> Invokes a workflow instance.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowInvokeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.Name">
            <summary>
            Identifies the workflow implementation to be started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.Args">
            <summary>
            The workflow arguments encoded into a byte array (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.Domain">
            <summary>
            The domain hosting the workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.WorkflowId">
            <summary>
            The original workflow ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.RunId">
            <summary>
            The workflow run ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.WorkflowType">
            <summary>
            The workflow type.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.TaskList">
            <summary>
            The task list where the workflow is executing.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.ExecutionStartToCloseTimeout">
            <summary>
            The maximum duration the workflow is allowed to run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowInvokeRequest.ReplayStatus">
            <summary>
            Indicates the current workflow replay state.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowInvokeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowInvokeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowMutableReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowMutableRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowMutableReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowMutableReply.Result">
            <summary>
            Holds the mutable result.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowMutableReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowMutableReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowMutableRequest">
            <summary>
            <b>proxy --> client:</b> Invokes a workflow instance.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowMutableRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowMutableRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowMutableRequest.MutableId">
            <summary>
            Identifies the mutable value.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowMutableRequest.Result">
            <summary>
            The mutable value to be returned.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowMutableRequest.Update">
            <summary>
            Indicates that the value should be persisted to the workflow
            history if it doesn't already exist or the value has changed.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowMutableRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowMutableRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowQueryInvokeReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowQueryInvokeRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryInvokeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryInvokeReply.Result">
            <summary>
            The query result bytes or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryInvokeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryInvokeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowQueryInvokeRequest">
            <summary>
            <b>proxy --> client:</b> Queries a running workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryInvokeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryInvokeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryInvokeRequest.QueryName">
            <summary>
            Identifies the query.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryInvokeRequest.QueryArgs">
            <summary>
            Optionally specifies the query arguments.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryInvokeRequest.ReplayStatus">
            <summary>
            Indicates the current workflow replay state.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryInvokeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryInvokeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowQueryReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowQueryRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryReply.Result">
            <summary>
            The query result bytes or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowQueryRequest">
            <summary>
            <b>proxy --> client:</b> Queries a running workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryRequest.WorkflowId">
            <summary>
            Identifies the workflow by ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryRequest.RunId">
            <summary>
            Identifies the specific workflow run to be queried.  The latest run
            will be queried when this is <c>null</c> or empty.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryRequest.QueryName">
            <summary>
            Identifies the query.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowQueryRequest.QueryArgs">
            <summary>
            Optionally specifies the query arguments.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowQueryRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowRegisterReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowRegisterRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRegisterReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRegisterReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRegisterReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowRegisterRequest">
            <summary>
            <b>client --> proxy:</b> Registers a workflow handler by name.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRegisterRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowRegisterRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowRegisterRequest.Name">
            <summary>
            Identifies the workflow implementation.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRegisterRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRegisterRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowReply">
            <summary>
            Base class for all workflow related replies.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowReply.ContextId">
            <summary>
            <para>
            Uniquely identifies the workflow context associated with this request.
            </para>
            <note>
            Not all derived classes actually require this property.  In those cases,
            this can remain as its default zero value.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowReply.ReplayStatus">
            <summary>
            For workflow requests related to an executing workflow, this will indicate
            the current history replay state.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowRequest">
            <summary>
            Base class for all workflow related requests.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowRequest.ContextId">
            <summary>
            <para>
            Uniquely identifies the workflow context associated with this request.
            </para>
            <note>
            Not all derived classes actually require this property.  In those cases,
            this can remain as its default zero value.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSetCacheSizeReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowSetCacheSizeRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetCacheSizeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetCacheSizeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetCacheSizeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSetCacheSizeRequest">
            <summary>
            <b>client --> proxy:</b> Sets the maximum number of bytes the client will use
            to cache the history of a sticky workflow on a workflow worker as a performance
            optimization.  When this is exceeded for a workflow, its full history will
            need to be retrieved from the Cadence cluster the next time the workflow
            instance is assigned to a worker. 
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetCacheSizeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSetCacheSizeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSetCacheSizeRequest.Size">
            <summary>
            Specifies the maximum number of bytes used for caching sticky workflows.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetCacheSizeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetCacheSizeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSetQueryHandlerReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowExecuteRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetQueryHandlerReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetQueryHandlerReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetQueryHandlerReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSetQueryHandlerRequest">
            <summary>
            <b>proxy --> client:</b> Sends a signal to a running workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetQueryHandlerRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSetQueryHandlerRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSetQueryHandlerRequest.QueryName">
            <summary>
            Identifies the workflow by ID.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetQueryHandlerRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSetQueryHandlerRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalChildReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowSignalChildRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalChildReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalChildReply.Result">
            <summary>
            Returns the result of signaling a child workflow
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalChildReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalChildReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalChildRequest">
            <summary>
            <b>proxy --> client:</b> Sends a signal to a child workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalChildRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalChildRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalChildRequest.ChildId">
            <summary>
            Identifies child workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalChildRequest.SignalName">
            <summary>
            Identifies the signal.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalChildRequest.SignalArgs">
            <summary>
            Optionally specifies the signal arguments.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalChildRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalChildRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalInvokeReply">
            <summary>
            <b>client --> proxy:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowSignalInvokeRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalInvokeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalInvokeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalInvokeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalInvokeRequest">
            <summary>
            <b>proxy --> client:</b> Sends a received signal to a running workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalInvokeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalInvokeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalInvokeRequest.SignalName">
            <summary>
            Identifies the signal.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalInvokeRequest.SignalArgs">
            <summary>
            Optionally specifies the signal arguments.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalInvokeRequest.ReplayStatus">
            <summary>
            Indicates the current workflow replay state.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalInvokeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalInvokeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowSignalRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalRequest">
            <summary>
            <b>proxy --> client:</b> Sends a signal to a running workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalRequest.WorkflowId">
            <summary>
            Identifies the workflow by ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalRequest.RunId">
            <summary>
            Identifies the specific workflow run to be cancelled.  The latest run
            will be cancelled when this is <c>null</c> or empty.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalRequest.SignalName">
            <summary>
            Identifies the signal.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalRequest.SignalArgs">
            <summary>
            Optionally specifies the signal arguments.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalSubscribeReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowSignalSubscribeRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalSubscribeReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalSubscribeReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalSubscribeReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalSubscribeRequest">
            <summary>
            <b>proxy --> client:</b> Subscribes a workflow to a named signal.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalSubscribeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalSubscribeRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalSubscribeRequest.SignalName">
            <summary>
            Identifies the signal being subscribed.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalSubscribeRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalSubscribeRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalWithStartReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowSignalWithStartRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalWithStartReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalWithStartReply.Execution">
            <summary>
            Returns details identifying the workflow execution.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalWithStartReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalWithStartReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSignalWithStartRequest">
            <summary>
            <b>proxy --> client:</b> Sends a signal to a workflow, starting the
            workflow if it doesn't exist.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.Workflow">
            <summary>
            Identifies the workflow to be executed if the workflow instance
            idntified by <see cref="P:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.WorkflowId"/> is nor currently running.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.WorkflowId">
            <summary>
            Identifies the workflow by ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.SignalName">
            <summary>
            Identifies the signal.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.SignalArgs">
            <summary>
            Optionally specifies the signal arguments.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.Options">
            <summary>
            Optionally specifies the workflow start options.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.WorkflowArgs">
            <summary>
            Optionally specifies the workflow arguments.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSignalWithStartRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSleepReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowSleepRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSleepReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSleepReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSleepReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowSleepRequest">
            <summary>
            <b>client --> proxy:</b> Commands the workflow to sleep for a period of time.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSleepRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSleepRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowSleepRequest.Duration">
            <summary>
            Specifies the time to sleep.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSleepRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowSleepRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowTerminateReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowTerminateRequest"/>
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowTerminateReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowTerminateReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowTerminateReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowTerminateRequest">
            <summary>
            <b>proxy --> client:</b> Terminates a workflow execution.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowTerminateRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowTerminateRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowTerminateRequest.WorkflowId">
            <summary>
            Identifies the workflow by ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowTerminateRequest.RunId">
            <summary>
            Identifies the specific workflow run to be cancelled.  The latest run
            will be cancelled when this is <c>null</c> or empty.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowTerminateRequest.Reason">
            <summary>
            Optionally indicates the termination reason.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowTerminateRequest.Details">
            <summary>
            Optionally includes additional termination details encoded as a byte array.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowTerminateRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowTerminateRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowWaitForChildReply">
            <summary>
            <b>proxy --> client:</b> Answers a <see cref="T:Neon.Cadence.Internal.WorkflowWaitForChildRequest"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowWaitForChildReply.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowWaitForChildReply.Result">
            <summary>
            The child workflow results encoded as bytes.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowWaitForChildReply.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowWaitForChildReply.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.WorkflowWaitForChildRequest">
            <summary>
            <b>client --> proxy:</b> Waits for a child workflow to complete.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowWaitForChildRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowWaitForChildRequest.ReplyType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Internal.WorkflowWaitForChildRequest.ChildId">
            <summary>
            Identifies the child workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowWaitForChildRequest.Clone">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.Internal.WorkflowWaitForChildRequest.CopyTo(Neon.Cadence.Internal.ProxyMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.Internal.LocalActivityOptions">
            <summary>
            Specifies options used when running a local workflow activity.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.LocalActivityOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.LocalActivityOptions.ScheduleToCloseTimeoutSeconds">
            <summary>
            Specifies the maximum time the activity can run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Internal.LocalActivityOptions.RetryPolicy">
            <summary>
            The activity retry policy.
            </summary>
        </member>
        <member name="M:Neon.Cadence.Internal.LocalActivityOptions.ToInternal">
            <summary>
            Converts this instance into the corresponding internal object.
            </summary>
            <returns>The equivalent <see cref="T:Neon.Cadence.Internal.InternalLocalActivityOptions"/>.</returns>
        </member>
        <member name="T:Neon.Cadence.ActivityStatus">
            <summary>
            Enumerates the state of an activity.
            </summary>
        </member>
        <member name="F:Neon.Cadence.ActivityStatus.Scheduled">
            <summary>
            The activity is waiting to be started.
            </summary>
        </member>
        <member name="F:Neon.Cadence.ActivityStatus.Started">
            <summary>
            The activity is running.
            </summary>
        </member>
        <member name="F:Neon.Cadence.ActivityStatus.CancelRequested">
            <summary>
            The activity has a cancellation request pending.
            </summary>
        </member>
        <member name="T:Neon.Cadence.AutoRegisterAttribute">
            <summary>
            Use this to tag workflow and activity implementations that inherit from
            <see cref="T:Neon.Cadence.WorkflowBase"/> and <see cref="T:Neon.Cadence.ActivityBase"/> such that calls
            to <see cref="M:Neon.Cadence.CadenceClient.RegisterAssemblyWorkflowsAsync(System.Reflection.Assembly)"/> and
            <see cref="M:Neon.Cadence.CadenceClient.RegisterAssemblyActivitiesAsync(System.Reflection.Assembly)"/> can 
            automatically register the tagged classes.
            </summary>
        </member>
        <member name="M:Neon.Cadence.AutoRegisterAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="typeName">
            Optionally specifies the workflow or activity type name to override the
            tagged class' fully qualified type name as the workflow or activity type
            name used to register the type with Cadence.
            </param>
        </member>
        <member name="P:Neon.Cadence.AutoRegisterAttribute.TypeName">
            <summary>
            Returns the type name.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient">
            <summary>
            Implements a client that can be used to create and manage workflows.
            </summary>
            <remarks>
            <para>
            To get started with Cadence, you'll need to deploy a Cadence cluster with
            one or more nodes and the establish a connection to the cluster from your
            workflow/activity implementations and management tools.  This is pretty
            easy to do.
            </para>
            <para>
            First, you'll need to know the URI of at least one of the Cadence cluster
            nodes.  Cadence listens on port <b>79133</b> by default so you cluster URIs
            will typically look like: <b>http://CADENCE-NODE:7933</b>.
            </para>
            <note>
            For production clusters with multiple Cadence nodes, you should specify
            multiple URIs when connecting just in case the one of the nodes may be
            offline for some reason.
            </note>
            <para>
            To establish a connection, you'll construct a <see cref="T:Neon.Cadence.CadenceSettings"/>
            and add your node URIs to the <see cref="P:Neon.Cadence.CadenceSettings.Servers"/> list
            and then call the static <see cref="M:Neon.Cadence.CadenceClient.ConnectAsync(Neon.Cadence.CadenceSettings)"/>
            method to obtain a connected <see cref="T:Neon.Cadence.CadenceClient"/>.  You'll use this
            for registering workflows and activities types as well as the workers that
            indicate that workflows and activities can be executed in the current process.
            </para>
            <para>
            You'll implement your workflows and activities by implementing classes that
            derive from <see cref="T:Neon.Cadence.WorkflowBase"/> and <see cref="T:Neon.Cadence.ActivityBase"/> and then
            registering these types with Cadence.  Then you'll start workflow or activity
            workers so that Cadence will begin scheduling operations for execution by your code.
            Workflows and activities are registered using the fully qualified names 
            of the derived <see cref="T:Neon.Cadence.WorkflowBase"/> and <see cref="T:Neon.Cadence.ActivityBase"/> types
            by defaut, but you can customize this if desired.
            </para>
            <para>
            Cadence supports the concept of domains and task lists.  Domains and task lists are
            used to organize workflows and activities.  Workflows and activities essentially 
            reside in a registered domain, which is essentially just a namespace specified by
            a string.  The combination of a domain along with a workflow or activity type name
            must be unique within a Cadence cluster.  Once you have a connected <see cref="T:Neon.Cadence.CadenceClient"/>,
            you can create and manage Cadence domains via methods like <see cref="M:Neon.Cadence.CadenceClient.RegisterDomainAsync(System.String,System.String,System.String,System.Int32,System.Boolean)"/>,
            <see cref="M:Neon.Cadence.CadenceClient.DescribeDomainAsync(System.String)"/>, and <see cref="M:Neon.Cadence.CadenceClient.UpdateDomainAsync(System.String,Neon.Cadence.DomainUpdateArgs)"/>.
            Domains can be used provide isolated areas for different teams and/or different environments
            (e.g. production, staging, and test).  We discuss task lists in detail further below.
            </para>
            <para>
            Cadence workers are started to indicate that the current process can execute workflows
            and activities from a Cadence domain, and optionally a task list (discussed further below).
            You'll call <see cref="!:StartWorkflowWorkerAsync(string, string, WorkerOptions)"/> to start
            a workflow worker and  <see cref="!:StartActivityWorkerAsync(string, string, WorkerOptions)"/>
            for an activity worker.  These calls indicate to Cadence that it can begin scheduling
            workflow and activity executions from the current client.
            </para>
            <para>
            Worflows are implemented by deriving a class from <see cref="T:Neon.Cadence.WorkflowBase"/> and activities
            are implemented by deriving a class from <see cref="T:Neon.Cadence.ActivityBase"/>.  These classes
            require the implementation of the <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> and
            <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/> methods that actually implement the workflow
            and activity logic.  After establishing a connection ot a Cadence cluster, you'll need
            to call <see cref="M:Neon.Cadence.CadenceClient.RegisterWorkflowAsync``1(System.String)"/> and/or
            <see cref="M:Neon.Cadence.CadenceClient.RegisterActivityAsync``1(System.String)"/> to register your
            workflow and activity implementations with Cadence.  These calls combined with the
            workers described above determine which workflows and activities may be scheduled
            on the current client/process.
            </para>
            <para>
            For situations where you have a lot of workflow and activity classes, it can become
            combersome to register each implementation class individually (generally because you
            forget to register new classes after they've been implemented).  To assist with this,
            you can also tag your workflow and activity classes with <see cref="T:Neon.Cadence.AutoRegisterAttribute"/>
            and then call <see cref="M:Neon.Cadence.CadenceClient.RegisterAssemblyWorkflowsAsync(System.Reflection.Assembly)"/> and/or
            <see cref="M:Neon.Cadence.CadenceClient.RegisterAssemblyActivitiesAsync(System.Reflection.Assembly)"/> to scan an assembly and
            automatically register the tagged implementation classes it finds.
            </para>
            <para>
            Next you'll need to start workflow and/or activity workers.  These indicate to Cadence that 
            the current process implements specific workflow and activity types.  You'll call
            <see cref="!:StartWorkflowWorkerAsync(string, string, WorkerOptions)"/> for
            workflows and <see cref="!:StartActivityWorkerAsync(string, string, WorkerOptions)"/>
            for activities, passing your custom implementations of <see cref="T:Neon.Cadence.WorkflowBase"/> and <see cref="T:Neon.Cadence.ActivityBase"/>
            as the type parameter.  The <b>Neon.Cadence</b> will then automatically handle the instantiation
            of your workflow or activity types and call their <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/>
            </para>
            <para>
            External or top-level workflows are started by calling <see cref="M:Neon.Cadence.CadenceClient.StartWorkflowAsync(System.String,System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)"/> 
            or <see cref="M:Neon.Cadence.CadenceClient.StartWorkflowAsync``1(System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)"/>, passing the workflow 
            type string, the target Cadence domain along with optional arguments (encoded into a byte array) 
            and optional workflow options.  The workflow type string must be the same one used when calling 
            <see cref="!:StartWorkflowWorkerAsync(string, string, WorkerOptions)"/>.
            </para>
            <note>
            <b>External workflows</b> are top-level workflows that have no workflow parent.
            This is distinugished from <b>child workflows</b> that are executed within the
            context of another workflow via <see cref="M:Neon.Cadence.WorkflowBase.CallChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>.
            </note>
            <para>
            <see cref="M:Neon.Cadence.CadenceClient.StartWorkflowAsync(System.String,System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)"/> returns
            immediately after the workflow is submitted to Cadence and the workflow will be scheduled and
            executed independently.  This method returns a <see cref="T:Neon.Cadence.WorkflowRun"/> which you'll use
            to identify your running workflow to the methods desribed below.
            </para>
            <para>
            You can monitor the status of an external workflow by polling <see cref="M:Neon.Cadence.CadenceClient.GetWorkflowStateAsync(Neon.Cadence.WorkflowRun)"/>
            or obtain a workflow result via <see cref="M:Neon.Cadence.CadenceClient.GetWorkflowResultAsync(Neon.Cadence.WorkflowRun)"/>, which blocks until the 
            workflow completes.
            </para>
            <note>
            Child workflows and activities are started from within a <see cref="T:Neon.Cadence.WorkflowBase"/> implementation
            via the <see cref="M:Neon.Cadence.WorkflowBase.CallChildWorkflowAsync``1(System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>,
            <see cref="M:Neon.Cadence.WorkflowBase.CallChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>,
            <see cref="M:Neon.Cadence.WorkflowBase.CallActivityAsync``1(System.Byte[],Neon.Cadence.Internal.ActivityOptions,System.Threading.CancellationToken)"/>
            <see cref="M:Neon.Cadence.WorkflowBase.CallActivityAsync(System.String,System.Byte[],Neon.Cadence.Internal.ActivityOptions,System.Threading.CancellationToken)"/>, and
            <see cref="M:Neon.Cadence.WorkflowBase.CallLocalActivityAsync``1(System.Byte[],Neon.Cadence.Internal.LocalActivityOptions,System.Threading.CancellationToken)"/>
            methods.
            </note>
            <para>
            Workflows can be signalled via <see cref="M:Neon.Cadence.CadenceClient.SignalWorkflowAsync(System.String,System.String,System.Byte[],System.String)"/> or
            <see cref="M:Neon.Cadence.CadenceClient.SignalWorkflowWithStartAsync(System.String,System.String,System.Byte[],System.Byte[],System.String,Neon.Cadence.WorkflowOptions)"/> that starts the
            workflow if its not already running.  You can query running workflows via 
            <see cref="M:Neon.Cadence.CadenceClient.QueryWorkflowAsync(System.String,System.String,System.Byte[],System.String)"/>.
            </para>
            <para>
            Workflows can be expicitly closed using <see cref="M:Neon.Cadence.CadenceClient.CancelWorkflowAsync(Neon.Cadence.WorkflowRun)"/>,
            <see cref="M:Neon.Cadence.CadenceClient.TerminateWorkflowAsync(Neon.Cadence.WorkflowRun,System.String,System.Byte[])"/>.
            </para>
            <para><b>Restarting Workflows</b></para>
            <para>
            Long running workflows that are essentially a high-level loop can result in the recording
            of an excessive number of events to its history.  This can result in poor performance
            due to having to replay this history when the workflow has to be rehydrated.  
            </para>
            <para>
            You can avoid this by removing the workflow loop and calling <see cref="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)"/>
            at the end of your workflow logic.  This causes Cadence to reschedule the workflow
            with a clean history, somewhat similar to what happens for CRON workflows (which are
            rescheduled automatically).  <see cref="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)"/>
            works by throwing a <see cref="T:Neon.Cadence.CadenceWorkflowRestartException"/> which will exit
            the workflow method and be caught by the calling <see cref="T:Neon.Cadence.CadenceClient"/> which
            which then informs Cadence.
            </para>
            <note>
            Workflow entry points must allow the <see cref="T:Neon.Cadence.CadenceWorkflowRestartException"/> to be caught by the
            calling <see cref="T:Neon.Cadence.CadenceClient"/> so that <see cref="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)"/>
            will work properly.
            </note>
            <para><b>External Activity Completion</b></para>
            <para>
            Normally, activities are self-contained and will finish whatever they're doing and then
            simply return.  It's often useful though to be able to have an activity kickoff operations
            on an external system, exit the activity indicating that it's still pending, and then
            have the external system manage the activity heartbeats and report the activity completion.
            </para>
            <para>
            To take advantage of this, you'll need to obtain the opaque activity identifier from
            <see cref="P:Neon.Cadence.ActivityBase.Info"/> via its <see cref="P:Neon.Cadence.ActivityInfo.TaskToken"/> property.
            This is a byte array including enough information for Cadence to identify the specific
            activity.  Your activity should start the external action, passing the task token and
            then call <see cref="M:Neon.Cadence.ActivityBase.CompleteExternallyAsync"/> which will thrown a
            <see cref="T:Neon.Cadence.CadenceActivityExternalCompletionException"/> that will exit the activity 
            and then be handled internally by informing Cadence that the activity will continue
            running.
            </para>
            <note>
            You should not depend on the structure or contents of the task token since this
            may change for future Cadence releases and you must allow the <see cref="T:Neon.Cadence.CadenceActivityExternalCompletionException"/>
            to be caught by the calling <see cref="T:Neon.Cadence.CadenceClient"/> so <see cref="M:Neon.Cadence.ActivityBase.CompleteExternallyAsync"/>
            will work properly.
            </note>
            <para><b>Arguments and Results</b></para>
            <para>
            The <b>Neon.Cadence</b> library standardizes on having workflow and activity arguments
            and results represented as byte arrays or <c>null</c>.  This is a bit of a simplication
            over the Cadence GOLANG client package, which can accept zero or more typed parameters.
            <b>Neon.Cadence</b> applications will need to encode any arguments or results into byte 
            arrays.  You can use any method to accompilish this, including serializing to JSON via
            the <b>Newtonsoft.Json</b> nuget package.
            </para>
            <para><b>Task Lists</b></para>
            <para>
            Task lists provide an additional way to customize where workflows and activities are executed.
            A task list is simply a string used in addition to the domain to indicate which workflows and
            activities will be scheduled for execution by workers.  For regular (top-level) workflows,
            the task list <b>"default"</b> will be used when not otherwise specified.  Any non-empty custom
            string is allowed for task lists.  Child workflow and activity task lists will default to
            the parent workflow's task list by default.
            </para>
            <para>
            Task lists are typically only required for somewhat advanced deployments.  Let's go through
            an example to see how this works.  Imagine that you're a movie studio that needs to render
            an animated movie with Cadence.  You've implemented a workflow that breaks the movie up into
            5 minute segments and then schedules an activity to render each segment.  Now assume that 
            we have two kinds of servers, one just a basic general purpose server and the other that
            includes high-end GPUs that are required for rendering.  In the simple case, you'd like
            the workflows to run on the regular server and the activites to run on the GPU machines
            (because there's no point in wasting any expensive GPU machine resources on the workflow).
            </para>
            <para>
            This scenario can addressed by having the applications running on the regular machines
            call <see cref="!:StartWorkflowWorkerAsync(string, string, WorkerOptions)"/> and those
            running on the GPU servers call <see cref="!:StartWorkflowWorkerAsync(string, string, WorkerOptions)"/>.
            Both could specify the domain as <b>"render"</b> and leave task list as <b>"default"</b>.
            With this setup, workflows will be scheduled on the regular machines and activities
            on the GPU machines, accomplishing our simple goal.
            </para>
            <para>
            Now imagine a more complex scenario where we need to render two movies on the cluster at 
            the same time and we'd like to dedicate two thirds of our GPU machines to <b>movie1</b> and
            the other third to <b>movie2</b>.  This can be accomplished via task lists:
            </para>
            <para>
            We'd start by defining a task list for each movie: <b>"movie1"</b> and <b>movie2</b> and
            then call <see cref="!:StartWorkflowWorkerAsync(string, string, WorkerOptions)"/> twice on
            the regular machines, once for each task list.  This will schedule workflows for each movie
            on these machines (this is OK for this scenario because the workflow won't consume many
            resources).  Then on 2/3s of the GPU machines, we'll call <see cref="!:StartActivityWorkerAsync(string, string, WorkerOptions)"/>
            with the <b>"movie1"</b> task list and the remaining one third of the GPU machines with
            <b>""movie2</b> as the task list.  Then we'll start the rendering workflow for the first
            movie specifying <b>"movie1"</b> as the task list and again for the second movie specifying 
            <b>"movie2"</b>.
            </para>
            <para>
            The two movie workflows will be scheduled on the regular machines and these will each
            start the rendering activities using the <b>"movie1"</b> task list for the first movie
            and <b>"movie2"</b> for the second one and Cadence will then schedule these activities
            on the appropriate GPU servers.
            </para>
            <para>
            This was just one example.  Domains and task lists can be combined in different ways
            to manage where workflows and activities execute.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.RegisterActivityAsync``1(System.String)">
            <summary>
            Registers an activity implementation with Cadence.
            </summary>
            <typeparam name="TActivity">The <see cref="T:Neon.Cadence.ActivityBase"/> derived type implementing the activity.</typeparam>
            <param name="activityTypeName">
            Optionally specifies a custom activity type name that will be used 
            for identifying the activity implementation in Cadence.  This defaults
            to the fully qualified <typeparamref name="TActivity"/> type name.
            </param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if a different activity class has already been registered for <paramref name="activityTypeName"/>.</exception>
            <exception cref="T:Neon.Cadence.CadenceActivityWorkerStartedException">
            Thrown if an activity worker has already been started for the client.  You must
            register activity implementations before starting workers.
            </exception>
            <remarks>
            <note>
            Be sure to register all of your activity implementations before starting a workflow worker.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.RegisterAssemblyActivitiesAsync(System.Reflection.Assembly)">
            <summary>
            Scans the assembly passed looking for activity implementations derived from
            <see cref="T:Neon.Cadence.ActivityBase"/> and tagged with <see cref="T:Neon.Cadence.AutoRegisterAttribute"/>
            and registers them with Cadence.
            </summary>
            <param name="assembly">The target assembly.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.TypeLoadException">
            Thrown for types tagged by <see cref="T:Neon.Cadence.AutoRegisterAttribute"/> that are not 
            derived from <see cref="T:Neon.Cadence.WorkflowBase"/> or <see cref="T:Neon.Cadence.ActivityBase"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if one of the tagged classes conflict with an existing registration.</exception>
            <exception cref="T:Neon.Cadence.CadenceActivityWorkerStartedException">
            Thrown if an activity worker has already been started for the client.  You must
            register activity implementations before starting workers.
            </exception>
            <remarks>
            <note>
            Be sure to register all of your activity implementations before starting a workflow worker.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.SendActivityHeartbeatAsync(System.Byte[],System.Byte[])">
            <summary>
            Used to send an activity heartbeat externally.
            </summary>
            <param name="taskToken">The opaque activity task token.</param>
            <param name="details">Optional heartbeart details.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CompleteActivityAsync(System.Byte[],System.Byte[],System.Exception)">
            <summary>
            Used to complete an activity externally.
            </summary>
            <param name="taskToken">The opaque activity task token.</param>
            <param name="result">Passed as the activity result for activity success.</param>
            <param name="e">Passed as an exception when the activity failed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the activity no longer exists.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.PingAsync">
            <summary>
            Pings the <b>cadence-proxy</b> and waits for the reply.  This is used 
            mainly for low-level performance and load testing but can also be used
            to explicitly verify that the <b>cadence-proxy</b> is still alive.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.StartWorkerAsync(System.String,System.String,Neon.Cadence.WorkerOptions)">
            <summary>
            Signals Cadence that the application is capable of executing activities for a specific
            domain and task list.
            </summary>
            <param name="domain">Optionally specifies the target Cadence domain.  This defaults to the domain configured for the client.</param>
            <param name="taskList">Optionally specifies the target task list (defaults to <b>"default"</b>).</param>
            <param name="options">Optionally specifies additional worker options.</param>
            <returns>A <see cref="T:Neon.Cadence.Worker"/> identifying the worker instance.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown when an attempt is made to recreate a worker with the
            same properties on a given client.  See the note in the remarks.
            </exception>
            <remarks>
            <para>
            Your workflow application will need to call this method so that Cadence will know
            that it can schedule activities to run within the current process.  You'll need
            to specify the target Cadence domain and task list.
            </para>
            <para>
            You may also specify an optional <see cref="T:Neon.Cadence.WorkerOptions"/> parameter as well
            as customize the name used to register the activity, which defaults to the
            fully qualified name of the activity type.
            </para>
            <para>
            This method returns a <see cref="T:Neon.Cadence.Worker"/> which implements <see cref="T:System.IDisposable"/>.
            It's a best practice to call <see cref="M:Neon.Cadence.CadenceClient.Dispose"/> just before the a worker process
            terminates, but this is optional.  Advanced worker implementation that need to change
            their configuration over time can also call <see cref="M:Neon.Cadence.CadenceClient.Dispose"/> to stop workers
            for specific domains and task lists.
            </para>
            <note>
            The Cadence GOLANG client does not appear to support starting a worker with a given
            set of parameters, stopping that workflow, and then restarting another worker
            with the same parameters on the same client.  This method detects this situation
            and throws an <see cref="T:System.InvalidOperationException"/> when these restart attempts
            are made.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.StopWorkerAsync(Neon.Cadence.Worker)">
            <summary>
            Signals Cadence that it should stop invoking activities and workflows 
            for the specified <see cref="T:Neon.Cadence.Worker"/> (returned by a previous call to
            <see cref="!:StartWorkflowWorkerAsync(string, string, WorkerOptions)"/>)
            or <see cref="!:StartActivityWorkerAsync(string, string, WorkerOptions)"/>.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            This method does nothing if the worker is already stopped.
            </remarks>
        </member>
        <member name="F:Neon.Cadence.CadenceClient.debugProxyPort">
            <summary>
            The <b>cadence-proxy</b> listening port to use when <see cref="P:Neon.Cadence.CadenceSettings.DebugPrelaunched"/>
            mode is enabled.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceClient.debugClientPort">
            <summary>
            The <b>cadence-client</b> listening port to use when <see cref="P:Neon.Cadence.CadenceSettings.DebugPrelaunched"/>
            mode is enabled.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceClient.DefaultTaskList">
            <summary>
            The default Cadence task list.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceClient.DefaultTimeout">
            <summary>
            The default Cadence timeout used for workflow and activity timeouts that don't
            have Cadence supplied values.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.Startup">
            <summary>
            Configures the <b>cadence-client</b> connection's web server used to 
            receive messages from the <b>cadence-proxy</b>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.EmulatedStartup">
            <summary>
            Configures an emulation of a <b>cadence-proxy</b> for unit testing.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.Operation">
            <summary>
            Used for tracking pending <b>cadence-proxy</b> operations.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.Operation.#ctor(System.Int64,Neon.Cadence.Internal.ProxyRequest,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="requestId">The unique request ID.</param>
            <param name="request">The request message.</param>
            <param name="timeout">
            Optionally specifies the timeout.  This defaults to the end of time.
            </param>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.Operation.RequestId">
            <summary>
            The operation (aka the request) ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.Operation.Request">
            <summary>
            Returns the request message.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.Operation.StartTimeUtc">
            <summary>
            The time (UTC) the operation started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.Operation.Timeout">
            <summary>
            The operation timeout. 
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.Operation.CompletionSource">
            <summary>
            Returns the <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> that we'll use
            to signal completion when <see cref="M:Neon.Cadence.CadenceClient.Operation.SetReply(Neon.Cadence.Internal.ProxyReply)"/> is called
            with the reply message for this operation, <see cref="M:Neon.Cadence.CadenceClient.Operation.SetCanceled"/> when
            the operation has been canceled, or <see cref="M:Neon.Cadence.CadenceClient.Operation.SetException(System.Exception)"/>
            is called signalling an error.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.Operation.SetReply(Neon.Cadence.Internal.ProxyReply)">
            <summary>
            Signals the awaiting <see cref="T:System.Threading.Tasks.Task"/> that a reply message 
            has been received.
            </summary>
            <param name="reply">The reply message.</param>
            <remarks>
            <note>
            Only the first call to <see cref="M:Neon.Cadence.CadenceClient.Operation.SetReply(Neon.Cadence.Internal.ProxyReply)"/>
            <see cref="M:Neon.Cadence.CadenceClient.Operation.SetException(System.Exception)"/>, or <see cref="M:Neon.Cadence.CadenceClient.Operation.SetCanceled"/>
            will actually wake the awaiting task.  Any subsequent calls will do nothing.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.Operation.SetCanceled">
            <summary>
            Signals the awaiting <see cref="T:System.Threading.Tasks.Task"/> that the operation has
            been canceled.
            </summary>
            <remarks>
            <note>
            Only the first call to <see cref="M:Neon.Cadence.CadenceClient.Operation.SetReply(Neon.Cadence.Internal.ProxyReply)"/>
            <see cref="M:Neon.Cadence.CadenceClient.Operation.SetException(System.Exception)"/>, or <see cref="M:Neon.Cadence.CadenceClient.Operation.SetCanceled"/>
            will actually wake the awaiting task.  Any subsequent calls will do nothing.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.Operation.SetException(System.Exception)">
            <summary>
            Signals the awaiting <see cref="T:System.Threading.Tasks.Task"/> that it should fail
            with an exception.
            </summary>
            <param name="e">The exception.</param>
            <remarks>
            <note>
            Only the first call to <see cref="M:Neon.Cadence.CadenceClient.Operation.SetReply(Neon.Cadence.Internal.ProxyReply)"/>
            <see cref="M:Neon.Cadence.CadenceClient.Operation.SetException(System.Exception)"/>, or <see cref="M:Neon.Cadence.CadenceClient.Operation.SetCanceled"/>
            will actually wake the awaiting task.  Any subsequent calls will do nothing.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.StartProxy(System.Net.IPEndPoint,Neon.Cadence.CadenceSettings)">
            <summary>
            Writes the correct <b>cadence-proxy</b> binary for the current environment
            to the file system (if that hasn't been done already) and then launches 
            a proxy instance configured to listen at the specified endpoint.
            </summary>
            <param name="endpoint">The network endpoint where the proxy will listen.</param>
            <param name="settings">The cadence connection settings.</param>
            <returns>The proxy <see cref="T:System.Diagnostics.Process"/>.</returns>
            <remarks>
            By default, this class will write the binary to the same directory where
            this assembly resides.  This should work for most circumstances.  On the
            odd change that the current application doesn't have write access to this
            directory, you may specify an alternative via <paramref name="settings"/>.
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.ConnectAsync(Neon.Cadence.CadenceSettings)">
            <summary>
            Establishes a connection to a Cadence cluster.
            </summary>
            <param name="settings">The <see cref="T:Neon.Cadence.CadenceSettings"/>.</param>
            <returns>The connected <see cref="T:Neon.Cadence.CadenceClient"/>.</returns>
            <remarks>
            <note>
            The <see cref="T:Neon.Cadence.CadenceSettings"/> passed must specify a <see cref="P:Neon.Cadence.CadenceSettings.DefaultDomain"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.#ctor(Neon.Cadence.CadenceSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">The <see cref="T:Neon.Cadence.CadenceSettings"/>.</param>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.Dispose(System.Boolean)">
            <summary>
            Releases all associated resources.
            </summary>
            <param name="disposing">Pass <c>true</c> if we're disposing, <c>false</c> if we're finalizing.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.ClientId">
            <summary>
            Returns the locally unique ID for the client instance.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.Settings">
            <summary>
            Returns the settings used to create the client.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.ListenUri">
            <summary>
            Returns the URI the client is listening on for requests from the <b>cadence-proxy</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.ProxyUri">
            <summary>
            Returns the URI the associated <b>cadence-proxy</b> instance is listening on.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.ProxyProcess">
            <summary>
            Returns the <b>cadence-proxy</b> process or <c>null</c>.s
            </summary>
        </member>
        <member name="E:Neon.Cadence.CadenceClient.ConnectionClosed">
            <summary>
            Raised when the connection is closed.  You can determine whether the connection
            was closed normally or due to an error by examining the <see cref="T:Neon.Cadence.CadenceClientClosedArgs"/>
            arguments passed to the handler.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.RaiseConnectionClosed(System.Exception)">
            <summary>
            Raises the <see cref="E:Neon.Cadence.CadenceClient.ConnectionClosed"/> event if it hasn't already
            been raised.
            </summary>
            <param name="exception">Optional exception to be included in the event.</param>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.GetActivityType(System.String)">
            <summary>
            Returns the .NET type implementing the named Cadence activity.
            </summary>
            <param name="activityType">The Cadence activity type string.</param>
            <returns>The workflow .NET type or <c>null</c> if the type was not found.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnHttpRequestAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Called when an HTTP request is received by the integrated web server 
            (presumably sent by the associated <b>cadence-proxy</b> process).
            </summary>
            <param name="context">The request context.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnRootRequestAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Handles requests to the root <b>"/"</b> endpoint path.
            </summary>
            <param name="context">The request context.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CallProxyAsync(Neon.Cadence.Internal.ProxyRequest,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously calls the <b>cadence-proxy</b> by sending a request message
            and then waits for a reply.
            </summary>
            <param name="request">The request message.</param>
            <param name="timeout">
            Optionally specifies the maximum time to wait for the operation to complete.
            This defaults to unlimited.
            </param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The reply message.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.ProxyReplyAsync(Neon.Cadence.Internal.ProxyRequest,Neon.Cadence.Internal.ProxyReply)">
            <summary>
            <para>
            Asynchronously replies to a request from the <b>cadence-proxy</b>.
            </para>
            <note>
            The reply message's <see cref="P:Neon.Cadence.Internal.ProxyReply.RequestId"/> will be automatically
            set to the <paramref name="request"/> message's request ID by this method.
            </note>
            </summary>
            <param name="request">The received request message.</param>
            <param name="reply">The reply message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.HeartbeatThread">
            <summary>
            Implements the connection's background thread which is responsible
            for checking <b>cadence-proxy</b> health via heartbeat requests.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.TimeoutThread">
            <summary>
            Implements the connection's background thread which is responsible
            for handling <b>cadence-proxy</b> request timeouts.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.RegisterDomainAsync(Neon.Cadence.Internal.InternalRegisterDomainRequest)">
            <summary>
            Registers a Cadence domain using the <see cref="T:Neon.Cadence.Internal.InternalRegisterDomainRequest"/> information passed.
            </summary>
            <param name="request">The domain properties.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceDomainAlreadyExistsException">Thrown if the domain already exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.RegisterDomainAsync(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Registers a Cadence domain using the specified parameters.
            </summary>
            <param name="name">The domain name.</param>
            <param name="description">Optionally specifies a description.</param>
            <param name="ownerEmail">Optionally specifies the owner's email address.</param>
            <param name="retentionDays">
            Optionally specifies the number of days to retain the history for workflows 
            completed in this domain.  This defaults to <b>7 days</b>.
            </param>
            <param name="ignoreDuplicates">
            Optionally ignore duplicate domain registrations.  This defaults
            to <c>false</c>.
            </param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceDomainAlreadyExistsException">Thrown if the domain already exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.DescribeDomainAsync(System.String)">
            <summary>
            Describes the named Cadence domain.
            </summary>
            <param name="name">The domain name.</param>
            <returns>Tyhe domain description.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.UpdateDomainAsync(System.String,Neon.Cadence.DomainUpdateArgs)">
            <summary>
            Updates the named Cadence domain.
            </summary>
            <param name="name">Identifies the target domain.</param>
            <param name="request">The updated domain information.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.EmulatedCadenceDomain">
            <summary>
            Used to track emulated Cadence domains.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.EmulatedQuery">
            <summary>
            Used to track emulated qworkflow queries.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.EmulatedSignal">
            <summary>
            Used to track emulated workflow signals.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.EmulatedWorkflow">
            <summary>
            Used to track an emulated workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.Id">
            <summary>
            The workflow ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.RunId">
            <summary>
            The workflow RunID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.ContextId">
            <summary>
            The workflow context ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.Domain">
            <summary>
            Identifies the Cadence domain hosting the workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.TaskList">
            <summary>
            Identifies the task list hosting the workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.Name">
            <summary>
            Identifies the workflow implementation to be started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.Args">
            <summary>
            The workflow arguments encoded a a byte array (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.Options">
            <summary>
            The workflow start options.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.IsGlobal">
            <summary>
            Identifies global vs. child workflows.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.IsComplete">
            <summary>
            Indicates when the workflow as completed execution.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.IsCanceled">
            <summary>
            Indicates that the workflow has been canceled.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.Result">
            <summary>
            The workflow result or <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.Error">
            <summary>
            The workflow error or <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.Worker">
            <summary>
            Set when the workflow is executing on a worker.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.CompletedEvent">
            <summary>
            Raised when the workflow has completed.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.ChildWorkflows">
            <summary>
            The list of executing child workflows.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.ChildActivities">
            <summary>
            The list of executing child activities.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.PendingQueries">
            <summary>
            Pending queries targeting the workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorkflow.PendingSignals">
            <summary>
            Pending signals targeting the workflow.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.EmulatedActivity">
            <summary>
            Used to track an emulated workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedActivity.Id">
            <summary>
            The activity ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedActivity.ContextId">
            <summary>
            The activity context ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedActivity.Worker">
            <summary>
            Set when the activity is executing on a worker.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceClient.EmulatedWorker">
            <summary>
            Used to track emulated Cadence worker (registrations).
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorker.WorkerId">
            <summary>
            The worker ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorker.Domain">
            <summary>
            The worker domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorker.TaskList">
            <summary>
            The worker task list.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorker.Options">
            <summary>
            Returns the worker options.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorker.Workflows">
            <summary>
            The workflows currently executing on the worker.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedWorker.Activities">
            <summary>
            The activities currently executing on the worker.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedHealth">
            <summary>
            <b>INTERNAL USE ONLY:</b> Set this to <c>false</c> to emulate an unhealthy
            <b>cadence-proxy</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClient.EmulatedLibraryClient">
            <summary>
            <b>INTERNAL USE ONLY:</b> Configured as the HTTP client the emulated 
            [cadence-proxy] implementation uses to communicate with the [cadence-client]
            after the first <see cref="T:Neon.Cadence.Internal.InitializeRequest"/> has been received.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedHttpRequestAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Called when an HTTP request is received by the integrated web server 
            (presumably from the the associated <b>cadence-proxy</b> process).
            </summary>
            <param name="context">The request context.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEchoRequestAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Handles requests to the test <b>"/echo"</b> endpoint path.
            </summary>
            <param name="context">The request context.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedRootRequestAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Handles requests to the emulated <b>cadence-proxy</b> root <b>"/"</b> endpoint path.
            </summary>
            <param name="context">The request context.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CallClientAsync(Neon.Cadence.Internal.ProxyRequest)">
            <summary>
            Asynchronously emulates a call to the <b>cadence-client</b> by sending a request message
            and then waits for a reply.
            </summary>
            <param name="request">The request message.</param>
            <returns>The reply message.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedInitializeRequestAsync(Neon.Cadence.Internal.InitializeRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.InitializeRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedConnectRequestAsync(Neon.Cadence.Internal.ConnectRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.ConnectRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedHeartbeatRequestAsync(Neon.Cadence.Internal.HeartbeatRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.HeartbeatRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedCancelRequestAsync(Neon.Cadence.Internal.CancelRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.CancelRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedTerminateRequestAsync(Neon.Cadence.Internal.TerminateRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.TerminateRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedNewWorkerRequestAsync(Neon.Cadence.Internal.NewWorkerRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.NewWorkerRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedDomainDescribeRequestAsync(Neon.Cadence.Internal.DomainDescribeRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.DomainDescribeRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedDomainRegisterRequestAsync(Neon.Cadence.Internal.DomainRegisterRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.DomainRegisterRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedDomainUpdateRequestAsync(Neon.Cadence.Internal.DomainUpdateRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.DomainUpdateRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedStopWorkerRequestAsync(Neon.Cadence.Internal.StopWorkerRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.StopWorkerRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedPingRequestAsync(Neon.Cadence.Internal.PingRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.PingRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedWorkflowRegisterRequestAsync(Neon.Cadence.Internal.WorkflowRegisterRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.WorkflowRegisterRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedWorkflowExecuteRequestAsync(Neon.Cadence.Internal.WorkflowExecuteRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.WorkflowExecuteRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedWorkflowSetCacheSizeRequestAsync(Neon.Cadence.Internal.WorkflowSetCacheSizeRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.WorkflowSetCacheSizeRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.OnEmulatedWorkflowGetResultRequestAsync(Neon.Cadence.Internal.WorkflowGetResultRequest)">
            <summary>
            Handles emulated <see cref="T:Neon.Cadence.Internal.WorkflowGetResultRequest"/> messages.
            </summary>
            <param name="request">The received message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.GetWorkflowAsync(System.String)">
            <summary>
            Fetches an executing or pending workflow by it's RunID.
            </summary>
            <param name="runId">The workflow RunID.</param>
            <returns>The workflow or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.GetWorkflowWorker(System.String,System.String)">
            <summary>
            Searches an emulated workflow worker for specified domain and task list.
            </summary>
            <param name="domain">The domain.</param>
            <param name="taskList">The task list.</param>
            <returns>The <see cref="T:Neon.Cadence.CadenceClient.EmulatedWorker"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.EmulationTaskAsync">
            <summary>
            Handles emulation related background activities.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.ExecutePendingWorkflowsAsync">
            <summary>
            Executes any pending workflows that also have a matching worker running.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CancelRunningWorkflowsAsync">
            <summary>
            Cancels all running workflows.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CancelWorkflowAsync(Neon.Cadence.CadenceClient.EmulatedWorkflow)">
            <summary>
            Cancels a workflow along with and decendant workflows and activities.
            </summary>
            <param name="workflow">The workflow being canceled.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CancelActivityAsync(Neon.Cadence.CadenceClient.EmulatedActivity)">
            <summary>
            Cancels an activity.
            </summary>
            <param name="activity">The activity being canceled.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.RegisterWorkflowAsync``1(System.String)">
            <summary>
            Registers a workflow implementation with Cadence.
            </summary>
            <typeparam name="TWorkflow">The <see cref="T:Neon.Cadence.WorkflowBase"/> derived type implementing the workflow.</typeparam>
            <param name="workflowTypeName">
            Optionally specifies a custom workflow type name that will be used 
            for identifying the workflow implementation in Cadence.  This defaults
            to the fully qualified <typeparamref name="TWorkflow"/> type name.
            </param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if another workflow class has already been registered for <paramref name="workflowTypeName"/>.</exception>
            <exception cref="T:Neon.Cadence.CadenceWorkflowWorkerStartedException">
            Thrown if a workflow worker has already been started for the client.  You must
            register activity workflow implementations before starting workers.
            </exception>
            <remarks>
            <note>
            Be sure to register all of your workflow implementations before starting a workflow worker.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.RegisterAssemblyWorkflowsAsync(System.Reflection.Assembly)">
            <summary>
            Scans the assembly passed looking for workflow implementations derived from
            <see cref="T:Neon.Cadence.WorkflowBase"/> and tagged with <see cref="T:Neon.Cadence.AutoRegisterAttribute"/>
            and registers them with Cadence.
            </summary>
            <param name="assembly">The target assembly.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.TypeLoadException">
            Thrown for types tagged by <see cref="T:Neon.Cadence.AutoRegisterAttribute"/> that are not 
            derived from <see cref="T:Neon.Cadence.WorkflowBase"/> or <see cref="T:Neon.Cadence.ActivityBase"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if one of the tagged classes conflict with an existing registration.</exception>
            <exception cref="T:Neon.Cadence.CadenceWorkflowWorkerStartedException">
            Thrown if a workflow worker has already been started for the client.  You must
            register activity workflow implementations before starting workers.
            </exception>
            <remarks>
            <note>
            Be sure to register all of your workflow implementations before starting a workflow worker.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.StartWorkflowAsync``1(System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)">
            <summary>
            Starts an external workflow using the fully qualified type name for <typeparamref name="TWorkflow"/> 
            ast the workflow type name, returning a <see cref="T:Neon.Cadence.WorkflowRun"/> that can be used
            to track the workflow and also wait for its result via <see cref="M:Neon.Cadence.CadenceClient.GetWorkflowResultAsync(Neon.Cadence.WorkflowRun)"/>.
            </summary>
            <typeparam name="TWorkflow">Identifies the workflow to be exedcuted.</typeparam>
            <param name="args">Optionally specifies the workflow arguments encoded into a byte array.</param>
            <param name="taskList">Optionally specifies the target task list.  This defaults to <b>"default"</b>.</param>
            <param name="domain">Optionally specifies the Cadence domain where the workflow will run.  This defaults to the client domain.</param>
            <param name="options">Optionally specifies the workflow options.</param>
            <returns>A <see cref="T:Neon.Cadence.WorkflowRun"/> identifying the new running workflow instance.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if there is no workflow registered for <typeparamref name="TWorkflow"/>.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is not valid.</exception>
            <exception cref="T:Neon.Cadence.CadenceWorkflowRunningException">Thrown if a workflow with this ID is already running.</exception>
            <remarks>
            This method kicks off a new workflow instance and returns after Cadence has
            queued the operation but the method <b>does not</b> wait for the workflow to
            complete.
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.StartWorkflowAsync(System.String,System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)">
            <summary>
            Starts an external workflow using a specific workflow type name, returning a <see cref="T:Neon.Cadence.WorkflowRun"/>
            that can be used to track the workflow and also wait for its result via <see cref="M:Neon.Cadence.CadenceClient.GetWorkflowResultAsync(Neon.Cadence.WorkflowRun)"/>.
            </summary>
            <param name="workflowTypeName">
            The type name used when registering the workers that will handle this workflow.
            This name will often be the fully qualified name of the workflow type but 
            this may have been customized when the workflow worker was registered.
            </param>
            <param name="args">Optionally specifies the workflow arguments encoded into a byte array.</param>
            <param name="domain">Optionally specifies the Cadence domain where the workflow will run.  This defaults to the client domain.</param>
            <param name="taskList">Optionally specifies the target task list.  This defaults to <b>"default"</b>.</param>
            <param name="options">Specifies the workflow options.</param>
            <returns>A <see cref="T:Neon.Cadence.WorkflowRun"/> identifying the new running workflow instance.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if there is no workflow registered for <paramref name="workflowTypeName"/>.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is not valid.</exception>
            <exception cref="T:Neon.Cadence.CadenceWorkflowRunningException">Thrown if a workflow with this ID is already running.</exception>
            <remarks>
            This method kicks off a new workflow instance and returns after Cadence has
            queued the operation but the method <b>does not</b> wait for the workflow to
            complete.
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.GetWorkflowStateAsync(Neon.Cadence.WorkflowRun)">
            <summary>
            Returns the current state of a running workflow.
            </summary>
            <param name="workflowRun">Identifies the workflow run.</param>
            <returns>A <see cref="T:Neon.Cadence.WorkflowDetails"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the workflow no longer exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.GetWorkflowResultAsync(Neon.Cadence.WorkflowRun)">
            <summary>
            Returns the result from a workflow run, blocking until the workflow
            completes if it is still running.
            </summary>
            <param name="workflowRun">Identifies the workflow run.</param>
            <returns>The workflow result encoded as bytes or <c>null</c>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the workflow no longer exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CancelWorkflowAsync(Neon.Cadence.WorkflowRun)">
            <summary>
            <para>
            Cancels a workflow if it has not already finished.
            </para>
            <note>
            Workflow cancellation is typically considered to be a normal activity
            and not an error as opposed to workflow termination which will usually
            happen due to an error.
            </note>
            </summary>
            <param name="workflowRun">Identifies the running workflow.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the workflow no longer exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.TerminateWorkflowAsync(Neon.Cadence.WorkflowRun,System.String,System.Byte[])">
            <summary>
            <para>
            Cancels a workflow if it has not already finished.
            </para>
            <note>
            Workflow termination is typically considered to be due to an error as
            opposed to cancellation which is usually considered as a normal activity.
            </note>
            </summary>
            <param name="workflowRun">Identifies the running workflow.</param>
            <param name="reason">Optionally specifies an error reason string.</param>
            <param name="details">Optionally specifies additional details as a byte array.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the workflow no longer exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CallWorkflowAsync``1(System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)">
            <summary>
            Calls an external workflow using the fully qualified type name for <typeparamref name="TWorkflow"/> 
            and then waits for the workflow to complete, returning the workflow result.
            </summary>
            <typeparam name="TWorkflow">Identifies the workflow to be exedcuted.</typeparam>
            <param name="args">Optionally specifies the workflow arguments encoded into a byte array.</param>
            <param name="domain">Optionally specifies the Cadence domain where the workflow will run.  This defaults to the client domain.</param>
            <param name="taskList">Optionally specifies the target task list.  This defaults to <b>"default"</b>.</param>
            <param name="options">Optionally specifies the workflow options.</param>
            <returns>A <see cref="T:Neon.Cadence.WorkflowRun"/> identifying the new running workflow instance.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if there is no workflow registered for <typeparamref name="TWorkflow"/>.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is not valid.</exception>
            <exception cref="T:Neon.Cadence.CadenceWorkflowRunningException">Thrown if a workflow with this ID is already running.</exception>
            <remarks>
            This method kicks off a new workflow instance and returns after Cadence has
            queued the operation but the method <b>does not</b> wait for the workflow to
            complete.
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.CallWorkflowAsync(System.String,System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)">
            <summary>
            Calls an external workflow using a custom workflow type name and then waits for the woirkflow to complete, 
            returning the workflow result.
            </summary>
            <param name="workflowTypeName">
            The type name used when registering the workers that will handle this workflow.
            This name will often be the fully qualified name of the workflow type but 
            this may have been customized when the workflow worker was registered.
            </param>
            <param name="args">Optionally specifies the workflow arguments encoded into a byte array.</param>
            <param name="domain">Optionally specifies the Cadence domain where the workflow will run.  This defaults to the client domain.</param>
            <param name="taskList">Optionally specifies the target task list.  This defaults to <b>"default"</b>.</param>
            <param name="options">Specifies the workflow options.</param>
            <returns>A <see cref="T:Neon.Cadence.WorkflowRun"/> identifying the new running workflow instance.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if there is no workflow registered for <paramref name="workflowTypeName"/>.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is not valid.</exception>
            <exception cref="T:Neon.Cadence.CadenceWorkflowRunningException">Thrown if a workflow with this ID is already running.</exception>
            <remarks>
            This method kicks off a new workflow instance and returns after Cadence has
            queued the operation but the method <b>does not</b> wait for the workflow to
            complete.
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.SignalWorkflowAsync(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Transmits a signal to a running workflow.
            </summary>
            <param name="workflowId">The workflow ID.</param>
            <param name="signalName">Identifies the signal.</param>
            <param name="signalArgs">Optionally specifies signal arguments as a byte array.</param>
            <param name="runId">
            Optionally specifies the workflow's current run ID.  When <c>null</c> or empty
            Cadence will automatically signal the lastest workflow run.
            </param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the workflow no longer exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.SignalWorkflowAsync(Neon.Cadence.WorkflowRun,System.String,System.Byte[])">
            <summary>
            Transmits a signal to a running workflow.
            </summary>
            <param name="workflowRun">The <see cref="T:Neon.Cadence.WorkflowRun"/>.</param>
            <param name="signalName">Identifies the signal.</param>
            <param name="signalArgs">Optionally specifies signal arguments as a byte array.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the workflow no longer exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.SignalWorkflowWithStartAsync(System.String,System.String,System.Byte[],System.Byte[],System.String,Neon.Cadence.WorkflowOptions)">
            <summary>
            Transmits a signal to a workflow, starting the workflow if it's not currently running.
            </summary>
            <param name="workflowId">The workflow ID.</param>
            <param name="signalName">Identifies the signal.</param>
            <param name="signalArgs">Optionally specifies signal arguments as a byte array.</param>
            <param name="workflowArgs">Optionally specifies the workflow arguments.</param>
            <param name="options">Optionally specifies the options to be used for starting the workflow when required.</param>
            <param name="taskList">Optionally specifies the task list.  This defaults to <b>"default"</b>.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown if the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.QueryWorkflowAsync(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Queries a workflow.
            </summary>
            <param name="workflowId">The workflow ID.</param>
            <param name="queryName">Identifies the signal.</param>
            <param name="runId">
            Optionally specifies the workflow's current run ID.  When <c>null</c> or empty
            Cadence will automatically query the lastest workflow run.
            </param>
            <param name="queryArgs">Optionally specifies query arguments encoded as a byte array.</param>
            <returns>The query result encoded as a byte array.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the workflow no longer exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.QueryWorkflowAsync(Neon.Cadence.WorkflowRun,System.String,System.Byte[])">
            <summary>
            Queries a workflow.
            </summary>
            <param name="workflowRun">The <see cref="T:Neon.Cadence.WorkflowRun"/>.</param>
            <param name="queryName">Identifies the signal.</param>
            <param name="queryArgs">Optionally specifies query arguments encoded as a byte array.</param>
            <returns>The query result encoded as a byte array.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the workflow no longer exists.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence problems.</exception>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.SetWorkflowCacheSizeAsync(System.Int32)">
            <summary>
            <para>
            Sets the maximum number of bytes of history that will be retained
            for sticky workflows for workflow workers created by this client
            as a performance optimization.  When this is exceeded, Cadence will
            need to retrieve the entire workflow history from the Cadence cluster
            every time the workflow is assigned to a worker.
            </para>
            <para>
            This defaults to <b>10K</b> bytes.
            </para>
            </summary>
            <param name="maxCacheSize">The maximum number of bytes to cache for each sticky workflow.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceClient.GetworkflowCacheSizeAsync">
            <summary>
            Returns the current maximum number of bytes of history that 
            will be retained for sticky workflows for workflow workers created 
            by this client as a performance optimization.
            </summary>
            <returns>The maximum individual workflow cache size in bytes.</returns>
        </member>
        <member name="T:Neon.Cadence.CadenceClosedDelegate">
            <summary>
            Delegate called by a <see cref="T:Neon.Cadence.CadenceClient"/> when the connection is closed
            explicitly or where there's a problem communicating with the <b>cadence-proxy</b>.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="T:Neon.Cadence.CadenceClientClosedArgs">
            <summary>
            The event arguments sent when a <see cref="T:Neon.Cadence.CadenceClient"/> is closed
            with a property indicating whether or not the connection was closed due
            to an error.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceClientClosedArgs.Exception">
            <summary>
            This will be set if the connection was closed due to an error
            or <c>null</c> when the connection was closed normally.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceExtensions">
            <summary>
            Implements handy extension methods.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceExtensions.SendRequestAsync``1(System.Net.Http.HttpClient,``0)">
            <summary>
            Extends <see cref="T:System.Net.Http.HttpClient"/> by adding a method that can serialize and
            transmit a <b>cadence-proxy</b> proxy request message.
            </summary>
            <typeparam name="TRequest">The request message type.</typeparam>
            <param name="client">The HTTP client.</param>
            <param name="request">The message to be sent.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceExtensions.SendReplyAsync``2(System.Net.Http.HttpClient,``0,``1)">
            <summary>
            <para>
            Extends <see cref="T:System.Net.Http.HttpClient"/> by adding a method that can serialize and
            transmit a <b>cadence-proxy</b> reply to a proxy request message.
            </para>
            <note>
            This method ensures that the reply message's <see cref="P:Neon.Cadence.Internal.ProxyReply.RequestId"/>
            matches the request's <see cref="P:Neon.Cadence.Internal.ProxyRequest.RequestId"/> before sending the
            reply.
            </note>
            </summary>
            <typeparam name="TRequest">The request message type.</typeparam>
            <typeparam name="TReply">The reply message type.</typeparam>
            <param name="client">The HTTP client.</param>
            <param name="request">The request being responsed to.</param>
            <param name="reply">The reply message.</param>
            <returns>The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/>.</returns>
        </member>
        <member name="T:Neon.Cadence.CadenceHelper">
            <summary>
            Cadence helper methods and constants.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceHelper.NanosecondsPerSecond">
            <summary>
            Number of nanoseconds per second.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceHelper.MaxTimespan">
            <summary>
            Returns the maximum timespan supported by Cadence.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceHelper.MinTimespan">
            <summary>
            Returns the minimum timespan supported by Cadence.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceHelper.Normalize(System.TimeSpan)">
            <summary>
            Ensures that the timespan passed doesn't exceed the minimum or maximum
            supported by Cadence/GOLANG.
            </summary>
            <param name="timespan">The input.</param>
            <returns>The adjusted output.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceHelper.ToCadence(System.TimeSpan)">
            <summary>
            Converts a .NET <see cref="T:System.TimeSpan"/> into a Cadence/GOLANG duration
            (aka a <c>long</c> specifying the interval in nanoseconds.
            </summary>
            <param name="timespan">The input .NET timespan.</param>
            <returns>The duration in nanoseconds.</returns>
        </member>
        <member name="M:Neon.Cadence.CadenceHelper.ParseCadenceTimestamp(System.String)">
            <summary>
            Parses a Cadence timestamp string and converts it to a UTC
            <see cref="T:System.DateTime"/>.
            </summary>
            <param name="timestamp">The timestamp string.</param>
            <returns>The parsed <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="T:Neon.Cadence.CadenceRetryPolicy">
            <summary>
            Describes a Cadence retry policy.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceRetryPolicy.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceRetryPolicy.#ctor(Neon.Retry.LinearRetryPolicy)">
            <summary>
            Constructs an instance from a <see cref="T:Neon.Retry.LinearRetryPolicy"/>.
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="M:Neon.Cadence.CadenceRetryPolicy.#ctor(Neon.Retry.ExponentialRetryPolicy)">
            <summary>
            Constructs an instance froma <see cref="T:Neon.Retry.ExponentialRetryPolicy"/>,
            </summary>
            <param name="policy">The policy.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceRetryPolicy.InitialInterval">
            <summary>
            Specifies the backoff interval for the first retry.  If coefficient is 1.0 then
            it is used for all retries.  Required, no default value.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceRetryPolicy.BackoffCoefficient">
            <summary>
            Specifies the coefficient used to calculate the next retry backoff interval.  
            The next retry interval is previous interval multiplied by this coefficient. 
            This must be 1 or larger. Default is 2.0.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceRetryPolicy.MaximumInterval">
            <summary>
            Specifies the maximim retry interval.  Retries intervals will start at <see cref="P:Neon.Cadence.CadenceRetryPolicy.InitialInterval"/>
            and then be multiplied by <see cref="P:Neon.Cadence.CadenceRetryPolicy.BackoffCoefficient"/> for each retry attempt until the
            interval reaches or exceeds <see cref="P:Neon.Cadence.CadenceRetryPolicy.MaximumInterval"/>, at which point point each
            retry will use <see cref="P:Neon.Cadence.CadenceRetryPolicy.MaximumInterval"/> for all subsequent attempts.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceRetryPolicy.ExpirationInterval">
            <summary>
            Maximum time to retry.  Either <see cref="P:Neon.Cadence.CadenceRetryPolicy.ExpirationInterval"/> or <see cref="P:Neon.Cadence.CadenceRetryPolicy.MaximumAttempts"/> is 
            required.  Retries will stop when this is exceeded even if maximum retries is not been reached.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceRetryPolicy.MaximumAttempts">
            <summary>
            Maximum number of attempts.  When exceeded the retries stop.  If not set or set to 0, it means 
            unlimited, and the policy will rely on <see cref="P:Neon.Cadence.CadenceRetryPolicy.ExpirationInterval"/> to decide when to stop
            retrying.  Either <see cref="P:Neon.Cadence.CadenceRetryPolicy.MaximumAttempts"/> or <see cref="P:Neon.Cadence.CadenceRetryPolicy.MaximumInterval"/>"/> is required.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceRetryPolicy.NonRetriableErrors">
            <summary>
            <para>
            Specifies Cadence errors that should not be retried. This is optional. Cadence server 
            will stop retrying if error reason matches this list.  Use the <see cref="T:Neon.Cadence.NonRetriableErrors"/>
            class methods to initialize this list as required.
            </para>
            <note>
            Cancellation is not a failure, so that won't be retried.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceRetryPolicy.ToInternal">
            <summary>
            Converts the instance into an <see cref="T:Neon.Cadence.Internal.InternalRetryPolicy"/>.
            </summary>
            <returns>The converted instance.</returns>
        </member>
        <member name="T:Neon.Cadence.CadenceSettings">
            <summary>
            Cadence client settings.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceSettings.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.Mode">
            <summary>
            Specifies the connection mode.  User applications should use
            the default: <see cref="F:Neon.Cadence.ConnectionMode.Normal"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.Servers">
            <summary>
            One or more Couchbase server URIs.
            </summary>
            <remarks>
            You must specify the URI for at least one operating Couchbase node.  The Couchbase
            client will use this to discover the remaining nodes.  It is a best practice to
            specify multiple nodes in a clustered environment to avoid initial connection
            problems if any single node is down.
            </remarks>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ListenPort">
            <summary>
            Optionally specifies the port where the client will listen for traffic from the 
            associated Cadency Proxy.  This defaults to 0 which specifies that lets the 
            operating system choose an unused ephermal port.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.DefaultDomain">
            <summary>
            Specifies the default Cadence domain for this client.  This is required.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.CreateDomain">
            <summary>
            Optionally create the <see cref="P:Neon.Cadence.CadenceSettings.DefaultDomain"/> if it doesn't already exist.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ClientTimeoutSeconds">
            <summary>
            Optionally specifies the maximum time the client should wait for synchronous 
            operations to complete.  This defaults to <b>45 seconds</b> when not set.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ClientTimeout">
            <summary>
            Returns <see cref="P:Neon.Cadence.CadenceSettings.ClientTimeoutSeconds"/> as a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ClientIdentity">
            <summary>
            Optionally identifies the client application establishing the connection so that
            Cadence may include this in its logs and metrics.  This defaults to <b>"unknown"</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ProxyTimeoutSeconds">
            <summary>
            Optionally specifies the maximum time to allow the <b>cadence-proxy</b>
            to indicate that it has received a proxy request message by returning an
            OK response.  The proxy will be considered to be unhealthy when this 
            happens.  This defaults to <b>5 seconds</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ProxyTimeout">
            <summary>
            Returns <see cref="P:Neon.Cadence.CadenceSettings.ProxyTimeoutSeconds"/> as a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.TerminateTimeoutSeconds">
            <summary>
            Optionally specifies the maximum time to allow the <b>cadence-proxy</b>
            to gracefully close its Cadence cluster connection and terminate.  The proxy
            will be forceably killed when this time is exceeded.  This defaults to
            <b>10 seconds</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.TerminateTimeout">
            <summary>
            Returns <see cref="P:Neon.Cadence.CadenceSettings.TerminateTimeoutSeconds"/> as a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ConnectRetries">
            <summary>
            Specifies the number of times to retry connecting to the Cadence cluster.  This defaults
            to <b>3</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ConnectRetryDelaySeconds">
            <summary>
            Specifies the number of seconds to delay between cluster connection attempts.
            This defaults to <b>5.0 seconds</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.ConnectRetryDelay">
            <summary>
            Returns <see cref="P:Neon.Cadence.CadenceSettings.ConnectRetryDelaySeconds"/> as a <see cref="T:System.TimeSpan"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.BinaryFolder">
            <summary>
            Optionally specifies the folder where the embedded <b>cadence-proxy</b> binary 
            will be written before starting it.  This defaults to <c>null</c> which specifies
            that the binary will be written to the same folder where the <b>Neon.Cadence</b>
            assembly resides.  This folder may not be writable by the current user so this
            allows you to specify an alternative folder.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.LogLevel">
            <summary>
            Optionally specifies the logging level for the associated <b>cadence-proxy</b>.
            The supported values are <b>panic</b>, <b>fatal</b>, <b>error</b>, <b>warn</b>, 
            and <b>debug</b>.  This defaults to <b>info</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.Debug">
            <summary>
            Optionally specifies that the connection should run in DEBUG mode.  This currently
            launches the <b>cadence-proxy</b> with a command window (on Windows only) to make 
            it easy to see any output it generates and also has <b>cadence-proxy</b>.  This
            defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.Emulate">
            <summary>
            <note>
            <b>IMPORTANT:</b> Eventually, we'd like to implement a high-fidelity in-memory emulation
            mode for user based unit testing but the library isn't there yet.  We don't recommend
            that you enable emulation at this time.
            </note>
            <para>
            Optionally specifies that a local in-memory Cadence emulation should be started
            for unit testing.
            </para>
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.DebugPrelaunched">
            <summary>
            <b>INTERNAL USE ONLY:</b> Optionally indicates that the <b>cadence-proxy</b> will
            already be running for debugging purposes.  When this is <c>true</c>, the 
            <b>cadence-client</b> be hardcoded to listen on <b>127.0.0.2:5001</b> and
            the <b>cadence-proxy</b> will be assumed to be listening on <b>127.0.0.2:5000</b>.
            This defaults to <c>false.</c>
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.DebugDisableHandshakes">
            <summary>
            <b>INTERNAL USE ONLY:</b> Optionally indicates that the <b>cadence-client</b>
            will not perform the <see cref="T:Neon.Cadence.Internal.InitializeRequest"/>/<see cref="T:Neon.Cadence.Internal.InitializeReply"/>
            and <see cref="T:Neon.Cadence.Internal.TerminateRequest"/>/<see cref="T:Neon.Cadence.Internal.TerminateReply"/> handshakes 
            with the <b>cadence-proxy</b> for debugging purposes.  This defaults to
            <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.DebugDisableHeartbeats">
            <summary>
            <b>INTERNAL USE ONLY:</b> Optionally disable health heartbeats.  This can be
            useful while debugging the client but should never be set for production.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.DebugIgnoreTimeouts">
            <summary>
            <b>INTERNAL USE ONLY:</b> Optionally ignore operation timeouts.  This can be
            useful while debugging the client but should never be set for production.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.DebugIgnoreHeartbeats">
            <summary>
            <b>INTERNAL USE ONLY:</b> Optionally disables heartbeat handling by the
            emulated <b>cadence-proxy</b> for testing purposes.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceSettings.DebugHttpTimeout">
            <summary>
            <b>INTERNAL USE ONLY:</b> Optionally specifies the timeout to use for 
            HTTP requests made to the <b>cadence-proxy</b>.  This defaults to
            <b>5 seconds</b>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.ChildTerminationPolicy">
            <summary>
            Enumerates the possible child workflow behaviors when the parent
            workflow is terminated.
            </summary>
        </member>
        <member name="F:Neon.Cadence.ChildTerminationPolicy.Terminate">
            <summary>
            <para>
            All open child workflows will be terminated when parent workflow is terminated.
            </para>
            <note>
            This policy is not implemented.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Cadence.ChildTerminationPolicy.RequestCancel">
            <summary>
            <para>
            Cancel requests will be sent to all open child workflows to all open child 
            workflows when parent workflow is terminated.
            </para>
            <note>
            This policy is not implemented.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Cadence.ChildTerminationPolicy.Abandon">
            <summary>
            Child workflow execution will continue unaffected when parent workflow is
            terminated.  This is the default policy.
            </summary>
        </member>
        <member name="T:Neon.Cadence.ChildWorkflow">
            <summary>
            Returned by <see cref="M:Neon.Cadence.WorkflowBase.StartChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>
            to identify the new child workflow.  This valie can then be used to perform
            operations on the workflow like: <see cref="M:Neon.Cadence.WorkflowBase.SignalChildWorkflowAsync(Neon.Cadence.ChildWorkflow,System.String,System.Byte[])"/>,
            <see cref="M:Neon.Cadence.WorkflowBase.CancelChildWorkflowAsync(Neon.Cadence.ChildWorkflow)"/> and <see cref="M:Neon.Cadence.WorkflowBase.WaitForChildWorkflowAsync(Neon.Cadence.ChildWorkflow,System.Threading.CancellationToken)"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.ChildWorkflow.#ctor(System.Int64)">
            <summary>
            Internal constructor.
            </summary>
            <param name="childId">The child workflow's local ID.</param>
        </member>
        <member name="P:Neon.Cadence.ChildWorkflow.Id">
            <summary>
            Returns the child workflow's local ID.
            </summary>
        </member>
        <member name="T:Neon.Cadence.ConnectionMode">
            <summary>
            Enumerates the Cadence connection modes.
            </summary>
        </member>
        <member name="F:Neon.Cadence.ConnectionMode.Normal">
            <summary>
            Connect to a Cadence cluster via the <b>cadence-proxy</b>.
            </summary>
        </member>
        <member name="F:Neon.Cadence.ConnectionMode.ListenOnly">
            <summary>
            <b>INTERNAL USE:</b> Start the connection's proxy listener but don't
            launch the proxy and attempt to connect to a Cadence cluster.  This
            mode is used for unit testing.
            </summary>
        </member>
        <member name="T:Neon.Cadence.DescribedActivityInfo">
            <summary>
            Describes the current state of a scheduled or executing activity.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.ActivityID">
            <summary>
            The activity ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.Name">
            <summary>
            Identifies the activity type.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.Status">
            <summary>
            The activity state.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.HeartbeatDetails">
            <summary>
            Details from the last activity heartbeart.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.LastHeartbeatTimestamp">
            <summary>
            Time when the last activity heartbeat was received.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.LastStartedTimestamp">
            <summary>
            Time when the activity was most recently started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.Attempt">
            <summary>
            The number of times the activity has been started/restarted.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.MaximumAttempts">
            <summary>
            The maximum times the activity may be started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.ScheduledTimestamp">
            <summary>
            Time when the activity is scheduled to run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DescribedActivityInfo.ExpirationTimestamp">
            <summary>
            Time when the activity must complete.
            </summary>
        </member>
        <member name="T:Neon.Cadence.DomainDescription">
            <summary>
            Information returned by <see cref="M:Neon.Cadence.CadenceClient.DescribeDomainAsync(System.String)"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainDescription.DomainInfo">
            <summary>
            The domain information.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainDescription.Configuration">
            <summary>
            The domain configuration.
            </summary>
        </member>
        <member name="T:Neon.Cadence.DomainInfo">
            <summary>
            Information about a Cadence domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainInfo.Name">
            <summary>
            The domain name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainInfo.Status">
            <summary>
            The domain status.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainInfo.Description">
            <summary>
            Ths domain description.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainInfo.OwnerEmail">
            <summary>
            The domain owner's email address.
            </summary>
        </member>
        <member name="T:Neon.Cadence.DomainOptions">
            <summary>
            Domain configuration options.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainOptions.RetentionDays">
            <summary>
            The workflow history retention period in days.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainOptions.EmitMetrics">
            <summary>
            Enables metrics for workflows and activities running in the domain.
            </summary>
        </member>
        <member name="T:Neon.Cadence.DomainStatus">
            <summary>
            Indicates a Cadence domain status.
            </summary>
        </member>
        <member name="F:Neon.Cadence.DomainStatus.Unspecified">
            <summary>
            The status cannot be determined.
            </summary>
        </member>
        <member name="F:Neon.Cadence.DomainStatus.Registered">
            <summary>
            The domain is registered and active.
            </summary>
        </member>
        <member name="F:Neon.Cadence.DomainStatus.Deprecated">
            <summary>
            The domain is closed for new workflows but will remain
            until already running workflows are completed and the
            history retention period for the last executed workflow
            has been satisified.
            </summary>
        </member>
        <member name="F:Neon.Cadence.DomainStatus.Deleted">
            <summary>
            The domain is deleted.
            </summary>
        </member>
        <member name="T:Neon.Cadence.DomainUpdateArgs">
            <summary>
            Holds the changes to be made to a Cadence domain.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainUpdateArgs.Name">
            <summary>
            The domain name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainUpdateArgs.DomainInfo">
            <summary>
            The updated basic domain properties.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainUpdateArgs.Options">
            <summary>
            The updated domain optiona.
            </summary>
        </member>
        <member name="T:Neon.Cadence.DomainUpdateInfo">
            <summary>
            Holds the changes to be made to a Cadence domain's basic properties.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainUpdateInfo.Description">
            <summary>
            The updated domain description.
            </summary>
        </member>
        <member name="P:Neon.Cadence.DomainUpdateInfo.OwnerEmail">
            <summary>
            The updated domain owner's email address.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceActivityExternalCompletionException">
            <summary>
            Thrown by activities that need to wait for an external event before the activity
            is considered to be complete.  These activities will call <see cref="M:Neon.Cadence.ActivityBase.CompleteExternallyAsync"/> 
            within their <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/> methods which will throw this
            internal exception, exiting the run method.  This exception will be caught by
            the <see cref="T:Neon.Cadence.ActivityBase"/> base class and used to signal Cadence that the activity
            will be completed externally via a call to <see cref="M:Neon.Cadence.CadenceClient.CompleteActivityAsync(System.Byte[],System.Byte[],System.Exception)"/>.
            </summary>
            <remarks>
            <note>
            Activity entry points must allow this exception to be caught by the
            calling <see cref="T:Neon.Cadence.CadenceClient"/> so that <see cref="M:Neon.Cadence.ActivityBase.CompleteExternallyAsync"/>
            will work properly.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceActivityExternalCompletionException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceActivityWorkerStartedException">
            <summary>
            Thrown when an attempt is made to register an activity implementation after an
            activity worker has been started on a client.  You must register all implementations
            before starting a worker.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceActivityWorkerStartedException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceActivityWorkerStartedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optionally specifies the inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceActivityWorkerStartedException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceBadRequestException">
            <summary>
            Thrown when a Cadence receives an invalid request.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceBadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceBadRequestException.CadenceError">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.CadenceBadRequestException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceCancelledException">
            <summary>
            Thrown when a Cadence operation is cancelled.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceCancelledException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceConnectException">
            <summary>
            Thrown when a Cadence connection could not be established.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceConnectException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optionally specifies the inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceConnectException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceCustomException">
            <summary>
            Thrown when a Cadence <b>custom</b> error is encountered.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceCustomException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceCustomException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceDomainAlreadyExistsException">
            <summary>
            Thrown when a Cadence domain already exists.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceDomainAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceDomainAlreadyExistsException.CadenceError">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.CadenceDomainAlreadyExistsException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceEntityNotExistsException">
            <summary>
            Thrown when a Cadence request references an entity that doesn't exist.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceEntityNotExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceEntityNotExistsException.CadenceError">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.CadenceEntityNotExistsException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceException">
            <summary>
            Base class for all Cadence related exceptions.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optionally specifies the inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceException.CadenceError">
            <summary>
            Returns Cadence GOLANG client's error string corresponding to the
            exception or <c>null</c> when the exception does not map to an
            error string.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceException.CadenceErrorType">
            <summary>
            Returns the Cadence error type.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceException.ToCadenceError">
            <summary>
            Converts the exception into a <see cref="P:Neon.Cadence.CadenceException.CadenceError"/>.
            </summary>
            <returns>The <see cref="P:Neon.Cadence.CadenceException.CadenceError"/>.</returns>
        </member>
        <member name="T:Neon.Cadence.CadenceGenericException">
            <summary>
            Thrown when a Cadence <b>generic</b> error is encountered.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceGenericException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceGenericException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceInternalServiceException">
            <summary>
            Thrown when a Cadence experienced an internal error.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceInternalServiceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceInternalServiceException.CadenceError">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.CadenceInternalServiceException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadencePanicException">
            <summary>
            Thrown when a Cadence <b>panic</b> error is encountered.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadencePanicException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadencePanicException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceServiceBusyException">
            <summary>
            Thrown when the Cadence cluster is too busy to perform an operation.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceServiceBusyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceServiceBusyException.CadenceError">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.CadenceServiceBusyException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceTerminatedException">
            <summary>
            Thrown when a Cadence <b>terminated</b> error is encountered.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceTerminatedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceTerminatedException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceTimeoutException">
            <summary>
            Indicates that a Cadence operation timed out.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optionally specifies the inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceTimeoutException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceWorkflowRestartException">
            <summary>
            Thrown by <see cref="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)"/>
            to be handled internally by <see cref="T:Neon.Cadence.WorkflowBase"/> as one of the special case 
            mechanisms for completing a workflow.
            </summary>
            <remarks>
            <note>
            Workflow entry points must allow this exception to be caught by the
            calling <see cref="T:Neon.Cadence.CadenceClient"/> so that <see cref="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)"/>
            will work properly.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.CadenceWorkflowRestartException.#ctor(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)">
            <summary>
            Constructor.
            </summary>
            <param name="args">Optional arguments for the new run.</param>
            <param name="domain">Optional domain for the new run.</param>
            <param name="taskList">Optional task list for the new run.</param>
            <param name="executionToStartTimeout">Optional execution to start timeout for the new run.</param>
            <param name="scheduleToCloseTimeout">Optional schedule to close timeout for the new run.</param>
            <param name="scheduleToStartTimeout">Optional schedule to start timeout for the new run.</param>
            <param name="startToCloseTimeout">Optional start to close timeout for the new run.</param>
            <param name="retryPolicy">Optional retry policy for the new run.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRestartException.Args">
            <summary>
            Returns the arguments for the next workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRestartException.Domain">
            <summary>
            Optionally specifies the new domain for the next workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRestartException.TaskList">
            <summary>
            Optionally specifies the new task list for the next workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRestartException.ExecutionStartToCloseTimeout">
            <summary>
            Optionally specifies the new timeout for the next workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRestartException.ScheduleToCloseTimeout">
            <summary>
            Optionally specifies the new timeout for the next workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRestartException.ScheduleToStartTimeout">
            <summary>
            Optionally specifies the new timeout for the next workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRestartException.StartToCloseTimeout">
            <summary>
            Optionally specifies the new timeout for the next workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRestartException.RetryPolicy">
            <summary>
            Optionally specifies the new retry policy for the next workflow run.
            </summary>
        </member>
        <member name="T:Neon.Cadence.CadenceWorkflowRunningException">
            <summary>
            Thrown when a workflow cannot be started because another workflow with
            the same ID is already running.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceWorkflowRunningException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optional inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRunningException.CadenceError">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowRunningException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceWorkflowWorkerStartedException">
            <summary>
            Thrown when an attempt is made to register a workflow implementation after an
            workflow worker has been started on a client.  You must register all implementations
            before starting a worker.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceWorkflowWorkerStartedException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.CadenceWorkflowWorkerStartedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Optionally specifies message.</param>
            <param name="innerException">Optionally specifies the inner exception.</param>
        </member>
        <member name="P:Neon.Cadence.CadenceWorkflowWorkerStartedException.CadenceErrorType">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.CadenceErrorTypes">
            <summary>
            <b>INTERNAL USE ONLY:</b> Enumerates the Cadence error types.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceErrorTypes.Cancelled">
            <summary>
            An operation was cancelled.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceErrorTypes.Custom">
            <summary>
            Custom error.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceErrorTypes.Generic">
            <summary>
            Generic error.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceErrorTypes.Panic">
            <summary>
            Panic error.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceErrorTypes.Terminated">
            <summary>
            Terminated error.
            </summary>
        </member>
        <member name="F:Neon.Cadence.CadenceErrorTypes.Timeout">
            <summary>
            Timeout error.
            </summary>
        </member>
        <member name="T:Neon.Cadence.InternalTaskListKind">
            <summary>
            <b>INTERNAL USE ONLY:</b> Enumerates the different kinds of task lists.
            </summary>
        </member>
        <member name="F:Neon.Cadence.InternalTaskListKind.NORMAL">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Neon.Cadence.InternalTaskListKind.STICKY">
            <summary>
            Sticky.
            </summary>
        </member>
        <member name="T:Neon.Cadence.NonDeterministicPolicy">
            <summary>
            Enumerates how a decision task handler deals with mismatched history events 
            (presumably arising from non-deterministic workflow definitions). 
            </summary>
        </member>
        <member name="F:Neon.Cadence.NonDeterministicPolicy.BlockWorkflow">
            <summary>
            This policy logs an error to the console but does not reply to the server.  This is
            the default policy.
            </summary>
        </member>
        <member name="F:Neon.Cadence.NonDeterministicPolicy.FailWorkflow">
            <summary>
            This policy signals Cadence to fail the workflow.
            </summary>
        </member>
        <member name="T:Neon.Cadence.NonRetriableErrors">
            <summary>
            Used in conjunction with <see cref="T:Neon.Cadence.CadenceRetryPolicy"/> to specify errors that
            <b>will not</b> cause a workflow related operation to be retried.
            </summary>
        </member>
        <member name="M:Neon.Cadence.NonRetriableErrors.Custom(System.String)">
            <summary>
            Returns the non-retriable error string for a <b>custom error</b>.
            </summary>
            <param name="reason">The reason string.</param>
        </member>
        <member name="M:Neon.Cadence.NonRetriableErrors.Panic">
            <summary>
            Returns the non-retriable error string for a <b>panic error</b>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.NonRetriableErrors.Generic">
            <summary>
            Returns the non-retriable error string for a <b>generic error</b>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.NonRetriableErrors.StartToCloseTimeout">
            <summary>
            Returns the non-retriable error string for a <b>start-to-close timeout</b>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.NonRetriableErrors.HeartbeatTimeout">
            <summary>
            Returns the non-retriable error string for a <b>heartbeat timeout</b>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.QueryHandlerAttribute">
            <summary>
            Used to tag a <see cref="T:Neon.Cadence.WorkflowBase"/> method that will be called to handle an
            external query.
            </summary>
        </member>
        <member name="M:Neon.Cadence.QueryHandlerAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="queryName">Specifies the Cadence query name.</param>
        </member>
        <member name="P:Neon.Cadence.QueryHandlerAttribute.Name">
            <summary>
            Returns the query name. 
            </summary>
        </member>
        <member name="T:Neon.Cadence.SignalHandlerAttribute">
            <summary>
            Used to tag a <see cref="T:Neon.Cadence.WorkflowBase"/> method that will be called to handle an
            external signal.
            </summary>
        </member>
        <member name="M:Neon.Cadence.SignalHandlerAttribute.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="signalName">Specifies the Cadence signal name.</param>
        </member>
        <member name="P:Neon.Cadence.SignalHandlerAttribute.Name">
            <summary>
            Returns the signal name. 
            </summary>
        </member>
        <member name="T:Neon.Cadence.TaskListKind">
            <summary>
            Enumerates the different kinds of task lists.
            </summary>
        </member>
        <member name="F:Neon.Cadence.TaskListKind.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:Neon.Cadence.TaskListKind.Sticky">
            <summary>
            Sticky.
            </summary>
        </member>
        <member name="T:Neon.Cadence.Worker">
            <summary>
            Identifies a worker registered with Cadence.
            </summary>
            <remarks>
            <para>
            Cadence doesn't appear to support starting, stopping, and then restarting the same
            worker within an individual Cadence client so this class will prevent this
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.Worker.#ctor(Neon.Cadence.CadenceClient,System.Int64,System.String,System.String,Neon.Cadence.WorkerOptions)">
            <summary>
            Internal constructor.
            </summary>
            <param name="client">The parent client.</param>
            <param name="workerId">The ID of the worker as tracked by the <b>cadence-proxy</b>.</param>
            <param name="domain">The Cadence domain where the worker is registered.</param>
            <param name="taskList">The Cadence task list.</param>
            <param name="options">The worker options.</param>
        </member>
        <member name="M:Neon.Cadence.Worker.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.Worker.Client">
            <summary>
            Returns the parent Cadence client.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Worker.IsDisposed">
            <summary>
            Indicates whether the worker has been fully disposed.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Worker.WorkerId">
            <summary>
            Returns the ID of the worker as tracked by the <b>cadence-proxy</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Worker.Domain">
            <summary>
            Returns the Cadence domain where the worker is registered.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Worker.Tasklist">
            <summary>
            Returns the Cadence task list.
            </summary>
        </member>
        <member name="P:Neon.Cadence.Worker.Options">
            <summary>
            Returns the worker options.
            </summary>
        </member>
        <member name="F:Neon.Cadence.Worker.RefCount">
            <summary>
            Returns the current worker reference count.  This will be set to
            <b>1</b> the first time the worker is registered.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkerArgs">
            <summary>
            Holds the opaque arguments passed to <see cref="T:Neon.Cadence.WorkflowBase"/> and <see cref="T:Neon.Cadence.ActivityBase"/>
            implementations by the <see cref="T:Neon.Cadence.CadenceClient"/> when the workflow or activity is 
            executed on a worker.  This must be passed to the base <see cref="T:Neon.Cadence.WorkflowBase"/> or
            <see cref="T:Neon.Cadence.ActivityBase"/> class constructors.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerArgs.Client">
            <summary>
            The parent <see cref="T:Neon.Cadence.CadenceClient"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerArgs.ContextId">
            <summary>
            The ID used to reference the corresponding Cadence context managed by
            the <b>cadence-proxy</b>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkerOptions">
            <summary>
            Specifies the options Cadence will use when assigning workflow and activity
            executions to a user worker service.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.MaxConcurrentActivityExecutionSize">
            <summary>
            Optionally sets set the maximum concurrent activity executions this worker can have.
            The zero value of this uses the default value.  Defaults to <b>1000</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.WorkerActivitiesPerSecond">
            <summary>
            <para>
            Optionally sets the rate limiting on number of activities that can be executed per second per
            worker. This can be used to limit resources used by the worker.
            </para>
            <note>
            Notice that the number is represented in float, so that you can set it to less than
            1 if needed. For example, set the number to 0.1 means you want your activity to be executed
            once for every 10 seconds. This can be used to protect down stream services from flooding.
            The zero value of this uses the default value..
            </note>
            <para>
            This defaults to <b>100,000</b>.
            </para>
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.MaxConcurrentLocalActivityExecutionSize">
            <summary>
            Optionally sets the maximum concurrent local activity executions this worker can have.
            The zero value of this uses the default value.  This defaults to <b>1000</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.WorkerLocalActivitiesPerSecond">
            <summary>
            <para>
            Optionally sets the rate limiting on number of local activities that can be executed per second per
            worker. This can be used to limit resources used by the worker.
            </para>
            <note>
            Notice that the number is represented in float, so that you can set it to less than
            1 if needed. For example, set the number to 0.1 means you want your local activity to be executed
            once for every 10 seconds. This can be used to protect down stream services from flooding.
            The zero value of this uses the default value.
            </note>
            <para>
            This defaults to <b>100,000</b>.
            </para>
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.TaskListActivitiesPerSecond">
            <summary>
            <para>
            Optionally sets the rate limiting on number of activities that can be executed per second.
            This is managed by the server and controls activities per second for your entire task list
            whereas WorkerActivityTasksPerSecond controls activities only per worker.
            </para>
            <note>
            Notice that the number is represented in float, so that you can set it to less than
            1 if needed. For example, set the number to 0.1 means you want your activity to be executed
            once for every 10 seconds. This can be used to protect down stream services from flooding.
            </note>
            <para>
            The zero value of this uses the default value. This defaults to <b>100,000</b>.
            </para>
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.MaxConcurrentDecisionTaskExecutionSize">
            <summary>
            Optionally sets the maximum concurrent decision task executions this worker can have.
            The zero value of this uses the default value.  This defaults to <b>100,000</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.WorkerDecisionTasksPerSecond">
            <summary>
            Optionally stes the rate limiting on number of decision tasks that can be executed per
            second per worker. This can be used to limit resources used by the worker.
            The zero value of this uses the default value.  This defaults to <b>1000</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.AutoHeartBeat">
            <summary>
            Optionally indicates that the activities need auto heart beating
            by the framework.  This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.Identity">
            <summary>
            Optionally sets an identify that can be used to track this host for debugging.
            This defaults to include the hostname, groupName and process ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.EnableLoggingInReplay">
            <summary>
            Optionally enables logging in replay.  This defaults to <c>false</c>.
            </summary>
            <remarks>
            In the workflow code you can use workflow.GetLogger(ctx) to write logs. By default, the logger will skip log
            entry during replay mode so you won't see duplicate logs. This option will enable the logging in replay mode.
            This is only useful for debugging purpose.
            </remarks>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.DisableWorkflowWorker">
            <summary>
            Optionally disable running workflow workers.  This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.DisableActivityWorker">
            <summary>
            Optionally disable running activity workers.  This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.DisableStickyExecution">
            <summary>
            Optionally dfisables sticky execution.  This defaults to <c>false</c>.
            </summary>
            <remarks>
            Sticky Execution is to run the decision tasks for one workflow execution on same worker host. This is an
            optimization for workflow execution. When sticky execution is enabled, worker keeps the workflow state in
            memory. New decision task contains the new history events will be dispatched to the same worker. If this
            worker crashes, the sticky decision task will timeout after StickyScheduleToStartTimeout, and cadence server
            will clear the stickiness for that workflow execution and automatically reschedule a new decision task that
            is available for any worker to pick up and resume the progress.
            </remarks>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.StickyScheduleToStartTimeout">
            <summary>
            Optionally sets the sticky schedule to start timeout.  Defaults to <b>5 seconds</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.NonDeterministicWorkflowPolicy">
            <summary>
            Optionally sets how decision workers deals with non-deterministic history events,
            presumably arising from non-deterministic workflow definitions or non-backward compatible workflow definition changes.
            This defaults to <see cref="F:Neon.Cadence.NonDeterministicPolicy.BlockWorkflow"/> which 
            just logs error but reply nothing back to server
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkerOptions.WorkerStopTimeout">
            <summary>
            Optionally sets the graceful shutdown timeout.  Defaults to <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkerOptions.ToInternal">
            <summary>
            Converts the instance into an <see cref="T:Neon.Cadence.Internal.InternalWorkerOptions"/>.
            </summary>
            <returns>The converted instance.</returns>
        </member>
        <member name="T:Neon.Cadence.WorkflowBase">
            <summary>
            Base class for all application Cadence workflow implementations.
            </summary>
            <remarks>
            <para>
            Cadence workflows are intended to implement the decision logic around zero
            or more activities that actually interact with the outside world or perform
            longer running computations.  You'll provide this logic in your <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/>
            method implementation.  This method accepts workflow parameters as byte array
            and returns the workflow result as another byte array (both of these arrays
            may also be <c>null</c>).
            </para>
            <para>
            Workflows are pretty easy to implement.  You'll need to derive your custom
            workflow class from <see cref="T:Neon.Cadence.WorkflowBase"/> and implement a default public
            constructor and then need to implement the <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> method,
            which is where your workflow logic will reside.  
            </para>
            <note>
            <para>
            Workflow logic must be deterministic and idempotent:
            </para>
            <list type="bullet">
                <item>
                <para>
                The code in your <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> method must only rely on
                state and data returned by Cadence methods for determining what to do.
                This allows Cadence to replay previously completed workfow steps when
                a workflow needs to be rescheduled on another worker.
                </para>
                <para>
                This means that you must not call things like <see cref="P:System.DateTime.UtcNow"/>
                directly in your workflow because this will likely return a different 
                value every time it's called.  Instead, call  
                </para>
                </item>
                <item>
                <para>
                Workflows are inherently single threaded.  You should never explicitly
                create threads within <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> or use things like
                <see cref="M:System.Threading.Tasks.Task.Run(System.Action)"/> which schedule work on background threads.
                </para>
                <note>
                Workflows are allowed to run multiple activities in parallel and activities
                can be multi-threaded, it's just the workflow code itself that can't use
                threads because those will generally interfere with Cadence's ability to
                replay workflow steps deterministically.
                </note>
                </item>
                <item>
                Workflows must never obtain the current time by using methods like 
                <see cref="P:System.DateTime.UtcNow"/> directly.  Use <see cref="M:Neon.Cadence.WorkflowBase.UtcNowAsync"/>
                instead.
                </item>
                <item>
                <para>
                Cadence supports <b>workflow variables</b>.  Variables are identified by
                non-empty string names and can reference byte array values or <c>null</c>.
                You'll use <see cref="M:Neon.Cadence.WorkflowBase.SetVariableAsync(System.String,System.Byte[])"/> to set a variable
                and <see cref="M:Neon.Cadence.WorkflowBase.GetVariableAsync(System.String)"/> to retrieve a variable's value.
                </para>
                <note>
                Uninitialized variables will return <c>null</c>.
                </note>
                <para>
                Workflow variables are recorded in the history such that the consistent values
                will be returned for each decision task when the workflow is replayed.  You
                can use variables to hold non-deterministic or external state such as generated
                UUIDs, random numbers, or the point-in-time state of an external system to
                ensure that your workflows will make the same decisions when replayed.
                </para>
                </item>
                <item>
                Workflows should never call <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)"/> or 
                <see cref="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)"/>.  Use <see cref="M:Neon.Cadence.WorkflowBase.SleepAsync(System.TimeSpan)"/>
                instead.
                </item>
            </list>
            </note>
            <para>
            Here's an overview describing the steps necessary to implement, deploy, and
            start a workflow:
            </para>
            <list type="number">
            <item>
                A custom workflow is implemented by deriving a class from <see cref="T:Neon.Cadence.WorkflowBase"/>,a
                implementing the workflow logic via a <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/>
                method.  Any custom workflow activities will need to be implemented as classes
                derived from <see cref="T:Neon.Cadence.ActivityBase"/>.
            </item>
            <item>
                <para>
                The custom <see cref="T:Neon.Cadence.WorkflowBase"/> class needs to be deployed as a service or
                application that creates a <see cref="T:Neon.Cadence.CadenceClient"/> connected to a Cadence
                cluster.  This application needs to call <see cref="!:CadenceClient.StartWorkflowWorkerAsync(string, string, WorkerOptions)"/>
                and <see cref="!:CadenceClient.StartActivityWorkerAsync(string, string, WorkerOptions)"/> to
                start the workflow and activity workers as required.
                </para>
            </item>
            <item>
                <para>
                An external workflow instance can be started by calling <see cref="M:Neon.Cadence.CadenceClient.StartWorkflowAsync(System.String,System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)"/>,
                passing an optional byte array as workflow arguments as well as optional workflow options.  
                External workflows have no parent, as opposed to child workflows that run in the context of 
                another workflow (the parent).
                </para>
                <note>
                <see cref="M:Neon.Cadence.CadenceClient.StartWorkflowAsync(System.String,System.Byte[],System.String,System.String,Neon.Cadence.WorkflowOptions)"/> returns immediately
                after the new workflow has been submitted to Cadence.  This method does not wait
                for the workflow to finish.
                </note>
            </item>
            <item>
                For Neon Cadence client instances that have started a worker that handles the named workflow,
                Cadence will choose one of the workers and begin executing the workflow there.  The Neon Cadence
                client will instantiate the registered custom <see cref="T:Neon.Cadence.WorkflowBase"/> call its
                <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> method, passing the optional workflow arguments
                encoded as a byte array.
            </item>
            <item>
                <para>
                The custom <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> method implements the workflow by
                calling activities via <see cref="M:Neon.Cadence.WorkflowBase.CallActivityAsync(System.String,System.Byte[],Neon.Cadence.Internal.ActivityOptions,System.Threading.CancellationToken)"/> or 
                <see cref="M:Neon.Cadence.WorkflowBase.CallLocalActivityAsync``1(System.Byte[],Neon.Cadence.Internal.LocalActivityOptions,System.Threading.CancellationToken)"/> 
                and child workflows via <see cref="M:Neon.Cadence.WorkflowBase.CallChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>,
                making decisions based on their results to call other activities and child workflows, 
                and ultimately return a result or throwing an exception to indicate that the workflow
                failed.
                </para>
                <para>
                The Neon Cadence client expects workflow and activity parameters and results to be 
                byte arrays or <c>null</c>.  It's up to the application to encode the actual values
                into bytes using whatever encoding scheme that makes sense.  It is common though
                to use the <see cref="M:Neon.Common.NeonHelper.JsonSerialize(System.Object,Newtonsoft.Json.Formatting)"/> and
                <see cref="M:Neon.Common.NeonHelper.JsonDeserialize(System.Type,System.String,System.Boolean)"/> methods to serialize
                parameters and results to JSON strings and then encode those as UTF-8 bytes.
                </para>
            </item>
            <item>
                <para>
                Cadence also supports executing low overhead <b>local activities</b>.  These activities
                are executed directly in the current process without needing to be scheduled by the
                Cadence cluster and invoked on a worker.  Local activities are intended for tasks that
                will execute quickly, on the order of a few seconds.
                </para>
                <para>
                You'll use the <see cref="M:Neon.Cadence.WorkflowBase.CallLocalActivityAsync``1(System.Byte[],Neon.Cadence.Internal.LocalActivityOptions,System.Threading.CancellationToken)"/>,
                specifying your custom <see cref="T:Neon.Cadence.ActivityBase"/> implementation.
                </para>
                <note>
                Local activity types do not need to be registered with a Cadence worker.
                </note>
                <para>
                Local activities have some limitations:
                </para>
                <list type="bullet">
                    <item>
                    Local activities cannot record Cadence heartbeats.
                    </item>
                    <item>
                    Local activity timeouts should be shorter than the decision task timeout
                    of the calling workflow.
                    </item>
                    <item>
                    The .NET Cadence client does not currently support cancellation of local activities.
                    </item>
                </list>
            </item>
            <item>
                <para>
                Workflow instances can be signalled when external events occur via the 
                <see cref="M:Neon.Cadence.CadenceClient.SignalWorkflowAsync(System.String,System.String,System.Byte[],System.String)"/> or
                <see cref="M:Neon.Cadence.CadenceClient.SignalWorkflowWithStartAsync(System.String,System.String,System.Byte[],System.Byte[],System.String,Neon.Cadence.WorkflowOptions)"/>
                methods.  Signals are identified by a string name and may include a byte
                array payload.  Workflows receive signals by implementing a receive method
                accepting a byte array payload parameter and tagging the method with a
                <see cref="T:Neon.Cadence.SignalHandlerAttribute"/> specifying the signal name, like:
                </para>
                <code language="c#">
                [SignalHandler("my-signal")]
                protected async Task OnMySignal(byte[] args)
                {
                    await DoDomethingAsync();
                }
                </code>
                <note>
                Exceptions thrown by signal handlers are caught and logged but are not
                returned to the signaller.
                </note>
            </item>
            <item>
                <para>
                Running workflows can also be queried via <see cref="M:Neon.Cadence.CadenceClient.QueryWorkflowAsync(System.String,System.String,System.Byte[],System.String)"/>.
                Queries are identified by a name and may include optional arguments encoded 
                as a byte array and return a result encoded as a byte array or <c>null</c>.
                Workflows receive queries by implementing a receive method accepting the
                query arguments as a byte array that returns the byte array result.  You'll
                need to tag this with a <see cref="T:Neon.Cadence.QueryHandlerAttribute"/> specifying the
                query name, like:
                </para>
                <code language="c#">
                [QueryHandler("my-query")]
                protected async Task&lt;byte[]&gt; OnMyQuery(byte[] args)
                {
                    return await Task.FromResult(Encoding.UTF8.GetBytes("Hello World!"));
                }
                </code>
                <note>
                Exceptions thrown by query handlers are caught and will be returned to 
                the caller to be thrown as an exception.
                </note>
            </item>
            </list>
            <para><b>Child Workflows and Activities</b></para>
            <para>
            Workflows can run child workflows and activities.  Child workflows are started using
            <see cref="M:Neon.Cadence.WorkflowBase.CallChildWorkflowAsync``1(System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>,
            <see cref="M:Neon.Cadence.WorkflowBase.CallChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>,
             <see cref="M:Neon.Cadence.WorkflowBase.StartChildWorkflowAsync``1(System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>,
             or <see cref="M:Neon.Cadence.WorkflowBase.StartChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>.
            </para>
            <para>
            Activities are started via <see cref="M:Neon.Cadence.WorkflowBase.CallActivityAsync``1(System.Byte[],Neon.Cadence.Internal.ActivityOptions,System.Threading.CancellationToken)"/>,
            or <see cref="M:Neon.Cadence.WorkflowBase.CallActivityAsync(System.String,System.Byte[],Neon.Cadence.Internal.ActivityOptions,System.Threading.CancellationToken)"/>.
            </para>
            <para><b>Restarting Workflows</b></para>
            <para>
            Long running workflows that are essentially a high-level loop can result in the recording
            of an excessive number of events to its history.  This can result in poor performance
            due to having to replay this history when the workflow has to be rehydrated.  
            </para>
            <para>
            You can avoid this by removing the workflow loop and calling <see cref="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)"/>
            at the end of your workflow logic.  This causes Cadence to reschedule the workflow
            with a clean history, somewhat similar to what happens for CRON workflows (which are
            rescheduled automatically).  <see cref="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)"/>
            works by throwing a <see cref="T:Neon.Cadence.CadenceWorkflowRestartException"/> which will exit
            the workflow method and be caught by the calling <see cref="T:Neon.Cadence.CadenceClient"/> which
            which then informs Cadence.
            </para>
            <note>
            Workflow entry points must allow the <see cref="T:Neon.Cadence.CadenceWorkflowRestartException"/> to be caught by the
            calling <see cref="T:Neon.Cadence.CadenceClient"/> so that <see cref="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)"/>
            will work properly.
            </note>
            <para><b>Upgrading Workflows</b></para>
            <para>
            It is possible to upgrade workflow implementation with workflows in flight using
            the <see cref="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)"/> method.  The essential requirement
            is that the new implementation must execute the same logic for the decision steps
            that have already been executed and recorded to the history fo a previous workflow 
            to maintain workflow determinism.  Subsequent unexecuted steps, are free to implement
            different logic.
            </para>
            <note>
            Cadence attempts to detect when replaying workflow performs actions that are different
            from those recorded as history and will fail the workflow when this occurs.
            </note>
            <para>
            Upgraded workflows will use <see cref="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)"/> to indicate
            where upgraded logic has been inserted into the workflow.  You'll pass a <b>changeId</b>
            string that identifies the change being made.  This can be anything you wish as long as
            it's not empty and is unique for each change made to the workflow.  You'll also pass
            <b>minSupported</b> and <b>maxSupported</b> integers.  <b>minSupported</b> specifies the 
            minimum version of the workflow implementation that will be allowed to continue to
            run.  Workflows start out with their version set to <see cref="F:Neon.Cadence.WorkflowBase.DefaultVersion"/>
            or <b>(-1)</b> and this will often be passed as <b>minSupported</b> such that upgraded
            workflow implementations will be able to take over newly scheduled workflows.  
            <b>maxSupported</b> essentially specifies the current version of the workflow 
            implementation. 
            </para>
            <para>
            When <see cref="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)"/> called and is not being replayed
            from the workflow history, the method will record the <b>changeId</b> and <b>maxSupported</b>
            values to the workflow history.  When this is being replayed, the method will simply
            return the <b>maxSupported</b> value from the history.  Let's go through an example demonstrating
            how this can be used.  Let's say we start out with a simple two step workflow that 
            first calls <b>ActivityA</b> and then calls <b>ActivityB</b>:
            </para>
            <code lang="C#">
            public class MyWorkflow : WorkflowBase
            {
                protected async Task&lt;byte[]&gt; RunAsync(byte[] args)
                {
                    await CallActivity&lt;ActivityA&gt;();    
                    await CallActivity&lt;ActivityB&gt;();    
            
                    return null;
                }
            }
            </code>
            <para>
            Now, let's assume that we need to replace the call to <b>ActivityA</b> with a call to
            <b>ActivityC</b>.  If there is no chance of any instances of <B>MyWorkflow</B> being
            in flight, you could simply redepoy the recoded workflow:
            </para>
            <code lang="C#">
            public class MyWorkflow : WorkflowBase
            {
                protected async Task&lt;byte[]&gt; RunAsync(byte[] args)
                {
                    await CallActivity&lt;ActivityC&gt;();  // &lt;-- change
                    await CallActivity&lt;ActivityB&gt;();
            
                    return null;
                }
            }
            </code>
            <para>
            But, if instances of this workflow are in flight you'll need to deploy a backwards
            compatible workflow implementation that handles workflows that have already executed 
            <b>ActivityA</b> but haven't yet executed <b>ActivityB</b>.  You can accomplish this
            via:
            </para>
            <code lang="C#">
            public class MyWorkflow : WorkflowBase
            {
                protected async Task&lt;byte[]&gt; RunAsync(byte[] args)
                {
                    var version = await GetVersionAsync("Replace ActivityA", DefaultVersion, 1);    
            
                    switch (version)
                    {
                        case DefaultVersion:
                        
                            await CallActivity&lt;ActivityA&gt;();
                            break;
                            
                        case 1:
                        
                            await CallActivity&lt;ActivityC&gt;();  // &lt;-- change
                            break;
                    }
                    
                    await CallActivity&lt;ActivityB&gt;();
            
                    return null;
                }
            }
            </code>
            <para>
            This upgraded workflow calls <see cref="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)"/> passing
            <b>minSupported=DefaultVersion</b> and <b>maxSupported=1</b>  For workflow instances
            that have already executed <b>ActivityA</b>, <see cref="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)"/>
            will return <see cref="F:Neon.Cadence.WorkflowBase.DefaultVersion"/> and we'll call <b>ActivityA</b>, which will match
            what was recorded in the history.  For workflows that have not yet executed <b>ActivityA</b>,
            <see cref="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)"/> will return <b>1</b>, which we'll use as
            the indication that we can call <b>ActivityC</b>.
            </para>
            <para>
            Now, lets say we need to upgrade the workflow again and change the call for <b>ActivityB</b>
            to <b>ActivityD</b>, but only for workflows that have also executed <b>ActivityC</b>.  This 
            would look something like:
            </para>
            <code lang="C#">
            public class MyWorkflow : WorkflowBase
            {
                protected async Task&lt;byte[]&gt; RunAsync(byte[] args)
                {
                    var version = await GetVersionAsync("Replace ActivityA", DefaultVersion, 1);    
            
                    switch (version)
                    {
                        case DefaultVersion:
                        
                            await CallActivity&lt;ActivityA&gt;();
                            break;
                            
                        case 1:
                        
                            await CallActivity&lt;ActivityC&gt;();  // &lt;-- change
                            break;
                    }
                    
                    version = await GetVersionAsync("Replace ActivityB", 1, 2);    
            
                    switch (version)
                    {
                        case DefaultVersion:
                        case 1:
                        
                            await CallActivity&lt;ActivityB&gt;();
                            break;
                            
                        case 2:
                        
                            await CallActivity&lt;ActivityD&gt;();  // &lt;-- change
                            break;
                    }
                    
                    await CallActivity&lt;ActivityB&gt;();
            
                    return null;
                }
            }
            </code>
            <para>
            Notice that the second <see cref="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)"/> call passed a different
            change ID and also that the version range is now <b>1..2</b>.  The version returned will be
            <see cref="F:Neon.Cadence.WorkflowBase.DefaultVersion"/> or <b>1</b> if <b>ActivityA</b> and <b>ActivityB</b> were 
            recorded in the history or <b>2</b> if <b>ActivityC</b> was called.
            </para>
            </remarks>
        </member>
        <member name="T:Neon.Cadence.WorkflowBase.WorkflowKey">
            <summary>
            Used to map a Cadence client ID and workflow context ID into a
            key that can be used to dereference <see cref="F:Neon.Cadence.WorkflowBase.idToWorkflow"/>.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkflowBase.VariableActivity">
            <summary>
            Private activity used to set/get variable values.  This activity simply
            returns the arguments passed such that they'll be recorded in the workflow
            history.  This is intended to be executed as a local activity.
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowBase.DefaultVersion">
            <summary>
            The default workflow version returned by <see cref="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)"/> 
            when a version has not been set yet.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.GetWorkflowTypeKey(Neon.Cadence.CadenceClient,System.String)">
            <summary>
            Prepends the Cadence client ID to the workflow type name to generate the
            key used to dereference the <see cref="F:Neon.Cadence.WorkflowBase.nameToWorkflowType"/> dictionary.
            </summary>
            <param name="client">The Cadence client.</param>
            <param name="workflowTypeName">The workflow type name.</param>
            <returns>The prepended type name.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.Register(Neon.Cadence.CadenceClient,System.Type,System.String)">
            <summary>
            Registers a workflow type.
            </summary>
            <param name="client">The associated client.</param>
            <param name="workflowType">The workflow type.</param>
            <param name="workflowTypeName">The name used to identify the implementation.</param>
            <returns><c>true</c> if the workflow was already registered.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if a different workflow class has already been registered for <paramref name="workflowTypeName"/>.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.UnregisterClient(Neon.Cadence.CadenceClient)">
            <summary>
            Removes all type workflow type registrations for a Cadence client (when it's being disposed).
            </summary>
            <param name="client">The client being disposed.</param>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.GetWorkflowType(Neon.Cadence.CadenceClient,System.String)">
            <summary>
            Returns the .NET type implementing the named Cadence workflow.
            </summary>
            <param name="client">The Cadence client.</param>
            <param name="workflowType">The Cadence workflow type string.</param>
            <returns>The workflow .NET type or <c>null</c> if the type was not found.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.OnProxyRequestAsync(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.ProxyRequest)">
            <summary>
            Called to handle a workflow related request message received from the cadence-proxy.
            </summary>
            <param name="client">The client that received the request.</param>
            <param name="request">The request message.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.GetWorkflow(Neon.Cadence.CadenceClient,System.Int64)">
            <summary>
            Thread-safe method that maps a workflow ID to the corresponding workflow instance.
            </summary>
            <param name="client">The Cadence client.</param>
            <param name="contextId">The workflow's context ID.</param>
            <returns>The <see cref="T:Neon.Cadence.WorkflowBase"/> instance or <c>null</c> if the workflow was not found.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.OnInvokeAsync(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.WorkflowInvokeRequest)">
            <summary>
            Handles workflow invocation.
            </summary>
            <param name="client">The associated cadence client.</param>
            <param name="request">The request message.</param>
            <returns>The reply message.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.OnSignalAsync(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.WorkflowSignalInvokeRequest)">
            <summary>
            Handles workflow signals.
            </summary>
            <param name="client">The Cadence client.</param>
            <param name="request">The request message.</param>
            <returns>The reply message.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.OnQueryAsync(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.WorkflowQueryInvokeRequest)">
            <summary>
            Handles workflow queries.
            </summary>
            <param name="client">The Cadence client.</param>
            <param name="request">The request message.</param>
            <returns>The reply message.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.OnInvokeLocalActivity(Neon.Cadence.CadenceClient,Neon.Cadence.Internal.ActivityInvokeLocalRequest)">
            <summary>
            Handles workflow local activity invocations.
            </summary>
            <param name="client">The client the request was received from.</param>
            <param name="request">The request message.</param>
            <returns>The reply message.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.Initialize(Neon.Cadence.CadenceClient,System.Int64)">
            <summary>
            Called internally to initialize the workflow.
            </summary>
            <param name="client">The associated client.</param>
            <param name="contextId">The workflow's context ID.</param>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.RegisterHandlers(Neon.Cadence.CadenceClient,System.Int64)">
            <summary>
            Called internally to register any workflow query and signal handlers.
            </summary>
            <param name="client">The associated client.</param>
            <param name="contextId">The workflow's context ID.</param>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.Client">
            <summary>
            Returns the <see cref="T:Neon.Cadence.CadenceClient"/> managing this workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.Domain">
            <summary>
            Returns the domain hosting the workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.WorkflowId">
            <summary>
            Returns the original workflow ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.RunId">
            <summary>
            Returns the workflow's current run ID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.WorkflowTypeName">
            <summary>
            Returns the workflow type name.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.TaskList">
            <summary>
            Returns the task list where the workflow is executing.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])">
            <summary>
            Called by Cadence to execute a workflow.  Derived classes will need to implement
            their workflow logic here.
            </summary>
            <param name="args">The workflow arguments encoded into a byte array or <c>null</c>.</param>
            <returns>The workflow result encoded as a byte array or <c>null</c>.</returns>
            <remarks>
            <para>
            There a several Cadence restrictions you need to keep in mind when implementing
            your workflow logic.  These are necessary so that Cadence will be able to
            transparently and deterministically replay previously completed workflow steps
            when workflows need to be restarted due to failures or other reasons.
            </para>
            <note>
            <para>
            Workflow logic must be deterministic and idempotent:
            </para>
            <list type="bullet">
                <item>
                <para>
                The code in your <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> method must only rely on
                state and data returned by Cadence methods for determining what to do.
                This allows Cadence to replay previously completed workfow steps when
                a workflow needs to be rescheduled on another worker.
                </para>
                <para>
                This means that you must not call things like <see cref="P:System.DateTime.UtcNow"/>
                directly in your workflow because this will likely return a different 
                value every time it's called.  Instead, call  
                </para>
                </item>
                <item>
                <para>
                Workflows are inherently single threaded.  You should never explicitly
                create threads within <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> or use things like
                <see cref="M:System.Threading.Tasks.Task.Run(System.Action)"/> which schedule work on background threads.
                </para>
                <note>
                Workflows are allowed to run multiple activities in parallel and activities
                can be multi-threaded, it's just the workflow code itself that can't use
                threads because those will generally interfere with Cadence's ability to
                replay workflow steps deterministically.
                </note>
                </item>
                <item>
                Workflows must never obtain the current time by using methods like 
                <see cref="P:System.DateTime.UtcNow"/> directly.  Use <see cref="M:Neon.Cadence.WorkflowBase.UtcNowAsync"/>
                instead.
                </item>
                <item>
                Workflows should never directly query the environment where the workflow 
                code is currently running.  This includes things like environment variables,
                the machine host name or IP address, local files, etc.  You should generally
                use activities for this or obtain this indirectly state using workflow
                variables via <see cref="M:Neon.Cadence.WorkflowBase.SetVariableAsync(System.String,System.Byte[])"/> and 
                <see cref="M:Neon.Cadence.WorkflowBase.GetVariableAsync(System.String)"/>.  These methods ensure that Cadence 
                will record the variable state in the workflow history such that the
                same values will be returned when the workflow is replayed.
                </item>
                <item>
                Workflows should never call <see cref="M:System.Threading.Thread.Sleep(System.TimeSpan)"/> or 
                <see cref="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)"/>.  Use <see cref="M:Neon.Cadence.WorkflowBase.SleepAsync(System.TimeSpan)"/>
                or <see cref="M:Neon.Cadence.WorkflowBase.SleepUntilUtcAsync(System.DateTime)"/> instead.
                </item>
            </list>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.SetQueryHandlerAsync(System.String)">
            <summary>
            Registers a query handler with Cadence.
            </summary>
            <param name="queryName">The query name.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.SignalSubscribeAsync(System.String)">
            <summary>
            Subscribes a workflow to a signal.
            </summary>
            <param name="signalName">The signal name.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.GetVersionAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Used to implement backwards compatible changes to a workflow implementation.
            </summary>
            <param name="changeId">Identifies the change.</param>
            <param name="minSupported">
            Specifies the minimum supported version.  You may pass <see cref="F:Neon.Cadence.WorkflowBase.DefaultVersion"/> <b>(-1)</b>
            which will be set as the version for workflows that haven't been versioned yet.
            </param>
            <param name="maxSupported">Specifies the maximum supported version.</param>
            <returns>The workflow implementation version.</returns>
            <remarks>
            See the <see cref="T:Neon.Cadence.WorkflowBase"/> remarks for more information about how this works.
            </remarks>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.HasPreviousRunResultAsync">
            <summary>
            Returns <c>true</c> if there is a completion result from previous runs of
            this workflow.  This is useful for CRON workflows that would like to pass
            ending state from from one workflow run to the next.  This property
            indicates whether the last run (if any) returned any state.
            </summary>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.GetPreviousRunResultAsync">
            <summary>
            Returns the result from the last workflow run or <c>null</c>.  This is useful 
            for CRON workflows that would like to pass information from from one workflow
            run to the next.
            </summary>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.DisconnectContextAsync">
            <summary>
            Called when a workflow has been cancelled and additional cleanup related work
            must be performed.  Calling this method allows the workflow to continue
            executing activities after the parent workflow has been cancelled.
            </summary>
            <remarks>
            Under the covers, this replaces the underlying workflow context with
            a new disconnected context that is independent from the parent workflow
            context.  This method only substitutes the new context for the first call. 
            Subsequent calls won't actually do anything.
            </remarks>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.UtcNowAsync">
            <summary>
            Returns the current time (UTC).
            </summary>
            <returns>The current workflow time (UTC).</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.SetVariableAsync(System.String,System.Byte[])">
            <summary>
            Sets a workflow variable.
            </summary>
            <param name="name">The variable name (a case insensitive non-empty string).</param>
            <param name="value">The value being set encoded as a byte array.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <para>
            Workflows can set and retrieve values from workflow variables.  Variables
            are identified by a non-empty string name and can hold byte array or
            <c>null</c> values.  Use <see cref="M:Neon.Cadence.WorkflowBase.SetVariableAsync(System.String,System.Byte[])"/>
            to set a variable and <see cref="M:Neon.Cadence.WorkflowBase.GetVariableAsync(System.String)"/> to retrieve
            one.
            </para>
            <para>
            Cadence ensures that the variable values will be returned from the workflow
            history when the workflow is replayed to maintain workflow determinism.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.GetVariableAsync(System.String)">
            <summary>
            <para>
            Returns the value of a workflow variable.
            </para>
            <note>
            Workflow variables that have not been set will return <c>null</c>.
            </note>
            </summary>
            <param name="name">The variable name (a case insensitive non-empty string).</param>
            <returns>The variable value or <c>null</c> when the variable hasn't been set.</returns>
            <remarks>
            <para>
            Workflows can set and retrieve values from workflow variables.  Variables
            are identified by a non-empty string name and can hold byte array or
            <c>null</c> values.  Use <see cref="M:Neon.Cadence.WorkflowBase.SetVariableAsync(System.String,System.Byte[])"/>
            to set a variable and <see cref="M:Neon.Cadence.WorkflowBase.GetVariableAsync(System.String)"/> to retrieve
            one.
            </para>
            <para>
            Cadence ensures that the variable values will be returned from the workflow
            history when the workflow is replayed to maintain workflow determinism.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.SleepAsync(System.TimeSpan)">
            <summary>
            Pauses the workflow for at least the period specified.
            </summary>
            <param name="duration">The time to sleep.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if the operation was cancelled.</exception>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.SleepUntilUtcAsync(System.DateTime)">
            <summary>
            Pauses the workflow at least until the specified time UTC.
            </summary>
            <param name="wakeTimeUtc">The time to sleep.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown if the operation was cancelled.</exception>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.CallChildWorkflowAsync``1(System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)">
            <summary>
            Executes a child workflow and waits for it to complete.
            </summary>
            <param name="args">Optionally specifies the workflow arguments.</param>
            <param name="options">Optionally specifies the workflow options.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The workflow result encoded as a byte array.</returns>
            <exception cref="T:Neon.Cadence.CadenceException">
            An exception derived from <see cref="T:Neon.Cadence.CadenceException"/> will be be thrown 
            if the child workflow did not complete successfully.
            </exception>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.CallChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)">
            <summary>
            Executes a child workflow by workflow type name and waits for it to complete.
            </summary>
            <param name="workflowTypeName">The workflow type name.</param>
            <param name="args">Optionally specifies the workflow arguments.</param>
            <param name="options">Optionally specifies the workflow options.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The workflow result encoded as a byte array.</returns>
            <exception cref="T:Neon.Cadence.CadenceException">
            An exception derived from <see cref="T:Neon.Cadence.CadenceException"/> will be be thrown 
            if the child workflow did not complete successfully.
            </exception>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.StartChildWorkflowAsync``1(System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)">
            <summary>
            Starts a child workflow by type but does not wait for it to complete.
            </summary>
            <param name="args">Optionally specifies the workflow arguments.</param>
            <param name="options">Optionally specifies the workflow options.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>
            Returns an opaque <see cref="T:Neon.Cadence.ChildWorkflow"/> that identifies the new workflow
            and that can be passed to <see cref="M:Neon.Cadence.WorkflowBase.WaitForChildWorkflowAsync(Neon.Cadence.ChildWorkflow,System.Threading.CancellationToken)"/>,
            <see cref="M:Neon.Cadence.WorkflowBase.SignalChildWorkflowAsync(Neon.Cadence.ChildWorkflow,System.String,System.Byte[])"/> and
            <see cref="M:Neon.Cadence.WorkflowBase.CancelChildWorkflowAsync(Neon.Cadence.ChildWorkflow)"/>.
            </returns>
            <exception cref="T:Neon.Cadence.CadenceException">
            An exception derived from <see cref="T:Neon.Cadence.CadenceException"/> will be be thrown 
            if the child workflow did not complete successfully.
            </exception>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.StartChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)">
            <summary>
            Starts a child workflow by type name but does not wait for it to complete.
            </summary>
            <param name="name">The workflow name.</param>
            <param name="args">Optionally specifies the workflow arguments.</param>
            <param name="options">Optionally specifies the workflow options.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>
            Returns an opaque <see cref="T:Neon.Cadence.ChildWorkflow"/> that identifies the new workflow
            and that can be passed to <see cref="M:Neon.Cadence.WorkflowBase.WaitForChildWorkflowAsync(Neon.Cadence.ChildWorkflow,System.Threading.CancellationToken)"/>,
            <see cref="M:Neon.Cadence.WorkflowBase.SignalChildWorkflowAsync(Neon.Cadence.ChildWorkflow,System.String,System.Byte[])"/> and
            <see cref="M:Neon.Cadence.WorkflowBase.CancelChildWorkflowAsync(Neon.Cadence.ChildWorkflow)"/>.
            </returns>
            <exception cref="T:Neon.Cadence.CadenceException">
            An exception derived from <see cref="T:Neon.Cadence.CadenceException"/> will be be thrown 
            if the child workflow did not complete successfully.
            </exception>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.SignalChildWorkflowAsync(Neon.Cadence.ChildWorkflow,System.String,System.Byte[])">
            <summary>
            <para>
            Signals a child workflow.
            </para>
            <note>
            This method blocks until the child workflow is scheduled and
            actually started on a worker.
            </note>
            </summary>
            <param name="childWorkflow">
            Identifies the child workflow (this is returned by 
            <see cref="M:Neon.Cadence.WorkflowBase.StartChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>).
            </param>
            <param name="signalName">Specifies the signal name.</param>
            <param name="signalArgs">Optionally specifies the signal arguments.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.CancelChildWorkflowAsync(Neon.Cadence.ChildWorkflow)">
            <summary>
            Cancels a child workflow.
            </summary>
            <param name="childWorkflow">
            Identifies the child workflow (this is returned by 
            <see cref="M:Neon.Cadence.WorkflowBase.StartChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>).
            </param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.WaitForChildWorkflowAsync(Neon.Cadence.ChildWorkflow,System.Threading.CancellationToken)">
            <summary>
            Waits for a child workflow to complete.
            </summary>
            <param name="childWorkflow">
            Identifies the child workflow (this is returned by 
            <see cref="M:Neon.Cadence.WorkflowBase.StartChildWorkflowAsync(System.String,System.Byte[],Neon.Cadence.Internal.ChildWorkflowOptions,System.Threading.CancellationToken)"/>).
            </param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The workflow results.</returns>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.CallActivityAsync``1(System.Byte[],Neon.Cadence.Internal.ActivityOptions,System.Threading.CancellationToken)">
            <summary>
            Executes an activity and waits for it to complete.
            </summary>
            <param name="args">Optionally specifies the activity arguments.</param>
            <param name="options">Optionally specifies the activity options.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The activity result encoded as a byte array.</returns>
            <exception cref="T:Neon.Cadence.CadenceException">
            An exception derived from <see cref="T:Neon.Cadence.CadenceException"/> will be be thrown 
            if the child workflow did not complete successfully.
            </exception>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.CallActivityAsync(System.String,System.Byte[],Neon.Cadence.Internal.ActivityOptions,System.Threading.CancellationToken)">
            <summary>
            Executes an activity with a specific activity type name and waits for it to complete.
            </summary>
            <param name="activityTypeName">Identifies the activity.</param>
            <param name="args">Optionally specifies the activity arguments.</param>
            <param name="options">Optionally specifies the activity options.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The activity result encoded as a byte array.</returns>
            <exception cref="T:Neon.Cadence.CadenceException">
            An exception derived from <see cref="T:Neon.Cadence.CadenceException"/> will be be thrown 
            if the child workflow did not complete successfully.
            </exception>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.CallLocalActivityAsync``1(System.Byte[],Neon.Cadence.Internal.LocalActivityOptions,System.Threading.CancellationToken)">
            <summary>
            Executes a local activity and waits for it to complete.
            </summary>
            <typeparam name="TActivity">Specifies the local activity implementation type.</typeparam>
            <param name="args">Optionally specifies the activity arguments.</param>
            <param name="options">Optionally specifies any local activity options.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The activity result encoded as a byte array.</returns>
            <exception cref="T:Neon.Cadence.CadenceException">
            An exception derived from <see cref="T:Neon.Cadence.CadenceException"/> will be be thrown 
            if the child workflow did not complete successfully.
            </exception>
            <remarks>
            This method can be used to optimize activities that will complete quickly
            (within seconds).  Rather than scheduling the activity on any worker that
            has registered an implementation for the activity, this method will simply
            instantiate an instance of <typeparamref name="TActivity"/> and call its
            <see cref="M:Neon.Cadence.ActivityBase.RunAsync(System.Byte[])"/> method.
            </remarks>
            <exception cref="T:Neon.Cadence.CadenceEntityNotExistsException">Thrown if the named domain does not exist.</exception>
            <exception cref="T:Neon.Cadence.CadenceBadRequestException">Thrown when the request is invalid.</exception>
            <exception cref="T:Neon.Cadence.CadenceInternalServiceException">Thrown for internal Cadence cluster problems.</exception>
            <exception cref="T:Neon.Cadence.CadenceServiceBusyException">Thrown when Cadence is too busy.</exception>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.RestartAsync(System.Byte[],System.String,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan,Neon.Cadence.CadenceRetryPolicy)">
            <summary>
            Exits and completes the current running workflow and then restarts it, passing the
            optional workflow arguments.
            </summary>
            <param name="args">Optional arguments for the new run.</param>
            <param name="domain">Optional domain for the new run.</param>
            <param name="taskList">Optional task list for the new run.</param>
            <param name="executionToStartTimeout">Optional execution to start timeout for the new run.</param>
            <param name="scheduleToCloseTimeout">Optional schedule to close timeout for the new run.</param>
            <param name="scheduleToStartTimeout">Optional schedule to start timeout for the new run.</param>
            <param name="startToCloseTimeout">Optional start to close timeout for the new run.</param>
            <param name="retryPolicy">Optional retry policy for the new run.</param>
            <remarks>
            This works by throwing a <see cref="T:Neon.Cadence.CadenceWorkflowRestartException"/> that will be
            caught and handled by the base <see cref="T:Neon.Cadence.WorkflowBase"/> class.    You'll need to allow
            this exception to exit your <see cref="M:Neon.Cadence.WorkflowBase.RunAsync(System.Byte[])"/> method for this to work.
            </remarks>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.IsLogDebugEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.IsLogSInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.IsLogInfoEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.IsLogWarnEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.IsLogErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.IsLogSErrorEnabled">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Cadence.WorkflowBase.IsLogCriticalEnabled">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.IsLogLevelEnabled(Neon.Diagnostics.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogDebug(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogSInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogInfo(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogWarn(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogSError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogError(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogCritical(System.Object,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogDebug(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogSInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogInfo(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogWarn(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogSError(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogCritical(System.Object,System.Exception,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogMetrics(Neon.Diagnostics.LogLevel,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Double})">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogMetrics(Neon.Diagnostics.LogLevel,System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Cadence.WorkflowBase.LogMetrics(Neon.Diagnostics.LogLevel,System.Double[])">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Cadence.WorkflowCloseStatus">
            <summary>
            Enumerates the possible reasons why a workflow was closed.
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowCloseStatus.Completed">
            <summary>
            The workflow completed successfully.
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowCloseStatus.Failed">
            <summary>
            The workflow failed.
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowCloseStatus.Cancelled">
            <summary>
            The workflow was cancelled.
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowCloseStatus.Terminated">
            <summary>
            The workflow was terminated.
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowCloseStatus.Restarted">
            <summary>
            The workflow was restarted (aka <i>continued as new</i>).
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowCloseStatus.Timedout">
            <summary>
            The workflow timed out.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkflowConfig">
            <summary>
            Describes a workflow's configuration.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowConfig.TaskList">
            <summary>
            Identifies the task list where the workflow was scheduled.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowConfig.TaskListKind">
            <summary>
            
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowConfig.ExecutionStartToCloseTimeout">
            <summary>
            Maximum time the entire workflow may take to complete end-to-end.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowConfig.TaskStartToCloseTimeoutSeconds">
            <summary>
            Maximum time a workflow task/decision may take to complete.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowConfig.ChildPolicy">
            <summary>
            The termination policy to apply to the child workflow when
            the parent workflow is terminated.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkflowDetails">
            <summary>
            Describes a workflow execution in detail.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowDetails.Configuration">
            <summary>
            Describes the workflow's configuration.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowDetails.Execution">
            <summary>
            Describes the workflow's execution status.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowDetails.Activities">
            <summary>
            Describes the workflow's scheduled and executing activities.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkflowIdReusePolicy">
            <summary>
            Enumerates the workflow ID reuse policies.
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowIdReusePolicy.AllowDuplicateFailedOnly">
            <summary>
            Allows starting a workflow with the same ID as another workflow when
            that workflow is not running and the last execution close state 
            is in [terminated, cancelled, timeouted, failed].
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowIdReusePolicy.AllowDuplicate">
            <summary>
            Allows starting a workflow with the same ID as another workflow when
            that workflow is not running for any reason.
            </summary>
        </member>
        <member name="F:Neon.Cadence.WorkflowIdReusePolicy.RejectDuplicate">
            <summary>
            Prohibits starting a workflow with the same ID as another workflow,
            running or not.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkflowMethodMap">
            <summary>
            Maps workflow query and signal names to the methods implementing the queries
            and signals for a given workflow type.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkflowMethodMap.Create(System.Type)">
            <summary>
            Constructs a query/signal method map for a workflow type.
            </summary>
            <param name="workflowType">The workflow type.</param>
            <returns>The <see cref="T:Neon.Cadence.WorkflowMethodMap"/>.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowMethodMap.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkflowMethodMap.GetSignalMethod(System.String)">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the handler for a given signal.
            </summary>
            <param name="name">Ths signal name.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> for the handler or <c>null</c> when there
            is no handler for the named signal.
            </returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowMethodMap.GetQueryMethod(System.String)">
            <summary>
            Returns the <see cref="T:System.Reflection.MethodInfo"/> for the handler for a given query.
            </summary>
            <param name="name">Ths query name.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> for the handler or <c>null</c> when there
            is no handler for the named query.
            </returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowMethodMap.GetSignalNames">
            <summary>
            Returns the names of the mapped signals.
            </summary>
            <returns>The signal name list.</returns>
        </member>
        <member name="M:Neon.Cadence.WorkflowMethodMap.GetQueryNames">
            <summary>
            Returns the names of the mapped queries.
            </summary>
            <returns>The query name list.</returns>
        </member>
        <member name="T:Neon.Cadence.WorkflowOptions">
            <summary>
            Specifies the options to use when starting a workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkflowOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowOptions.WorkflowId">
            <summary>
            Optionally specifies the business ID for a workflow.  This defaults
            to a generated UUID.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowOptions.ExecutionStartToCloseTimeout">
            <summary>
            Specifies the maximum time the workflow may run from start
            to finish.  This defaults to 365 days.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowOptions.DecisionTaskStartToCloseTimeout">
            <summary>
            Op[tionally specifies the time out for processing decision task from the time the worker
            pulled this task.  If a decision task is lost, it is retried after this timeout.
            This defaults to <b>10 seconds</b>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowOptions.WorkflowIdReusePolicy">
            <summary>
            Controls how Cadence handles workflows that attempt to reuse workflow IDs.
            This defaults to <see cref="F:Neon.Cadence.WorkflowIdReusePolicy.AllowDuplicateFailedOnly"/>.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowOptions.RetryPolicy">
            <summary>
            RetryPolicy - Optional retry policy for workflow. If a retry policy is specified, in case of workflow failure
            server will start new workflow execution if needed based on the retry policy.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowOptions.CronSchedule">
            <summary>
            Optionally specifies a recurring schedule for the workflow.  This can be set to a string specifying
            the minute, hour, day of month, month, and day of week scheduling parameters using the standard Linux
            CRON format described here: <a href="https://en.wikipedia.org/wiki/Cron"/>
            </summary>
            <remarks>
            <para>
            Cadence accepts a CRON string formatted as a single line of text with 5 parameters separated by
            spaces.  The parameters specified the minute, hour, day of month, month, and day of week values:
            </para>
            <code>
            ┌───────────── minute (0 - 59)
            │ ┌───────────── hour (0 - 23)
            │ │ ┌───────────── day of the month (1 - 31)
            │ │ │ ┌───────────── month (1 - 12)
            │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)
            │ │ │ │ │
            │ │ │ │ │
            * * * * * 
            </code>
            <para>
            Each parameter may be set to one of:
            </para>
            <list type="table">
            <item>
                <term><b>*</b></term>
                <description>
                Matches any value.
                </description>
            </item>
            <item>
                <term><b>value</b></term>
                <description>
                Matches a specific integer value.
                </description>
            </item>
            <item>
                <term><b>value1-value2</b></term>
                <description>
                Matches a range of values to be matched (inclusive).
                </description>
            </item>
            <item>
                <term><b>valiue1,value2,...</b></term>
                <description>
                Matches a list of values to be matched.
                </description>
            </item>
            <item>
                <term><b>value1/value2</b></term>
                <description>
                Matches values starting at <b>value1</b> and then those incremented by <b>value2</b>.
                </description>
            </item>
            </list>
            <para>
            You can use this handy CRON calculator to see how this works: <a href="https://crontab.guru"/>
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Cadence.WorkflowOptions.Memo">
            <summary>
            Optionally specifies workflow metadata as a dictionary of named byte array values.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkflowOptions.ToInternal(System.String)">
            <summary>
            Converts the instance into an internal <see cref="T:Neon.Cadence.Internal.InternalStartWorkflowOptions"/>.
            </summary>
            <param name="taskList">The target task list.</param>
            <returns>The corresponding <see cref="T:Neon.Cadence.Internal.InternalStartWorkflowOptions"/>.</returns>
        </member>
        <member name="T:Neon.Cadence.WorkflowResetPoint">
            <summary>
            <para>
            Not sure what is for.
            </para>
            <note>
            I'm making this <c>internal</c> for now until we decide it makes sense
            to expose this to .NET workflow applications.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowResetPoint.BinaryChecksum">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowResetPoint.RunId">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowResetPoint.FirstDecisionCompletedId">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowResetPoint.CreatedTime">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowResetPoint.ExpiringTime">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowResetPoint.Resettable">
            <summary>
            Not sure what is.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkflowRun">
            <summary>
            Describes the state of an executed workflow.
            </summary>
        </member>
        <member name="M:Neon.Cadence.WorkflowRun.#ctor(System.String,System.String,System.String)">
            <summary>
            Internal constructor.
            </summary>
            <param name="workflowId">The original ID for the workflow.</param>
            <param name="runId">Optionally specifies the current run ID for the workflow.</param>
            <param name="domain">Optionally specifies the domain hosting the workflow,</param>
        </member>
        <member name="P:Neon.Cadence.WorkflowRun.WorkflowId">
            <summary>
            Returns the current ID for workflow execution.  This will be different
            than <see cref="P:Neon.Cadence.WorkflowRun.RunId"/> when the workflow has been continued as new
            or potentially restarted.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowRun.RunId">
            <summary>
            The original ID assigned to the workflow when it was started.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowRun.Domain">
            <summary>
            The domain hosting the workflow.
            </summary>
        </member>
        <member name="T:Neon.Cadence.WorkflowState">
            <summary>
            Describes the current state of a workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.Run">
            <summary>
            Describes the workflow run.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.TypeName">
            <summary>
            Identifies the workflow implementation.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.StartTime">
            <summary>
            Workflow start time or <c>null</c> if the workflow hasn't started yet.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.CloseTime">
            <summary>
            Workflow close time or <c>null</c> if the workflow hasn't completed yet.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.HasStarted">
            <summary>
            Returns <c>true</c> if the workflow has been started and is still running
            or has already completed.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.IsClosed">
            <summary>
            Returns <c>true</c> if the workflow has been completed.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.IsRunning">
            <summary>
            Returns <c>true</c> if the workflow is currently running.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.WorkflowCloseStatus">
            <summary>
            The status for a closed workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.HistoryLength">
            <summary>
            Workflow history length.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.ParentDomain">
            <summary>
            Identifies the domain where the parent workflow is running.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.ParentExecution">
            <summary>
            Identfies the parent workflow.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.ExecutionTime">
            <summary>
            The workflow execution time.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.Memo">
            <summary>
            Optional workflow metadata.
            </summary>
        </member>
        <member name="P:Neon.Cadence.WorkflowState.AutoResetPoints">
            <summary>
            <para>
            Not sure what is for.
            </para>
            <note>
            I'm making this <c>internal</c> for now until we decide it makes sense
            to expose this to .NET workflow applications.
            </note>
            </summary>
        </member>
    </members>
</doc>
