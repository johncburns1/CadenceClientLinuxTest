<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Docker</name>
    </assembly>
    <members>
        <member name="T:Neon.Docker.DockerClient">
            <summary>
            Implements a client that can submit commands to a Docker engine via the Docker Remote API.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerClient.ParseObject``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Parses a <see cref="T:Newtonsoft.Json.Linq.JObject"/> value into an instance of the specified
            type by converting it to JSON and then parsing that.
            </summary>
            <typeparam name="T">The desired output type.</typeparam>
            <param name="value">The input dynamic.</param>
            <returns>The parsed value.</returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.#ctor(Neon.Docker.DockerSettings)">
            <summary>
            Constructor.
            </summary>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Neon.Docker.DockerClient.Dispose">
            <summary>
            Releases all resources associated with the instance.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerClient.Dispose(System.Boolean)">
            <summary>
            Releases all associated resources.
            </summary>
            <param name="disposing">Pass <c>true</c> if we're disposing, <c>false</c> if we're finalizing.</param>
        </member>
        <member name="P:Neon.Docker.DockerClient.ApiVersion">
            <summary>
            Returns the version of the Docker Remote API implemented by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerClient.Settings">
            <summary>
            Returns the <see cref="T:Neon.Docker.DockerSettings"/>.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerClient.JsonClient">
            <summary>
            Returns the underlying <see cref="P:Neon.Docker.DockerClient.JsonClient"/>.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerClient.GetUri(System.String,System.String)">
            <summary>
            Returns the URI for a specific command.
            </summary>
            <param name="command">The command name.</param>
            <param name="item">The optionak sub item.</param>
            <returns>The command URI.</returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Ping the remote Docker engine to verify that it's ready.
            </summary>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns><c>true</c> if ready.</returns>
            <remarks>
            <note>
            This method does not use a <see cref="T:Neon.Retry.IRetryPolicy"/>.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Docker.DockerClient.WaitUntilReadyAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Waits for the Docker engine or Swarm manager to be ready to accept 
            requests.
            </summary>
            <param name="timeout">The maximum timne to wait (defaults to 120 seconds).</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <para>
            The Swarm Manager can return unexpected HTTP response codes when it is
            not ready to accept requests.  For example, a request to <b>/volumes</b>
            may return a <b>404: Not Found</b> response rather than the <b>503: Service Unavailable</b>
            that one would expect.   The server can return this even when <see cref="M:Neon.Docker.DockerClient.PingAsync(System.Threading.CancellationToken)"/>
            return successfully.
            </para>
            <para>
            This method attempts to ensure that the server is really ready.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Docker.DockerClient.NetworkCreateAsync(Neon.Docker.DockerNetwork,System.Threading.CancellationToken)">
            <summary>
            Creates a Docker network.
            </summary>
            <param name="network">The network details.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A <see cref="T:Neon.Docker.NetworkCreateResponse"/>.</returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.NetworkListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists the networks managed by the Docker engine.
            </summary>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A list of <see cref="T:Neon.Docker.DockerNetwork"/> instances.</returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.NetworkInspect(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns details about a specific Docker network.
            </summary>
            <param name="nameOrId">The network name or ID.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A <see cref="T:Neon.Docker.DockerNetwork"/> instance.</returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.NetworkRemove(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a Docker network.
            </summary>
            <param name="nameOrId">The network name or ID.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.NodeListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists the swarm nodes.
            </summary>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The node list.</returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.ServiceListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists the services deployed to a Docker Swarm.
            </summary>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A <see cref="T:Neon.Docker.ServiceListResponse"/></returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.VolumeListAsync(System.Threading.CancellationToken)">
            <summary>
            Lists the volumes managed by the Docker engine.
            </summary>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>A <see cref="T:Neon.Docker.VolumeListResponse"/></returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.VolumeCreate(System.String,System.String,System.Threading.CancellationToken,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Creates a Docker volume.
            </summary>
            <param name="name">The optional volume name (Docker will generate a name if this is not specified).</param>
            <param name="driver">The optional volume driver name (defaults to <c>local).</c></param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <param name="driverOpts">The custom driver options.</param>
            <returns></returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.VolumeInspect(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns information about a Docker volume.
            </summary>
            <param name="nameOrId">The volume name or ID.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The <see cref="T:Neon.Docker.DockerVolume"/>.</returns>
        </member>
        <member name="M:Neon.Docker.DockerClient.VolumeRemove(System.String,System.Threading.CancellationToken)">
            <summary>
            Removes a Docker volume.
            </summary>
            <param name="nameOrId">The volume name or ID.</param>
            <param name="cancellationToken">Optional cancellation token.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Neon.Docker.DockerSettings">
            <summary>
            Specifies the configuration settings for a <see cref="T:Neon.Docker.DockerClient"/>.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerSettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerSettings.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Constructs settings using a DNS hostname for the Docker engine.
            </summary>
            <param name="host">Engine hostname.</param>
            <param name="port">Optional TCP port (defaults to <see cref="F:Neon.Net.NetworkPorts.Docker"/> [<b>2375</b>]).</param>
            <param name="secure">Optionally specifies that the connection will be secured via TLS (defaults to <c>false</c>).</param>
        </member>
        <member name="M:Neon.Docker.DockerSettings.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Constructs settings using an <see cref="T:System.Net.IPAddress"/> for the Docker engine.
            </summary>
            <param name="address">The engine IP address.</param>
            <param name="port">Optional TCP port (defaults to <see cref="F:Neon.Net.NetworkPorts.Docker"/> [<b>2375</b>]).</param>
            <param name="secure">Optionally specifies that the connection will be secured via TLS (defaults to <c>false</c>).</param>
        </member>
        <member name="M:Neon.Docker.DockerSettings.#ctor(System.String)">
            <summary>
            Constructs settings from a URI.  Note that you may specify a Unix domain
            socket like: <b>unix:///var/run/docker/sock</b>.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="P:Neon.Docker.DockerSettings.Uri">
            <summary>
            Returns the target engine's base URI.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerSettings.RetryPolicy">
            <summary>
            The <see cref="T:Neon.Retry.IRetryPolicy"/> to be used when submitting requests to docker.
            This defaults to a reasonable <see cref="T:Neon.Retry.ExponentialRetryPolicy"/> using the
            <see cref="M:Neon.Retry.TransientDetector.NetworkOrHttp(System.Exception)"/> transient detector.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerSettings.CreateClient">
            <summary>
            Creates a <see cref="T:Neon.Docker.DockerClient"/> using the settings.
            </summary>
            <returns>The created <see cref="T:Neon.Docker.DockerClient"/>.</returns>
        </member>
        <member name="T:Neon.Docker.INormalizable">
            <summary>
            Describes types that implement the <see cref="M:Neon.Docker.INormalizable.Normalize"/> method that
            recursively ensures that any <b>null</b> class or list related properties 
            are replaced with instances with default values or empty lists.
            </summary>
        </member>
        <member name="M:Neon.Docker.INormalizable.Normalize">
            <summary>
            Recursively ensures ensures that any <b>null</b> class or list
            related properties are replaced with instances with default 
            values or empty lists.
            </summary>
        </member>
        <member name="T:Neon.Docker.DockerResponse">
            <summary>
            The base Docker API response class.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerResponse.#ctor(Neon.Net.JsonResponse)">
            <summary>
            Constructs the response from a lower-level <see cref="T:Neon.Net.JsonResponse"/>.
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:Neon.Docker.DockerResponse.Warnings">
            <summary>
            Lists any warnings returned by the Docker engine.
            </summary>
        </member>
        <member name="T:Neon.Docker.DockerNetwork">
            <summary>
            Describes a Docker network.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerNetwork.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerNetwork.#ctor(System.Object)">
            <summary>
            Constructs an instance from the dynamic network information returned by
            the Docker engine.
            </summary>
            <param name="source">The dynamic source value.</param>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Name">
            <summary>
            The network name.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.CheckDuplicate">
            <summary>
            Used when creating a network to have the Docker Engine verify that
            network does not already exist.  This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Id">
            <summary>
            Returns the network ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Scope">
            <summary>
            Returns the network scope.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Driver">
            <summary>
            The network driver.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.EnableIPv6">
            <summary>
            Indicates if the network is IPv6 enabled.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Internal">
            <summary>
            Indicates if the network is internal.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Ipam">
            <summary>
            The network's IPAM configuration.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Containers">
            <summary>
            Lists the containers attached to the network.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Options">
            <summary>
            Lists the network options.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetwork.Labels">
            <summary>
            Lists the network labels.
            </summary>
        </member>
        <member name="T:Neon.Docker.DockerNetworkContainer">
            <summary>
            Describes a container attached to a Docker network.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerNetworkContainer.#ctor(System.Object)">
            <summary>
            Constructs an instance from the dynamic attached container information
            returned by docker.
            </summary>
            <param name="source">The dynamic source value.</param>
        </member>
        <member name="P:Neon.Docker.DockerNetworkContainer.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetworkContainer.Id">
            <summary>
            Returns the container's ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetworkContainer.EndpointId">
            <summary>
            Returns the container's endpoint ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetworkContainer.MacAddress">
            <summary>
            Returns the container's MAC address.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetworkContainer.IPv4Address">
            <summary>
            Returns the container's IPv4 address.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetworkContainer.IPv6Address">
            <summary>
            Returns the container's IPv6 address.
            </summary>
        </member>
        <member name="T:Neon.Docker.DockerNetworkIpam">
            <summary>
            Describes a Docker network's IPAM configuration.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerNetworkIpam.#ctor(System.Object)">
            <summary>
            Constructs an instance from the dynamic network IPAM information
            returned by docker.
            </summary>
            <param name="source">The dynamic source value.</param>
        </member>
        <member name="P:Neon.Docker.DockerNetworkIpam.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetworkIpam.Driver">
            <summary>
            Returns the IPAM driver.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNetworkIpam.Config">
            <summary>
            Returns the IPAM configuration settings.
            </summary>
        </member>
        <member name="T:Neon.Docker.NetworkCreateResponse">
            <summary>
            The response from a <see cref="M:Neon.Docker.DockerClient.NetworkCreateAsync(Neon.Docker.DockerNetwork,System.Threading.CancellationToken)"/> command.
            </summary>
        </member>
        <member name="M:Neon.Docker.NetworkCreateResponse.#ctor(Neon.Net.JsonResponse)">
            <summary>
            Constructs the response from a lower-level <see cref="T:Neon.Net.JsonResponse"/>.
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:Neon.Docker.NetworkCreateResponse.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.NetworkCreateResponse.Id">
            <summary>
            Returns the ID for the created network.
            </summary>
        </member>
        <member name="T:Neon.Docker.DockerNode">
            <summary>
            Describes a cluster node.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerNode.#ctor(System.Object)">
            <summary>
            Constructs an instance from the dynamic node information returned by
            the Docker engine.
            </summary>
            <param name="source">The dynamic source value.</param>
        </member>
        <member name="P:Neon.Docker.DockerNode.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.ID">
            <summary>
            Returns the node ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.CreatedAt">
            <summary>
            Returns the time the node was created.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.UpdatedAt">
            <summary>
            Returns the time the node was updated.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.Role">
            <summary>
            Returns the node role (currently one of <b>"master"</b> or <b>"worker"</b>).
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.Availability">
            <summary>
            Returns the node availability.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.Labels">
            <summary>
            Returns the node labels.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.Hostname">
            <summary>
            Returns the node hostname.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.Architecture">
            <summary>
            Returns the node CPU architecture.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.OS">
            <summary>
            Returns the node operating system.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.NanoCPUs">
            <summary>
            Returns the available CPU capacity, 
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.MemoryBytes">
            <summary>
            Returns the bytes of available memory.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.EngineVersion">
            <summary>
            Returns the Docker engine version.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.State">
            <summary>
            Returns the node state.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.Addr">
            <summary>
            Returns the node IP address.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNode.ManagerStatus">
            <summary>
            Returns management status for cluster master nodes.
            </summary>
        </member>
        <member name="T:Neon.Docker.DockerNodeManagerStatus">
            <summary>
            Describes a Docker manager node's status.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerNodeManagerStatus.#ctor(System.Object)">
            <summary>
            Constructs an instance from the dynamic node manager status returned by
            the Docker engine.
            </summary>
            <param name="source">The dynamic source value.</param>
        </member>
        <member name="P:Neon.Docker.DockerNodeManagerStatus.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNodeManagerStatus.Leader">
            <summary>
            Indicates whether the parent node is currently the swarm leader.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNodeManagerStatus.Reachability">
            <summary>
            Provides an indication of this manager node is able to communicate 
            with a quorum of other managers.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerNodeManagerStatus.Addr">
            <summary>
            Returns the address and port of the current lead manager node.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceBindOptions">
            <summary>
            Mounted directory bind options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceBindOptions.Propagation">
            <summary>
            Named setting for a resource.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceBindOptions.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceConfig">
            <summary>
            Service config.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceConfig.ConfigID">
            <summary>
            The Docker secret ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceConfig.ConfigName">
            <summary>
            The secret name.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceConfig.File">
            <summary>
            Secret file information.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceConfig.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceContainerSpec">
            <summary>
            Service container/task specification.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Image">
            <summary>
            <para>
            The image used to provision the service container.
            </para>
            <note>
            This may include the image's <b>@sha256:...</b> appended to the tag.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.ImageWithoutSHA">
            <summary>
            Returns the <see cref="P:Neon.Docker.ServiceContainerSpec.Image"/> without any SHA hash appended to the tag.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Labels">
            <summary>
            The container labels formatted as <b>LABEL=VALUE</b>.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Command">
            <summary>
            The command to be run in the image.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Args">
            <summary>
            Arguments to the command.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Hostname">
            <summary>
            Hostname for the container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Env">
            <summary>
            Environment variables of the form <b>VARIABLE=VALUE</b> or <b>VARIABLE</b>
            to pass environment variables from the Docker host.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Dir">
            <summary>
            The container working directory where commands will run.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.User">
            <summary>
            The user within the container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Groups">
            <summary>
            The list of additional groups that the command will run as.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Privileges">
            <summary>
            Security options for the container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.TTY">
            <summary>
            Optionally create a pseudo TTY.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.OpenStdin">
            <summary>
            Open STDIN.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.ReadOnly">
            <summary>
            Optionally mount the service container file system as read-only.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Mounts">
            <summary>
            Specifies file system mounts to be added to the service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.StopSignal">
            <summary>
            Signal to be used to gracefully stop the service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.StopGracePeriod">
            <summary>
            Time to wait for a service container to stop gracefully before killing it
            forcefully (in nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.HealthCheck">
            <summary>
            Specifies how service container health check are to be performed.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Hosts">
            <summary>
            <para>
            Lists the hostname/IP address mappings to add to the service container
            [/etc/hosts] file.  Each entry is formatted like:
            </para>
            <example>
            IP_address canonical_hostname [aliases...]
            </example>
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.DNSConfig">
            <summary>
            DNS resolver configuration.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Secrets">
            <summary>
            Specifies the secrets to be exposed to the service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Configs">
            <summary>
            Specifies the configs to be exposed to the service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceContainerSpec.Isolation">
            <summary>
            <b>Windows Only:</b> Specifies the isolation technology to be used
            for the service containers.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceContainerSpec.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceCredentialSpec">
            <summary>
            <b>Windows-only:</b> Specifies how Windows credentials are to be
            loaded for the container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceCredentialSpec.File">
            <summary>
            Specifies the file on the Docker host with the credentials.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceCredentialSpec.Registry">
            <summary>
            Specifies the Windows registry location on the Docker host with the
            credentials.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceCredentialSpec.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceDetails">
            <summary>
            <para>
            Holds the details describing a running Docker swarm service
            from the service list or inspection REST APIs.
            </para>
            <note>
            This type matches the Docker API v1.35.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.ID">
            <summary>
            The service ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.Version">
            <summary>
            Service update version information.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.CreatedAt">
            <summary>
            Time when the service was created (as a string).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.CreatedAtUtc">
            <summary>
            Returns the time (UTC) the service was created (as a <see cref="T:System.DateTime"/>).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.UpdatedAt">
            <summary>
            Time when the service was last created or updated (as a string).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.UpdatedAtUtc">
            <summary>
            Returns the time (UTC) the service was last created or updated (as a <see cref="T:System.DateTime"/>).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.Spec">
            <summary>
            The service specification.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.PreviousSpec">
            <summary>
            Optionally describes the service's state before the last update.
            This is the state the service will revert to when it's rolled
            back.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.Endpoint">
            <summary>
            Describes the service's current endpoint state.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDetails.UpdateStatus">
            <summary>
            Describes the service update status.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceDetails.Normalize">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Docker.ServiceDetails.GetEnv(System.String)">
            <summary>
            Returns the value of an environment variable for the current service deployment.
            </summary>
            <param name="variable">The variable name (case insensitive).</param>
            <returns>The value of the variable or <c>null</c> if the variable doesn't exist.</returns>
        </member>
        <member name="T:Neon.Docker.ServiceDiscreteResourceSpec">
            <summary>
            Describes name-valued user-defined resource setting.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDiscreteResourceSpec.Kind">
            <summary>
            Identifies the setting.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDiscreteResourceSpec.Value">
            <summary>
            The setting value <c>long</c>.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceDiscreteResourceSpec.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceDnsConfig">
            <summary>
            Specifies service container DNS related options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDnsConfig.Nameservers">
            <summary>
            IP addresses of the nameservers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDnsConfig.Search">
            <summary>
            Domain search list for hostname lookups.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceDnsConfig.Options">
            <summary>
            Low-level internal resolver options.  See: http://manpages.ubuntu.com/manpages/precise/man5/resolvconf.conf.5.html
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceDnsConfig.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceEndpoint">
            <summary>
            Service endpoint and network settings.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpoint.Spec">
            <summary>
            Specifies the service endpoint mode and ports to be exposed.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpoint.Ports">
            <summary>
            Details the network ports actually exposed by the service tasks.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpoint.VirtualIPs">
            <summary>
            Lists the virtual IP addresses assigned to this service on the 
            attached networks.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceEndpoint.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceEndpointMode">
            <summary>
            Service endpoint mode.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceEndpointMode.Vip">
            <summary>
            Assign a virtual IP address to the service and provide a load balancer.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceEndpointMode.DnsRR">
            <summary>
            Returns DNS resource records for the active service instances.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceEndpointPortConfig">
            <summary>
            Service port publication specification.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpointPortConfig.Name">
            <summary>
            The port name.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpointPortConfig.Protocol">
            <summary>
            Specifies the port protocol.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpointPortConfig.TargetPort">
            <summary>
            Specifies the internal port where external traffic
            will be forwarded within the service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpointPortConfig.PublishedPort">
            <summary>
            Specifies the port where the service receives traffic on the
            external network.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpointPortConfig.PublishMode">
            <summary>
            Specifies the port mode.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceEndpointPortConfig.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceEndpointSpec">
            <summary>
            Service endpoint specification.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpointSpec.Mode">
            <summary>
            Specifies how the Docker swarm will load balance traffic to the service tasks.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceEndpointSpec.Ports">
            <summary>
            Details the network ports exposed by the service tasks.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceEndpointSpec.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceFile">
            <summary>
            Configuration information for a Docker secret or config that
            is mapped into a service container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceFile.Name">
            <summary>
            Path to the target file within the container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceFile.UID">
            <summary>
            Identifies the user that owns the file.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceFile.GID">
            <summary>
            Identifies the group that owns the file.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceFile.Mode">
            <summary>
            <para>
            The Linux file mode for the file.
            </para>
            <note>
            This value is encoded as decimal.  You'll need to convert to octal to
            see what it looks like as standard Linux permissions.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceFile.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceGenericResources">
            <summary>
            Describes user-defined resource settings.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceGenericResources.NamedResourceSpec">
            <summary>
            Named setting for a resource.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceGenericResources.DiscreteResourceSpec">
            <summary>
            Discrete setting for a resource.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceGenericResources.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceGlobalSchedulingMode">
            <summary>
            Global scheduling mode options.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceGlobalSchedulingMode.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceHealthCheck">
            <summary>
            Specifies a custom service logging driver.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceHealthCheck.Test">
            <summary>
            Specifies the health test to be performed.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceHealthCheck.Interval">
            <summary>
            Time to wait between health checks (in nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceHealthCheck.Timeout">
            <summary>
            Time to wait before considering a health check to have hung (in nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceHealthCheck.Retries">
            <summary>
            Number of consecutive health check failures required to consider the container
            to be unhealhy.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceHealthCheck.StartPeriod">
            <summary>
            Time to wait for the container to start ands initialize before enforcing
            health check failures.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceHealthCheck.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceIsolationMode">
            <summary>
            <b>Windows Only:</b> Enumerates the isolation technologies
            to be used for the service containers.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceIsolationMode.Default">
            <summary>
            Use the default mode.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceIsolationMode.Process">
            <summary>
            Use process isolation.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceIsolationMode.HyperV">
            <summary>
            User Hyper-V isolation.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceListResponse">
            <summary>
            The response from a <see cref="M:Neon.Docker.DockerClient.ServiceListAsync(System.Threading.CancellationToken)"/> command.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceListResponse.#ctor(Neon.Net.JsonResponse)">
            <summary>
            Constructs the response from a lower-level <see cref="T:Neon.Net.JsonResponse"/>.
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:Neon.Docker.ServiceListResponse.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceListResponse.Services">
            <summary>
            Returns the list of service details returned by the Docker engine.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceLogDriver">
            <summary>
            Specifies a custom service logging driver.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceLogDriver.Name">
            <summary>
            Specifies the driver name.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceLogDriver.Options">
            <summary>
            Specifies the driver options.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceLogDriver.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceMode">
            <summary>
            Enumerates the service modes.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMode.Replicated">
            <summary>
            Service should deploy a specified number of replicas on nodes
            that satisfy the constraints.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMode.Global">
            <summary>
            Service should deploy on all hosts that satisfy the constraints.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceMount">
            <summary>
            Service mount specification.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceMount.Target">
            <summary>
            Specifies where the mount will appear within the service containers. 
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceMount.Source">
            <summary>
            Specifies the external mount source
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceMount.Type">
            <summary>
            The mount type.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceMount.ReadOnly">
            <summary>
            Specifies whether the mount is to be read-only within the service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceMount.Consistency">
            <summary>
            Specifies the mount consistency.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceMount.BindOptions">
            <summary>
            Specifies the bind propagation mode.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceMount.VolumeOptions">
            <summary>
            Optionally specifies volume mount configuration options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceMount.TmpfsOptions">
            <summary>
            Optionally specifies Tempfs mount configuration options.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceMount.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceMountBindPropagation">
            <summary>
            Enumerates the mount propagation options.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountBindPropagation.RPrivate">
            <summary>
            RPrivate.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountBindPropagation.Shared">
            <summary>
            Shared.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountBindPropagation.Slave">
            <summary>
            Slave.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountBindPropagation.Private">
            <summary>
            Private.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountBindPropagation.RShared">
            <summary>
            RShared.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountBindPropagation.RSlave">
            <summary>
            RSlave.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceMountConsistency">
            <summary>
            Enumerates the service mount consistency options
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountConsistency.Default">
            <summary>
            Default consistency.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountConsistency.Consistent">
            <summary>
            Consistent.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountConsistency.Cached">
            <summary>
            Cached.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountConsistency.Delegated">
            <summary>
            Delegated.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceMountType">
            <summary>
            Enumerates the service mount types.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountType.Volume">
            <summary>
            Mount a Docker volume.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountType.Bind">
            <summary>
            Mount a directory from the Docker host.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceMountType.Tmpfs">
            <summary>
            Create and mount a tmpfs.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceNamedResourceSpec">
            <summary>
            Describes name-valued user-defined resource setting.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceNamedResourceSpec.Kind">
            <summary>
            Identifies the setting.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceNamedResourceSpec.Value">
            <summary>
            The setting value string.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceNamedResourceSpec.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceNetwork">
            <summary>
            Service container spread placement settings.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceNetwork.Target">
            <summary>
            Target network ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceNetwork.Aliases">
            <summary>
            Network aliases (network IDs).
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceNetwork.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServicePlacement">
            <summary>
            Service container placement options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePlacement.Constraints">
            <summary>
            Service constraints formatted as <b>CONSTRAINT==VALUE</b> or <b>CONSTRAINT!=VALUE</b>.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePlacement.Preferences">
            <summary>
            Service placement preferences.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePlacement.Platforms">
            <summary>
            Specifies the platforms where the service containers may be deployed or empty
            when there is no constraints.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServicePlacement.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServicePlacementPreferences">
            <summary>
            Service container placement preferences.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePlacementPreferences.Spread">
            <summary>
            Spread swarm orchestrator options.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServicePlacementPreferences.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServicePlacementSpreadSettings">
            <summary>
            Service container spread placement settings.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePlacementSpreadSettings.SpreadDescriptor">
            <summary>
            Label descriptor, such as: engine.labels.az
            </summary>
        </member>
        <member name="M:Neon.Docker.ServicePlacementSpreadSettings.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServicePlatform">
            <summary>
            Service container spread placement settings.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePlatform.Architecture">
            <summary>
            Specifies the hardware architecture (like: <b>x86_64</b>).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePlatform.OS">
            <summary>
            Specifies the operating system (like: <b>linux</b> or <b>windows</b>).
            </summary>
        </member>
        <member name="M:Neon.Docker.ServicePlatform.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServicePortMode">
            <summary>
            Enumerates the service port modes.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServicePortMode.Ingress">
            <summary>
            Publish service ports to the Docker Swarm ingress mesh network.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServicePortMode.Host">
            <summary>
            Publish service ports to the local Docker host network.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServicePortProtocol">
            <summary>
            Enumerates the service port protocols.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServicePortProtocol.Tcp">
            <summary>
            TCP
            </summary>
        </member>
        <member name="F:Neon.Docker.ServicePortProtocol.Udp">
            <summary>
            UDP
            </summary>
        </member>
        <member name="T:Neon.Docker.ServicePrivileges">
            <summary>
            Security options for service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePrivileges.CredentialSpec">
            <summary>
            <b>Windows Only:</b> Windows container credential specification.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServicePrivileges.SELinuxContext">
            <summary>
            SELinux labels for the container.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServicePrivileges.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceReplicatedSchedulingMode">
            <summary>
            Replicated scheduling mode options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceReplicatedSchedulingMode.Replicas">
            <summary>
            The number of service replicas (tasks/containers).
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceReplicatedSchedulingMode.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceResources">
            <summary>
            Specifies the service resource requirements and limits.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceResources.Limits">
            <summary>
            Specifies resource limits for service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceResources.Reservations">
            <summary>
            Specifies resource reservations for service containers.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceResources.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceResourceSettings">
            <summary>
            Describes system resource consumption settings.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceResourceSettings.NanoCPUs">
            <summary>
            CPU utilization expressed as billionths of a CPU.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceResourceSettings.MemoryBytes">
            <summary>
            Memory utilization as bytes.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceResourceSettings.GenericResources">
            <summary>
            User-defined generic resource settings.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceResourceSettings.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceRestartCondition">
            <summary>
            Enumerates the service restart conditions.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceRestartCondition.Any">
            <summary>
            Restart whenever a service task exits for any reason.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceRestartCondition.None">
            <summary>
            Never restart.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceRestartCondition.OnFailure">
            <summary>
            Restart only when a service task returns a non zero exit code.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceRestartPolicy">
            <summary>
            Specifies the restart policy for service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRestartPolicy.Condition">
            <summary>
            Specifies the condition under which a service container should be restarted.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRestartPolicy.Delay">
            <summary>
            Deplay between restart attempts (nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRestartPolicy.MaxAttempts">
            <summary>
            Specifies the maximum number of container restart attempts before giving up.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRestartPolicy.Window">
            <summary>
            Specifies the window of time during which the restart policy will be 
            enavluated (nanoseconds).
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceRestartPolicy.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceRollbackConfig">
            <summary>
            Specifies the rollback strategy for a service.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRollbackConfig.Parallelism">
            <summary>
            Maximum number of tasks to be rolled back in parallel during an rollback interation.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRollbackConfig.Delay">
            <summary>
            Time between rollback iterations (in nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRollbackConfig.FailureAction">
            <summary>
            Action to take if an rolled back task fails to run or stops running during the rollback.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRollbackConfig.Monitor">
            <summary>
            Time to monitor rolled back tasks for failure (in nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRollbackConfig.MaxFailureRatio">
            <summary>
            The fraction of tasks that may fail during an rollback before the failure ']
            action is invoked, specified as a floating point number between 0 and 1.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceRollbackConfig.Order">
            <summary>
            Specifies the order in which the running task is stopped and the rolledback task is started.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceRollbackConfig.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceRollbackFailureAction">
            <summary>
            Enumerates the service rollback failure actions.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceRollbackFailureAction.Pause">
            <summary>
            Pause the service task rollback on failure.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceRollbackFailureAction.Continue">
            <summary>
            Continue the service task rollback on failure.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceRollbackOrder">
            <summary>
            Enumerates the service task rollback order options.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceRollbackOrder.StopFirst">
            <summary>
            Stop the current service task before rolling back to the 
            previous settings.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceRollbackOrder.StartFirst">
            <summary>
            Rollback a current service task to the previous setting first
            before stopping the current task.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceSchedulingMode">
            <summary>
            Orchestration scheduling mode for the service.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSchedulingMode.Replicated">
            <summary>
            Replicated scheduling mode options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSchedulingMode.Global">
            <summary>
            Global scheduling mode options.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceSchedulingMode.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceSecret">
            <summary>
            Service secret.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSecret.SecretID">
            <summary>
            The Docker secret ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSecret.SecretName">
            <summary>
            The secret name.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSecret.File">
            <summary>
            Secret file information.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceSecret.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceSELinuxContext">
            <summary>
            SELinux labels for the container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSELinuxContext.Disable">
            <summary>
            Disable SELinux.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSELinuxContext.User">
            <summary>
            SELinux user label.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSELinuxContext.Role">
            <summary>
            SELinux role label.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSELinuxContext.Type">
            <summary>
            SELinux type label.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSELinuxContext.Level">
            <summary>
            SELinux level label.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceSELinuxContext.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceSpec">
            <summary>
            User modifiable service configuration.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSpec.Name">
            <summary>
            The service Name.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSpec.Labels">
            <summary>
            Service labels.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSpec.TaskTemplate">
            <summary>
            User modifiable service task configuration.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSpec.Mode">
            <summary>
            Service scheduling mode details.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSpec.UpdateConfig">
            <summary>
            Specifies the service update strategy.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSpec.RollbackConfig">
            <summary>
            Specifies the service update strategy.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSpec.Networks">
            <summary>
            Specifies attached networks.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceSpec.EndpointSpec">
            <summary>
            Service endpoint and Docker load balancer settings.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceSpec.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceTaskTemplate">
            <summary>
            User modifiable service task configuration.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.ContainerSpec">
            <summary>
            Service container settings.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.Resources">
            <summary>
            Specifies resource requirements for each service container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.RestartPolicy">
            <summary>
            Restart policy for service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.Placement">
            <summary>
            Service container placement options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.ForceUpdate">
            <summary>
            Counter that triggers an update even if no relevant service properties have changed.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.Runtime">
            <summary>
            Specifies the runtime for the service task executor.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.Networks">
            <summary>
            Specifies the networks to be attached to the service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.LogDriver">
            <summary>
            Optionally specifies the log driver to use for the service containers.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTaskTemplate.EndpointSpec">
            <summary>
            Optionally specifies the network endpoints for the service containers.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceTaskTemplate.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceTmpfsOptions">
            <summary>
            Volume Tempfs options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTmpfsOptions.SizeBytes">
            <summary>
            Specifies the <b>tmpfs</b> size in bytes.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceTmpfsOptions.Mode">
            <summary>
            Specifies the <b>tmpfs</b> file permission mode encoded as an integer.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceTmpfsOptions.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceUpdateConfig">
            <summary>
            Specifies the update strategy for a service.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateConfig.Parallelism">
            <summary>
            Maximum number of tasks to be updated in parallel during an update interation.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateConfig.Delay">
            <summary>
            Time between update interations (in nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateConfig.FailureAction">
            <summary>
            Action to take if an updated task fails to run or stops running during the update.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateConfig.Monitor">
            <summary>
            Time to monitor updated tasks for failure (in nanoseconds).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateConfig.MaxFailureRatio">
            <summary>
            The fraction of tasks that may fail during an update before the failure ']
            action is invoked, specified as a floating point number between 0 and 1.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateConfig.Order">
            <summary>
            Specifies the order in which the running task is stopped and the new task is started.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceUpdateConfig.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceUpdateFailureAction">
            <summary>
            Enumerates the service update failure actions.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateFailureAction.Pause">
            <summary>
            Pause scheduling updated service tasks on failure.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateFailureAction.Continue">
            <summary>
            Continue scheduling updated service tasks on failure.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateFailureAction.Rollback">
            <summary>
            Rollback the service to the previous state on failure.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceUpdateOrder">
            <summary>
            Enumerates the service taek update rollback order options.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateOrder.StopFirst">
            <summary>
            Stop a service task first and then start its replacement.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateOrder.StartFirst">
            <summary>
            Start a service replacement task first and before stopping
            the original task.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceUpdateState">
            <summary>
            Enumerates the service update states.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateState.Completed">
            <summary>
            Service update has completed.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateState.Updating">
            <summary>
            Service is actively being updated.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateState.Paused">
            <summary>
            Service update is paused.
            </summary>
        </member>
        <member name="F:Neon.Docker.ServiceUpdateState.RollbackCompleted">
            <summary>
            Service update has completed.
            </summary>
        </member>
        <member name="T:Neon.Docker.ServiceUpdateStatus">
            <summary>
            Describes the virtual IP address assigned to the service on
            a specific attached network.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateStatus.State">
            <summary>
            Indicates the saervice updating state.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateStatus.StartedAt">
            <summary>
            Indicates when the service update was started.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateStatus.StartedAtUtc">
            <summary>
            Returns the time (UTC) the service was started (as a <see cref="T:System.DateTime"/>).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateStatus.CompletedAt">
            <summary>
            Indicates when the service update was completed.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateStatus.CompletedAtUtc">
            <summary>
            Returns the time (UTC) the service update was completed (as a <see cref="T:System.DateTime"/>).
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceUpdateStatus.Message">
            <summary>
            A textual message describing the update.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceUpdateStatus.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceVersion">
            <summary>
            <b>Windows-only:</b> Specifies how Windows credentials are to be
            loaded for the container.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceVersion.Index">
            <summary>
            Update index for the service when the <see cref="T:Neon.Docker.ServiceDetails"/> snapshot was taken.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceVersion.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceVirtualIP">
            <summary>
            Describes the virtual IP address assigned to the service on
            a specific attached network.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceVirtualIP.NetworkID">
            <summary>
            Specifies the attached network ID.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceVirtualIP.Addr">
            <summary>
            Specifies assigned IP address.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceVirtualIP.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceVolumeDriverConfig">
            <summary>
            Volume driver configuration options.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceVolumeDriverConfig.Name">
            <summary>
            Name of the volume driver.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceVolumeDriverConfig.Options">
            <summary>
            Volume driver options.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceVolumeDriverConfig.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.ServiceVolumeOptions">
            <summary>
            Volume options for volume service mounts.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceVolumeOptions.NoCopy">
            <summary>
            Enables populating the volume with data from the container target.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceVolumeOptions.Labels">
            <summary>
            Volume driver labels.
            </summary>
        </member>
        <member name="P:Neon.Docker.ServiceVolumeOptions.DriverConfig">
            <summary>
            Optionally specifies volume driver and options.
            </summary>
        </member>
        <member name="M:Neon.Docker.ServiceVolumeOptions.Normalize">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Docker.DockerVolume">
            <summary>
            Describes a Docker volume.
            </summary>
        </member>
        <member name="M:Neon.Docker.DockerVolume.#ctor(System.Object)">
            <summary>
            Constructs an instance from the dynamic volume information returned by
            the Docker engine.
            </summary>
            <param name="source">The dynamic source value.</param>
        </member>
        <member name="P:Neon.Docker.DockerVolume.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerVolume.Name">
            <summary>
            Returns the volume name.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerVolume.Driver">
            <summary>
            Returns the volume driver.
            </summary>
        </member>
        <member name="P:Neon.Docker.DockerVolume.Mountpoint">
            <summary>
            Returns the volume mount point on the host node.
            </summary>
        </member>
        <member name="T:Neon.Docker.VolumeListResponse">
            <summary>
            The response from a <see cref="M:Neon.Docker.DockerClient.VolumeListAsync(System.Threading.CancellationToken)"/> command.
            </summary>
        </member>
        <member name="M:Neon.Docker.VolumeListResponse.#ctor(Neon.Net.JsonResponse)">
            <summary>
            Constructs the response from a lower-level <see cref="T:Neon.Net.JsonResponse"/>.
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:Neon.Docker.VolumeListResponse.Inner">
            <summary>
            Returns the raw <v>dynamic</v> object actually returned by Docker.
            You may use this to access newer Docker properties that have not
            yet been wrapped by this class.
            </summary>
        </member>
        <member name="P:Neon.Docker.VolumeListResponse.Volumes">
            <summary>
            Returns the list of volumes returned by the Docker engine.
            </summary>
        </member>
        <member name="T:Microsoft.Net.Http.Client.RedirectMode">
            <summary>
            Enumerates HTTP request redirect modes.
            </summary>
        </member>
        <member name="F:Microsoft.Net.Http.Client.RedirectMode.None">
            <summary>
            Do not follow redirects.
            </summary>
        </member>
        <member name="F:Microsoft.Net.Http.Client.RedirectMode.NoDowngrade">
            <summary>
            Disallows redirecting from HTTPS to HTTP
            </summary>
        </member>
        <member name="F:Microsoft.Net.Http.Client.RedirectMode.All">
            <summary>
            Follow all redirects
            </summary>
        </member>
        <member name="T:Microsoft.Net.Http.Client.WriteClosableStream">
            <summary>
            Define a stream interface that implements <see cref="P:Microsoft.Net.Http.Client.WriteClosableStream.CanCloseWrite"/> and <see cref="M:Microsoft.Net.Http.Client.WriteClosableStream.CloseWrite"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Net.Http.Client.WriteClosableStream.CanCloseWrite">
            <summary>
            Returns <c>true</c> if the stream can close write operation.
            </summary>
        </member>
        <member name="M:Microsoft.Net.Http.Client.WriteClosableStream.CloseWrite">
            <summary>
            Close write operations.
            </summary>
        </member>
    </members>
</doc>
