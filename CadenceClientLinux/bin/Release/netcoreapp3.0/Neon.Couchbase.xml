<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Couchbase</name>
    </assembly>
    <members>
        <member name="T:Couchbase.CouchbaseExtensions">
            <summary>
            Couchbase related extensions.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GenKey(Couchbase.Core.IBucket)">
            <summary>
            Generates a globally unique document key.
            </summary>
            <param name="bucket">The bucket.</param>
            <returns>A <see cref="T:System.Guid"/> formatted as a string.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.IsTransientStatus(Couchbase.IO.ResponseStatus,System.Boolean)">
            <summary>
            Determines whether a Couchbase response status code should be considered
            a transient error.
            </summary>
            <param name="status">The status code.</param>
            <param name="replicateOrPersist">Indicates whether the operation has replication or persistance constraints.</param>
            <returns><c>true</c> for a transient error.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.VerifySuccess(Couchbase.IOperationResult,System.Boolean)">
            <summary>
            Throws an exception if an operation was not successful.
            </summary>
            <param name="result">The operation result.</param>
            <param name="replicateOrPersist">Indicates whether the operation has replication or persistance constraints.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.VerifySuccess``1(Couchbase.IOperationResult{``0},System.Boolean)">
            <summary>
            Throws an exception if an operation was not successful.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="result">The operation result.</param>
            <param name="replicateOrPersist">Indicates whether the operation has replication or persistance constraints.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.VerifySuccess``1(Couchbase.IDocumentResult{``0},System.Boolean)">
            <summary>
            Throws an exception if a document operation was not successful.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="result">The operation result.</param>
            <param name="replicateOrPersist">Indicates whether the operation has replication or persistance constraints.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.VerifySuccess``1(Couchbase.N1QL.IQueryResult{``0})">
            <summary>
            Throws an exception if a query operation was not successful.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="result">The operation result.</param>
            <exception cref="T:Couchbase.CouchbaseResponseException">Thrown for errors.</exception>
            <exception cref="T:Neon.Retry.TransientException">Thrown if the error is potentially transient and the operation should be retried.</exception>
            <remarks>
            <para>
            This method is similar to the built-in Couchbase
            <see cref="M:Couchbase.ResponseExtensions.EnsureSuccess``1(Couchbase.N1QL.IQueryResult{``0})"/>
            method, but may be better for many situations for these reasons:
            </para>
            <list type="bullet">
                <item>
                This method includes information about the specific errors detected.
                <see cref="M:Couchbase.ResponseExtensions.EnsureSuccess``1(Couchbase.N1QL.IQueryResult{``0})"/>
                only returns a generic <b>Fatal Error</b> message and expects you
                to examine the <see cref="P:Couchbase.N1QL.CouchbaseQueryResponseException.Errors"/> 
                property in your code.  This methods does that for you by including
                the errors in the exception message so that that they will be included
                in any diagnostic logging your doing without any additional effort.
                </item>
                <item>
                This method throws a <see cref="T:Neon.Retry.TransientException"/> if the
                error indicates that it should be retried.  This makes it easy
                to use a Neon <see cref="T:Neon.Retry.IRetryPolicy"/> to perform retries.
                </item>
            </list>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.CheckAsync(Couchbase.Core.IBucket)">
            <summary>
            Performs small read/query operations to verify that the database connection 
            is healthy.
            </summary>
            <param name="bucket">The bucket.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:Couchbase.CouchbaseResponseException">Thrown if the bucket is not ready.</exception>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.WaitUntilReadyAsync(Couchbase.Core.IBucket,System.TimeSpan)">
            <summary>
            Waits until the bucket is ready.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="timeout">Optionally specifies the maximum time to wait (defaults to 60 seconds).</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <exception cref="T:System.TimeoutException">Thrown if the operation timed out.</exception>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.WaitForIndexer(Couchbase.Core.IBucket)">
            <summary>
            <para>
            Waits for any pending database updates to be indexed.  This can be used to
            implement <b>read your own writes.</b>.
            </para>
            <note>
            <b>IMPORTANT:</b> This is intended for use only for databases with a
            <b>#primary</b> index.
            </note>
            </summary>
            <param name="bucket">The bucket.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.WaitForIndexerAsync(Couchbase.Core.IBucket)">
            <summary>
            <para>
            Waits for any pending database updates to be indexed.  This can be used to
            implement <b>read your own writes.</b>.
            </para>
            <note>
            <b>IMPORTANT:</b> This is intended for use only for databases with a
            <b>#primary</b> index.
            </note>
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <param name="bucket">The bucket.</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.AppendSafeAsync(Couchbase.Core.IBucket,System.String,System.Byte[])">
            <summary>
            Appends a byte array to a key, throwing an exception on failures.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.AppendAsync(Couchbase.Core.IBucket,System.String,System.String)">
            <summary>
            Appends a string to a key, throwing an exception on failures.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.DecrementSafeAsync(Couchbase.Core.IBucket,System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Decrements the value of a key by one.  If the key doesn't exist, it will be
            created and initialized to <paramref name="initial"/>.  This method will throw
            an exception on failures.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="delta">The amount to decrement by (defaults to <b>1</b>).</param>
            <param name="initial">The initial value to use if the key doesn't already exist (defaults to <b>1</b>).</param>
            <param name="expiration">The expiration TTL (defaults to none).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ExistsSafeAsync(Couchbase.Core.IBucket,System.String)">
            <summary>
            Checks for the existance of a key, throwing an exception on failures.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns><c>true</c> if the key exists.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.FindSafeAsync``1(Couchbase.Core.IBucket,System.String)">
            <summary>
            Attempts to retrieve a key value, returning <c>null</c> if it doesn't exist rather
            than throwing an exception.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns>The value or <c>null</c>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.FindDocumentSafeAsync``1(Couchbase.Core.IBucket,System.String)">
            <summary>
            Attemps to retrieve a document, returning <c>null</c> if it doesn't exist rather
            than throwing an exception.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns>The value or <c>null</c>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetAndLockSafeAsync``1(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Gets a key and locks it for a specified time period.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="expiration">The interval after which the document will be locked.  This defaults to 15 seconds and the maximum supported by the server is 30 seconds.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetAndTouchSafeAsync``1(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Gets a key and updates its expiry with a new value.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="expiration">The optional new expiry timespan.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetAndTouchDocumentSafeAsync``1(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Gets a document and updates its expiry with a new value.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="expiration">The optional new expiry timespan.</param>
            <returns>The document.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetSafeAsync``1(Couchbase.Core.IBucket,System.String)">
            <summary>
            Gets a key value from the database, throwing an exception if the key does not exist
            or there was another error.  
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetDocumentSafeAsync``1(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Gets a document, throwing an exception if the document does not exist or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="keys">The key.</param>
            <param name="expiration">The optional new expiry timespan.</param>
            <returns>The document.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetDocumentSafeAsync``1(Couchbase.Core.IBucket,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a set of documents, throwing an exception if any document does not exist or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="keys">The keys.</param>
            <returns>The documents.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetFromReplicaSafeAsync``1(Couchbase.Core.IBucket,System.String)">
            <summary>
            Gets a key value from a Couchbase replica node, throwing an exception if the key does
            not exist or there was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.IncrementSafeAsync(Couchbase.Core.IBucket,System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <summary>
            Increments the value of a key by one.  If the key doesn't exist, it will be
            created and initialized to <paramref name="initial"/>.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="delta">The amount to increment by (defaults to <b>1</b>).</param>
            <param name="initial">The initial value to use if the key doesn't already exist (defaults to <b>1</b>).</param>
            <param name="expiration">The expiration TTL (defaults to none).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a key, throwing an exception if the key already exists or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a key with an expiration TTL, throwing an exception if the key already exists or there
            was another error.  Note that 30 seconds is the maximum expiration TTL supported by the
            server.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiration">The expiration TTL.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts a document, throwing an exception if the document already exists or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="document">The document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts multiple documents, throwing an exception if any of the documents already exists or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="documents">The documents.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document, throwing an exception if the document already exists or there
            was another error.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertSafeAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document, with an expiration TTL, throwing an exception if the key already exists or there
            was another error.  Note that 30 seconds is the maximum expiration TTL supported by the
            server.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="expiration">The expiration TTL.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.QuerySafeAsync``1(Couchbase.Core.IBucket,Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <summary>
            Executes a query request, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="queryRequest">The query request.</param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.QuerySafeAsync``1(Couchbase.Core.IBucket,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a N1QL string query, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="query">The N1QL query string.</param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.QuerySafeAsync``1(Couchbase.Core.IBucket,Couchbase.N1QL.IQueryRequest,Couchbase.N1QL.MutationState,System.Threading.CancellationToken)">
            <summary>
            Executes a query request after ensuring that the indexes have caught
            up to the specified mutation state, throwing an exception if there were
            any errors.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="queryRequest">The query request.</param>
            <param name="mutationState">
            Specifies the required index mutation state that must be satisfied before
            the query will be executed.
            </param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.QuerySafeAsync``1(Couchbase.Core.IBucket,System.String,Couchbase.N1QL.MutationState,System.Threading.CancellationToken)">
            <summary>
            Executes a N1QL string query, after ensuring that the indexes have caught
            up to the specified mutation state, throwing an exception if there were
            any errors.
            </summary>
            <typeparam name="T">The result type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="query">The N1QL query string.</param>
            <param name="mutationState">
            Specifies the required index mutation state that must be satisfied before
            the query will be executed.
            </param>
            <param name="cancellationToken">The optional cancellation token.</param>
            <returns>The list of results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.RemoveSafeAsync(Couchbase.Core.IBucket,Couchbase.IDocument{System.Threading.Tasks.Task},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a document throwning an exception if there were any errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="document">The document to be deleted.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.RemoveSafeAsync(Couchbase.Core.IBucket,System.Collections.Generic.List{Couchbase.IDocument{System.Threading.Tasks.Task}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes multiple documents, throwing an exception if there were any errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="documents">The document to be deleted.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.RemoveSafeAsync(Couchbase.Core.IBucket,System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes a key, throwning an exception if there were any errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key to be deleted.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.RemoveSafeAsync(Couchbase.Core.IBucket,Neon.Data.IPersistableType,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes an <see cref="T:Neon.Data.IPersistableType"/> document,  throwning an exception if there were any errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document to be deleted.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an existing document, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="document">The replacement document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces multiple documents, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="documents">The replacement documents.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation results.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a key value, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The replacement value.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.Nullable{System.UInt64},System.Nullable{System.TimeSpan},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces a key value, optionally specifying a CAS value and throwing an exception
            if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The replacement value.</param>
            <param name="cas">The optional CAS value.</param>
            <param name="expiration">Optional expiration TTL.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes an <see cref="T:Neon.Data.IPersistableType"/> document, throwing an exception if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The replacement document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceSafeAsync``1(Couchbase.Core.IBucket,``0,System.Nullable{System.UInt64},System.Nullable{System.TimeSpan},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Removes an <see cref="T:Neon.Data.IPersistableType"/> document, optionally specifying a CAS value and throwing an exception
            if there were any errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The replacement document.</param>
            <param name="cas">The optional CAS value.</param>
            <param name="expiration">Optional expiration TTL.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.TouchSafeAsync(Couchbase.Core.IBucket,System.String,System.TimeSpan)">
            <summary>
            Touches a key and updates its expiry, throwing an exception if there were errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="expiration"></param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.TouchSafeAsync(Couchbase.Core.IBucket,Neon.Data.IPersistableType,System.TimeSpan)">
            <summary>
            Touches an <see cref="T:Neon.Data.IPersistableType"/> document and updates its expiry, throwing an exception if there were errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="expiration"></param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UnlockSafeAsync(Couchbase.Core.IBucket,System.String,System.UInt64)">
            <summary>
            Unlocks a key, throwing an exception if there were errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="cas">The CAS value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UnlockSafeAsync(Couchbase.Core.IBucket,Neon.Data.IPersistableType,System.UInt64)">
            <summary>
            Unlocks an <see cref="T:Neon.Data.IPersistableType"/> document, throwing an exception if there were errors.
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="cas">The CAS value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a document, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="document">The document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a key, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates an <see cref="T:Neon.Data.IPersistableType"/> document, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a key using a CAS, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cas">The CAS.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document, using a CAS, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="cas">The CAS.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a key setting an expiration, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="expiration">The expiration.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates an <see cref="T:Neon.Data.IPersistableType"/> document, setting an expiration and throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="expiration">The expiration.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates a key using a CAS and setting an expiration, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="cas">The CAS.</param>
            <param name="expiration">The expiration.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertSafeAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts or updates an <see cref="T:Neon.Data.IPersistableType"/> document, using a CAS and setting an expiration, throwing an exception if there are errors.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="persistable">The document.</param>
            <param name="cas">The CAS.</param>
            <param name="expiration">The expiration.</param>
            <param name="replicateTo">Optional replication factor (defaults to <see cref="F:Couchbase.ReplicateTo.Zero"/>).</param>
            <param name="persistTo">Optional persistance factor (defaults to <see cref="F:Couchbase.PersistTo.Zero"/>).</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ListIndexesAsync(Couchbase.Core.IBucket)">
            <summary>
            Lists the indexes for the test bucket.
            </summary>
            <param name="bucket">The Couchbase bucket.</param>
            <returns>The list of index information.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.GetIndexAsync(Couchbase.Core.IBucket,System.String)">
            <summary>
            Returns information about a named Couchbase index for the test bucket.
            </summary>
            <param name="bucket">The Couchbase bucket.</param>
            <param name="name">The index name.</param>
            <returns>
            The index information as a <c>dynamic</c> or <c>null</c> 
            if the index doesn't exist.
            </returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.WaitForIndexAsync(Couchbase.Core.IBucket,System.String,System.String)">
            <summary>
            Waits for a named index to enter a specific state (defaults to <b>online</b>).
            </summary>
            <param name="bucket">The bucket.</param>
            <param name="name">The index name.</param>
            <param name="state">Optionally specifies the desire state (defaults to <b>online</b>).</param>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and perstance constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints and an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints and an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persitsence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.InsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Inserts an <see cref="T:Neon.Data.IPersistableType"/> document with replicatioon and persistence constraints and and expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication, constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS replication, constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, rep[lication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Replace``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, replication constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document wsith replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ReplaceAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints with a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, and replication and persistence constraints, and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.Upsert``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Replaces an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints, and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS and expiration.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a replication constraint.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a replicatioin constraint and timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and replication and peristence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, replication and persistence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, replication and peristence constraints, and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration and replication and persistene constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with an expiration, replication and peristence constraints and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.UpsertAsync``1(Couchbase.Core.IBucket,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <summary>
            Upserts an <see cref="T:Neon.Data.IPersistableType"/> document with a CAS, expiration, and replication and persistence constraints, and a timeout.
            </summary>
            <typeparam name="T">The document type.</typeparam>
            <param name="bucket">The bucket.</param>
            <param name="value">The document.</param>
            <param name="cas">The compare and swap value.</param>
            <param name="expiration">Specifies the document lifetime.</param>
            <param name="replicateTo">Specifies the replication constraint.</param>
            <param name="persistTo">Specifies the persistence constraint.</param>
            <param name="timeout">Specifies the operation timeout.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.OpenCluster(Neon.Data.CouchbaseSettings,System.String,System.String)">
            <summary>
            Returns a Couchbase cluster connection using specified settings and the username and password.
            </summary>
            <param name="settings">The Couchbase settings.</param>
            <param name="username">The cluster username.</param>
            <param name="password">The cluster password.</param>
            <returns>The connected <see cref="T:Couchbase.Cluster"/>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.OpenCluster(Neon.Data.CouchbaseSettings,Neon.Common.Credentials)">
            <summary>
            Returns a Couchbase cluster connection using specified settings and <see cref="T:Neon.Common.Credentials"/>.
            </summary>
            <param name="settings">The Couchbase settings.</param>
            <param name="credentials">Cluster credentials.</param>
            <returns>The connected <see cref="T:Couchbase.Cluster"/>.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.OpenBucket(Neon.Data.CouchbaseSettings,System.String,System.String,System.TimeSpan,System.Nullable{System.Boolean})">
            <summary>
            Returns a Couchbase bucket connection using specified settings and the cluster credentials.
            </summary>
            <param name="settings">The Couchbase settings.</param>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <param name="timeout">The optional timeout (defaults to 60 seconds).</param>
            <param name="ignoreDurability">Optionally configure the bucket to ignore durability parameters.</param>
            <returns>The connected <see cref="T:Couchbase.NeonBucket"/>.</returns>
            <exception cref="T:System.TimeoutException">Thrown if the bucket is not ready after waiting <paramref name="timeout"/>.</exception>
            <remarks>
            <para>
            You may explicitly pass <paramref name="ignoreDurability"/><c>=true</c> for 
            development and test environments where there may not be enough cluster nodes to
            satisfy durability constraints.  If this is <c>null</c> (the default) then the bucket 
            will look for the presence of the <b>DEV_WORKSTATION</b> environment variable
            and ignore durability constraints if this variable exists, otherwise durability
            constraints will be honored.
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.OpenBucket(Neon.Data.CouchbaseSettings,Neon.Common.Credentials,System.TimeSpan,System.Nullable{System.Boolean})">
            <summary>
            Returns a Couchbase bucket connection using specified settings and credentials.
            </summary>
            <param name="settings">The Couchbase settings.</param>
            <param name="credentials">The credentials.</param>
            <param name="timeout">The optional timeout (defaults to 30 seconds).</param>
            <param name="ignoreDurability">Optionally configure the bucket to ignore durability parameters.</param>
            <returns>The connected <see cref="T:Couchbase.NeonBucket"/>.</returns>
            <remarks>
            <para>
            You may explicitly pass <paramref name="ignoreDurability"/><c>=true</c> for 
            development and test environments where there may not be enough cluster nodes to
            satisfy durability constraints.  If this is <c>null</c> (the default) then the bucket 
            will look for the presence of the <b>DEV_WORKSTATION</b> environment variable
            and ignore durability constraints if this variable exists, otherwise durability
            constraints will be honored.
            </para>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseExtensions.ToClientConfig(Neon.Data.CouchbaseSettings)">
            <summary>
            Converts a <see cref="T:Neon.Data.CouchbaseSettings"/> into a <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.
            </summary>
            <param name="settings">The simplified Couchbase settings instance.</param>
            <returns>A Couchbase <see cref="T:Couchbase.Configuration.Client.ClientConfiguration"/>.</returns>
        </member>
        <member name="T:Couchbase.CouchbaseHelper">
            <summary>
            Couchbase helper utilities.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.String)">
            <summary>
            Converts a <c>string</c> into a Couchbase literal suitable
            for direct inclusion into a Couchbase query string.  This
            handles any required quoting and character escaping.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
            <remarks>
            <note>
            The string returned will always be surrounded by single quotes.
            </note>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.LiteralName(System.String)">
            <summary>
            Converts a <c>string</c> into a Couchbase name suitable
            for direct inclusion into a Couchbase statement.  This
            handles any required quoting and character escaping.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal name.</returns>
            <remarks>
            <note>
            The name returned will always be surrounded by single back
            tick marks.
            </note>
            </remarks>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.Int32)">
            <summary>
            Converts an <c>int</c> into a literal value.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.Int64)">
            <summary>
            Converts a <c>long</c> into a literal value.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.Boolean)">
            <summary>
            Converts a <c>bool</c> into a literal value.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseHelper.Literal(System.Double)">
            <summary>
            Converts a <c>double</c> into a literal value.
            </summary>
            <param name="value">The input value.</param>
            <returns>The literal value.</returns>
        </member>
        <member name="T:Couchbase.CouchbaseIndex">
            <summary>
            Describes the current state of a Couchbase index.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseIndex.#ctor(System.Object)">
            <summary>
            Constructs an instance from a <c>dynamic</c> object returned by
            a <c>select * from system:indexes</c> query.
            </summary>
            <param name="indexInfo">The index information.</param>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.Name">
            <summary>
            Returns the index name.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.Type">
            <summary>
            Identifies the technology used to host the index, currently one of
            <b>gsi</b> or <b>view</b>.  This corresponds to the underlying
            Couchbase <b>using</b> property.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.IsPrimary">
            <summary>
            Returns <c>true</c> for primary indexes.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.State">
            <summary>
            Returns the index state.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.Keys">
            <summary>
            Returns the array of index keys.
            </summary>
        </member>
        <member name="P:Couchbase.CouchbaseIndex.Where">
            <summary>
            Returns the index's <b>where</b> condition.
            </summary>
        </member>
        <member name="T:Couchbase.CouchbaseTransientDetector">
            <summary>
            Determines whether an exception thrown by a Couchbase client operation
            indicates a potentially transistent problem.
            </summary>
        </member>
        <member name="M:Couchbase.CouchbaseTransientDetector.IsTransient(System.Exception)">
            <summary>
            Returns <c>true</c> if the exception passed should be considered to be a
            potentially transient Couchbase error.
            </summary>
            <param name="e">The exception being tested.</param>
            <returns><c>true</c> if the error was potentially transient.</returns>
        </member>
        <member name="M:Couchbase.CouchbaseTransientDetector.IsCasTransient(System.Exception)">
            <summary>
            Returns <c>true</c> if the exception passed should be considered to be a
            CAS (check-and-set) error that could be retried in application code.
            </summary>
            <param name="e">The exception being tested.</param>
            <returns><c>true</c> if the error was potentially transient.</returns>
        </member>
        <member name="T:Couchbase.EntitySerializer">
            <summary>
            Implements a Couchbase serializer that's capable of handling <see cref="T:Neon.Data.IPersistableType"/>
            based objects in addition to plain-old-objects.
            </summary>
        </member>
        <member name="M:Couchbase.EntitySerializer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Couchbase.EntitySerializer.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.EntitySerializer.Deserialize``1(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.EntitySerializer.GetMemberName(System.Reflection.MemberInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.EntitySerializer.Serialize(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Couchbase.NeonBucket">
            <summary>
            Wraps an <see cref="T:Couchbase.Core.IBucket"/> adding some additional capabilities.
            </summary>
            <remarks>
            <para>
            This bucket can be configured to ignore replicate and persist durability
            constraints.  You can explicitly pass <c>ignoreDurability=true</c> to the
            constructor for development and test environments where there may not be enough 
            cluster nodes to satisfy durability constraints.  If this is <c>null</c> (the default)
            then the bucket  will look for the presence of the <b>DEV_WORKSTATION</b> environment
            variable and ignore durability constraints if this variable exists.
            </para>
            <para>
            This means that production and staging environments that don't have the
            <b>DEV_WORKSTATION</b> environment variable will enforce durability by
            default and development/test environments that have this set will not
            enforce durability be default.
            </para>
            </remarks>
        </member>
        <member name="P:Couchbase.NeonBucket.ReadyTimeout">
            <summary>
            <b>HACk:</b> Returns the timeout used when ensuring that a bucket is ready for use.
            </summary>
        </member>
        <member name="P:Couchbase.NeonBucket.ReadyRetry">
            <summary>
            <b>HACk:</b> Returns the retry policy used when ensuring that a bucket is ready for use.
            </summary>
        </member>
        <member name="M:Couchbase.NeonBucket.#ctor(Couchbase.Core.IBucket,Neon.Data.CouchbaseSettings,System.Nullable{System.Boolean})">
            <summary>
            Constructor.
            </summary>
            <param name="bucket">The underlying Couchbase bucket implementation.</param>
            <param name="settings">The Couchbase client settings.</param>
            <param name="ignoreDurability">Optionally configure the bucket to ignore durability parameters.</param>
            <remarks>
            <para>
            You may explicitly pass <paramref name="ignoreDurability"/><c>=true</c> for 
            development and test environments where there may not be enough cluster nodes to
            satisfy durability constraints.  If this is <c>null</c> (the default) then the bucket 
            will look for the presence of the <b>DEV_WORKSTATION</b> environment variable
            and ignore durability constraints if this variable exists, otherwise durability
            constraints will be honored.
            </para>
            </remarks>
        </member>
        <member name="P:Couchbase.NeonBucket.IgnoreDurability">
            <summary>
            Indicates whether this bucket is ignoring any <see cref="T:Couchbase.ReplicateTo"/> and/or <see cref="T:Couchbase.PersistTo"/>
            durability constraints.  This is useful for unit testing where it'll be likely that there won't be
            enough Couchbase cluster nodes to satisfy durability constraints for production code.
            </summary>
        </member>
        <member name="M:Couchbase.NeonBucket.Adjust(Couchbase.ReplicateTo)">
            <summary>
            Adjusts a <see cref="T:Couchbase.ReplicateTo"/> parameter based on the bucket's
            durability mode.
            </summary>
            <param name="replicateTo">The input value.</param>
            <returns>The value to actually use.</returns>
        </member>
        <member name="M:Couchbase.NeonBucket.Adjust(Couchbase.PersistTo)">
            <summary>
            Adjusts a <see cref="T:Couchbase.PersistTo"/> parameter based on the bucket's
            durability mode.
            </summary>
            <param name="persistTo">The input value.</param>
            <returns>The value to actually use.</returns>
        </member>
        <member name="M:Couchbase.NeonBucket.SetInternalBucket(Couchbase.Core.IBucket)">
            <summary>
            <b>INTERNAL USE ONLY:</b> This is used in special situations where the internal
            backing bucket needs to be replaced.  This is currently used within the Couchbase
            test fixture.
            </summary>
            <param name="bucket">The bucket to be set or <c>null</c>.</param>
        </member>
        <member name="M:Couchbase.NeonBucket.GetInternalBucket">
            <summary>
            <b>INTERNAL USE ONLY:</b> Returns the internal bucket.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Couchbase.NeonBucket.Name">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.BucketType">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.Cluster">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.IsSecure">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.SupportsEnhancedDurability">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.SupportsKvErrorMap">
            <inheritdoc/>
        </member>
        <member name="P:Couchbase.NeonBucket.Configuration">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Append(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Append(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Append(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Append(System.String,System.Byte[],System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.AppendAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.AppendAsync(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.AppendAsync(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.AppendAsync(System.String,System.Byte[],System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.CreateManager(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.CreateManager">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.CreateQuery(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.CreateQuery(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Decrement(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.DecrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Exists(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Exists(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ExistsAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ExistsAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Get``1(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLock``1(System.String,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLock``1(System.String,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLock``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLock``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLockAsync``1(System.String,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLockAsync``1(System.String,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLockAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndLockAsync``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouch``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouch``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchAsync``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchDocument``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchDocument``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAndTouchDocumentAsync``1(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetClusterVersion">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetClusterVersionAsync">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocument``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocument``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentFromReplica``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentFromReplica``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentFromReplicaAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentFromReplicaAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentsAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetDocumentsAsync``1(System.Collections.Generic.IEnumerable{System.String},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetFromReplica``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetFromReplica``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetFromReplicaAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetFromReplicaAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetWithLock``1(System.String,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetWithLock``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetWithLockAsync``1(System.String,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.GetWithLockAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Increment(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.IncrementAsync(System.String,System.UInt64,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Insert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.InsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListAppend(System.String,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListAppend(System.String,System.Object,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListAppendAsync(System.String,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListAppendAsync(System.String,System.Object,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListGet``1(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListGet``1(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListGetAsync``1(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListGetAsync``1(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListPrepend(System.String,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListPrepend(System.String,System.Object,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListPrependAsync(System.String,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListPrependAsync(System.String,System.Object,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListRemove(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListRemove(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListRemoveAsync(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListRemoveAsync(System.String,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSet(System.String,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSet(System.String,System.Int32,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSetAsync(System.String,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSetAsync(System.String,System.Int32,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSize(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSizeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ListSizeAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.LookupIn``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.LookupIn``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapAdd(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapAdd(System.String,System.String,System.String,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapAddAsync(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapAddAsync(System.String,System.String,System.String,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapGet``1(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapGet``1(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapGetAsync``1(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapGetAsync``1(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapRemove(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapRemove(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapRemoveAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapRemoveAsync(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapSize(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapSizeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MapSizeAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MutateIn``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.MutateIn``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Observe(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ObserveAsync(System.String,System.UInt64,System.Boolean,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Ping(Couchbase.Core.Monitoring.ServiceType[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Ping(System.String,Couchbase.Core.Monitoring.ServiceType[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Prepend(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Prepend(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Prepend(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Prepend(System.String,System.Byte[],System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.PrependAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.PrependAsync(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.PrependAsync(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.PrependAsync(System.String,System.Byte[],System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query``1(Couchbase.Views.IViewQueryable)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query``1(Couchbase.N1QL.IQueryRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query``1(Couchbase.Analytics.IAnalyticsRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Query(Couchbase.Search.SearchQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.Views.IViewQueryable)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.N1QL.IQueryRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync``1(Couchbase.Analytics.IAnalyticsRequest,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync(Couchbase.Search.SearchQuery)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueryAsync(Couchbase.Search.SearchQuery,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePop``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePop``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePopAsync``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePopAsync``1(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePush``1(System.String,``0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePush``1(System.String,``0,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePushAsync``1(System.String,``0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueuePushAsync``1(System.String,``0,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueueSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueueSize(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueueSizeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.QueueSizeAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Remove(System.Collections.Generic.IList{System.String},System.Threading.Tasks.ParallelOptions,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.RemoveAsync(System.String,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Replace``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ReplaceAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetAdd(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetAdd(System.String,System.String,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetAddAsync(System.String,System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetAddAsync(System.String,System.String,System.Boolean,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetContains(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetContains(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetContainsAsync(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetContainsAsync(System.String,System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetRemove``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetRemove``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetRemoveAsync``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetRemoveAsync``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetSize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetSize(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetSizeAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.SetSizeAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Touch(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Touch(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.TouchAsync(System.String,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.TouchAsync(System.String,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Unlock(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Unlock(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UnlockAsync(System.String,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UnlockAsync(System.String,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.Upsert``1(System.Collections.Generic.IDictionary{System.String,``0},System.Threading.Tasks.ParallelOptions,System.Int32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(Couchbase.IDocument{``0},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.Collections.Generic.List{Couchbase.IDocument{``0}},Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.UInt32,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.UpsertAsync``1(System.String,``0,System.UInt64,System.TimeSpan,Couchbase.ReplicateTo,Couchbase.PersistTo,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ExportDeferredAnalyticsQueryHandle``1(Couchbase.Analytics.IAnalyticsDeferredResultHandle{``0})">
            <inheritdoc/>
        </member>
        <member name="M:Couchbase.NeonBucket.ImportDeferredAnalyticsQueryHandle``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Data.CouchbaseImporter">
            <summary>
            Handles persisting JSON documents to Couchbase.
            </summary>
        </member>
        <member name="M:Neon.Data.CouchbaseImporter.#ctor(System.Action{System.String},Couchbase.Core.IBucket,System.String,System.Int64,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="errorSink">Action invoked when an error is encountered.</param>
            <param name="bucket">The target Couchbase bucket.</param>
            <param name="keyPattern">The key pattern (or <c>null</c>).</param>
            <param name="firstKey">Optionally specifies the first #MONO_INCR# key (defaults to <b>1</b>).</param>
            <param name="dryRun">
            Optionally specify that the class should go through the motions but 
            not actually persist anything.
            </param>
        </member>
        <member name="M:Neon.Data.CouchbaseImporter.ReportError(System.String)">
            <summary>
            Reports an error.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Neon.Data.CouchbaseImporter.WriteDocument(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Persists a document to Couchbase.
            </summary>
            <param name="document">The document.</param>
            <remarks>
            <note>
            This method will remove any <b>@@key</b> property from 
            the document if present.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Data.CouchbaseImporter.DocumentCount">
            <summary>
            Returns the number of persisted documents.
            </summary>
        </member>
        <member name="T:Neon.Data.CouchbaseSettings">
            <summary>
            Settings used to connect a Couchbase client to a Couchbase bucket.
            </summary>
        </member>
        <member name="M:Neon.Data.CouchbaseSettings.Parse(System.String,System.Boolean)">
            <summary>
            Parses a <see cref="T:Neon.Data.CouchbaseSettings"/> from a JSON or YAML string,
            automatically detecting the input format.
            </summary>
            <param name="jsonOrYaml"></param>
            <param name="strict">Optionally require that all input properties map to route properties.</param>
            <returns>The parsed <see cref="T:Neon.Data.CouchbaseSettings"/>.</returns>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.Servers">
            <summary>
            One or more Couchbase server URIs.
            </summary>
            <remarks>
            You must specify the URI for at least one operating Couchbase node.  The Couchbase
            client will use this to discover the remaining nodes.  It is a best practice to
            specify multiple nodes in a clustered environment to avoid initial connection
            problems if any single node is down.
            </remarks>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.Bucket">
            <summary>
            Optionally specifies the name of the target Couchbase bucket.
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.ConnectTimeout">
            <summary>
            Maximum time (milliseconds) to wait to establish a server connection (defaults to <b>10 seconds</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.SendTimeout">
            <summary>
            Maximum time (milliseconds) to wait to transmit a server request (defaults to <b>10 seconds</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.OperationTimeout">
            <summary>
            Maximum time (milliseconds) to wait for an operation to complete (defaults to <b>10 seconds</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.QueryRequestTimeout">
            <summary>
            Maximum time (milliseconds) to wait for a non-view query to complete (defaults to 75 seconds).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.ViewRequestTimeout">
            <summary>
            Maximum time (milliseconds) to wait for a view query to complete (defaults to 75 seconds).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.MaxPoolConnections">
            <summary>
            Maximum number of pooled connections to a server bucket (defaults to <b>5</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.MinPoolConnections">
            <summary>
            Minimum number of pooled connections to a server bucket (defaults to <b>2</b>).
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.UseEnhancedDurability">
            <summary>
            Enables the use of the <see cref="F:Couchbase.N1QL.ScanConsistency.RequestPlus"/> index consistency option.  
            Both of these options are deprecated as of Couchbase 5.0 so this may no longer matter.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Data.CouchbaseSettings.IsValid">
            <summary>
            Returns <c>true</c> if the settings are valid.
            </summary>
        </member>
        <member name="T:Neon.Data.EntityHelper">
            <summary>
            Helper methods for managing database entities.
            </summary>
        </member>
        <member name="T:Neon.Data.EntityHelper.EntityPropertyInfo">
            <summary>
            Holds information about an entity's property.
            </summary>
        </member>
        <member name="P:Neon.Data.EntityHelper.EntityPropertyInfo.Properties">
            <summary>
            The list of public properties as serialized to JSON.
            </summary>
        </member>
        <member name="P:Neon.Data.EntityHelper.EntityPropertyInfo.Select">
            <summary>
            The comma separated property names suitable for using in a N1QL
            <c>select</c> statement.
            </summary>
        </member>
        <member name="F:Neon.Data.EntityHelper.entityProperties">
            <summary>
            Caches the entity properties defined for an <see cref="T:Neon.Data.IPersistableType"/>.
            </summary>
        </member>
        <member name="M:Neon.Data.EntityHelper.CreateUuid">
            <summary>
            Generates a URI-safe globally unique ID.
            </summary>
            <returns>The ID as a string.</returns>
            <remarks>
            <note>
            The value returned is a <see cref="T:System.Guid"/> converted to base-64 and then
            made URI safe by replacing "=" characters with "-" and "/" to "_" and 
            also removing any "=" padding charcters.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityRef(System.String)">
            <summary>
            Extracts the entity reference from an entity key.
            </summary>
            <param name="entityKey">The entity key.</param>
            <returns>The entity ID.</returns>
            <remarks>
            <para>
            This implements a common convention where Couchbase entities are persisted using a
            key formed by appending entity ID to the entity type, separated by a double
            colon (<b>"::"</b>).  This makes entity types available for filtering when
            managing cross datacenter replication.
            </para>
            <para>
            This method extracts the string after the first (<b>"::"</b>) as the document ID.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityKey(System.String,System.String)">
            <summary>
            Generates an entity key from the entity reference and entity type.
            </summary>
            <param name="entityRef">The entity reference.</param>
            <param name="entityType">The entity type.</param>
            <returns>The entity key.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="entityRef"/> is <c>null</c> or empty.</exception>
            <remarks>
            <para>
            Stoke follows a common convention where Couchbase entities are persisted using a
            key formed by appending entity reference to the entity type, separated by a double
            colon (<b>"::"</b>).  This makes entity types available for filtering when
            managing cross datacenter replication.
            </para>
            <para>
            This method concatenates the entity type and ID using a (<b>"::"</b>) separator.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityKey(System.String)">
            <summary>
            Generates an entity key from the a GUID and entity type.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The entity key.</returns>
            <remarks>
            <para>
            Stoke follows a common convention where Couchbase entities are persisted using a
            key formed by appending entity ID to the entity type, separated by a double
            colon (<b>"::"</b>).  This makes entity types available for filtering when
            managing cross datacenter replication.
            </para>
            <para>
            This method concatenates the entity type and ID using a (<b>"::"</b>) separator.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.ToCouchbase(System.DateTime)">
            <summary>
            Serializes a <see cref="T:System.DateTime"/> into the standard format used
            for persisting to Couchbase.
            </summary>
            <param name="input">The input time.</param>
            <returns>The serialized output.</returns>
        </member>
        <member name="M:Neon.Data.EntityHelper.ToCouchbase(System.DateTimeOffset)">
            <summary>
            Serializes a <see cref="T:System.DateTimeOffset"/> into the standard format used
            for persisting to Couchbase.
            </summary>
            <param name="input">The input time.</param>
            <returns>The serialized output.</returns>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityPropertyInfo``1">
            <summary>
            Returns the serializable property information for an entity.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <returns>The <see cref="T:Neon.Data.EntityHelper.EntityPropertyInfo"/>.</returns>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntityProperties``1">
            <summary>
            Returns the names of an entity's properties that will be serialized to JSON.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <returns>The set of property names.</returns>
            <remarks>
            <para>
            This method is handy when manually building <b>N1QL</b> query strings when
            you want to return all entity fields but you don't want to use <c>select *</c>
            because this nests each result into a property named for the bucket.
            I'm not entirely sure why Couchbase does this.
            </para>
            <note>
            This method will include all public entity properties that do not have the
            <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> and this also honors the property names
            specified by any <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> attributes.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Data.EntityHelper.GetEntitySelectProperties``1">
            <summary>
            Returns the comma separated names of an entity's properties in a form where 
            they can be easily added to a manually created N1QL statement.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <returns>The comma separated list of of property names.</returns>
            <remarks>
            <para>
            This method is handy when manually building <b>N1QL</b> query strings when
            you want to return all entity fields but you don't want to use <c>select *</c>
            because this nests each result into a property named for the bucket.  You may
            use the result to replace the star (<b>*</b>) in the <c>select</c> with the
            explicit property names.
            </para>
            <note>
            This method will include all public entity properties that do not have the
            <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute"/> and this also honors the property names
            specified by any <see cref="T:Newtonsoft.Json.JsonPropertyAttribute"/> attributes.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.BinderAttachmentAttribute">
            <summary>
            Used to tag the properties of a binder document's <c>interface</c> definition
            so that the <c>entity-gen</c> tool will be able to generate code that 
            implements the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> pattern for Couchbase Lite
            document attachments.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.BinderAttachmentAttribute.AttachmentName">
            <summary>
            The optional case insensitve name for the Couchbase Lite
            document attachment to be associated with this property.
            Otherwise, this will default to the property name.
            </summary>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.BinderDocumentAttribute">
            <summary>
            Used to tag an <c>interface</c> indicating that the <b>entity-gen</b> should
            generate a Couchbase Lite entity document class that that implements the 
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> pattern for the document attachments.
            </summary>
            <remarks>
            <para>
            Entity document classes that implement the  <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            pattern for the attachments are referred to as <b>binder documents</b>.
            You'll need to define an <c>interface</c> that includes zero or more properties
            that will be mapped to document attachments.  You must also define a separate
            <c>interface</c> that defines the document contents.
            </para>
            <para>
            The binder document interface must be tagged with the <see cref="T:Neon.Couchbase.DynamicData.BinderDocumentAttribute"/>,
            passing the type of the entity interface definition and the binder document
            properties must be tagged with the <see cref="T:Neon.Couchbase.DynamicData.BinderAttachmentAttribute"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.BinderDocumentAttribute.#ctor(System.Type)">
            <summary>
            Constructor.
            </summary>
            <param name="entityType">The document content entity type <c>interface</c> definition.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.BinderDocumentAttribute.EntityType">
            <summary>
            Returns the document content entity type <c>interface</c> definition.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.BinderDocumentAttribute.Name">
            <summary>
            Optional name for the generated class; otherwise the name will
            default to the interface name with the leading "I" character
            removed (if present).
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.BinderDocumentAttribute.Namespace">
            <summary>
            Optional namespace for the generated class; otherwise the namespace
            will default to the namespace of the tagged interface.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.BinderDocumentAttribute.IsInternal">
            <summary>
            Optionally indicates that the generated class will be declared as <c>internal</c>
            rather than <c>public</c>, the default.
            </summary>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.DynamicEntity">
            <summary>
            An implementation of <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> suitable for backing
            most entity implementations, including those generated by the
            <c>entity-gen</c> tool.
            </summary>
            <threadsafety instance="false"/>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.DynamicEntity.EntityTypeName">
            <summary>
            The default property name to be used for entity type properties that
            don't have an explict name set in their <see cref="T:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute"/>.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.DynamicEntity.EntityTypePathName">
            <summary>
            The internal entity property name used to persist an entity's full
            type inheritance path.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.DynamicEntity.typeToEntityCreator">
            <summary>
            Dictionary mapping entity types to the delegate that can instantiate the entity.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.DynamicEntity.typeIdentifierToEntityCreator">
            <summary>
            Dictionary mapping unique entity type identifer strings to the information
            we can use to instantiate the entity.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.Register(System.Collections.Generic.IEnumerable{Neon.Couchbase.DynamicData.Internal.EntityRegistration})">
            <summary>
            Registers entity types so they can be instantiated.
            </summary>
            <param name="registrations">The information about the entities being registered.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.Create``1(Newtonsoft.Json.Linq.JObject,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructs a <typeparamref name="TEntity"/> from a <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="jObject">The backing <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
            <returns>The new <typeparamref name="TEntity"/>.</returns>
            <remarks>
            <para>
            This method is capable of instantiating derived entities in a future-proof 
            manner.  This is possible for entities whose defining <c>interface</c>s were
            tagged with a <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityAttribute.Type"/> value.  This is
            set to a unique identifier for the type within the application domain. 
            </para>
            <para>
            Entities serialize their own type identifier as well as the 
            identifiers for any inherited types to the internal <see cref="F:Neon.Couchbase.DynamicData.DynamicEntity.EntityTypePathName"/>
            JSON property.  The type identifiers are formatted into a list of
            colon (<b>:</b>) separated values with the current type's identifier 
            listed first, followed by its parent's identifier and so on, all the 
            way to the root entity's identifier.
            </para>
            <para>
            This identifier list provides the information necessary to dynamically
            instantiate the derived entity that best fits the data.  For example,
            say you release a product that defines a base <c>IProduct</c> interface
            with <c>ICandy</c> derived from it.  IProduct defines a <b>Name</b> as
            property and ICandy adds <b>Calories</b>.
            </para>
            <para>
            An application can persist a base IProduct instance to the database
            as well as a derived ICandy.  Calling this method to load the base
            IProduct or ICandy document will simply load it.  Calling this method
            to load IProduct but passing the ICandy document, will actually create
            an ICandy instance but return it cast to the base type (IProduct).
            </para>
            <para>
            Applications can test entity types using the usual C# <c>is</c>/<c>as</c>
            operators or switch on the entity's type property, if one was tagged
            using <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsTypeProperty"/>.
            </para>
            <para>
            This also enables future-proofing.  Say version 1.0 of an application only
            knew about IProduct and ICandy.  Then, version 2.0 is released that adds
            <c>IBeer</c> which also derives from IProduct and persists some beer to
            a database.  Loading an IBeer document as an IProduct from version 1.0 
            will still work, even though v1 is not aware of this type.  An IProduct
            entity will be returned (what else can be done), but the IBeer properties
            will still be loaded into the underlying <c>JObject</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="propertyNameMap">
            The dictionary mapping JSON property names to their entity equivalents.
            </param>
            <param name="context">The optional entity context.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity._GetEntityType">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject">
            <summary>
            Returns the <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> instance being used to back the object's properties.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity._SetLink(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity._GetLink">
            <inheritdoc/>
        </member>
        <member name="E:Neon.Couchbase.DynamicData.DynamicEntity.Changed">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity._Attach(Neon.Couchbase.DynamicData.IDynamicEntity)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity._Detach">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity._Load(Newtonsoft.Json.Linq.JObject,System.Boolean,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity._Load(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Associates a new <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> instance with the mapper.
            </summary>
            <param name="newObject">The new <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity._OnChanged">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.MapProperty``1(Neon.Couchbase.DynamicData.Internal.SimpleMapper{``0}@,System.Boolean)">
            <summary>
            Maps a <see cref="T:Neon.Couchbase.DynamicData.Internal.SimpleMapper`1"/> to the corresponding <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            in the current <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.  A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> will be created if
            one doesn't already exist (with a default value).
            </summary>
            <typeparam name="TValue">The property value type.</typeparam>
            <param name="propertyMapper">The property mapper.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <returns><c>true</c> if the mapped value changed.</returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.MapProperty``1(Neon.Couchbase.DynamicData.Internal.EntityMapper{``0}@,System.Boolean)">
            <summary>
            Maps an <see cref="T:Neon.Couchbase.DynamicData.Internal.EntityMapper`1"/> to the corresponding <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            in the current <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.  A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> will be created if
            one doesn't already exist (with a default value).
            </summary>
            <typeparam name="TEntity">The property value type.</typeparam>
            <param name="propertyMapper">The property mapper.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <returns><c>true</c> if the mapped value changed.</returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.MapProperty``1(Neon.Couchbase.DynamicData.Internal.LinkMapper{``0}@,System.Boolean)">
            <summary>
            Maps a <see cref="T:Neon.Couchbase.DynamicData.Internal.LinkMapper`1"/> to the corresponding <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            in the current <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.  A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> will be created if
            one doesn't already exist (with a default value).
            </summary>
            <typeparam name="TEntity">The property value type.</typeparam>
            <param name="propertyMapper">The property mapper.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <returns><c>true</c> if the mapped value changed.</returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.MapProperty``1(Neon.Couchbase.DynamicData.Internal.ListMapper{``0}@,System.Boolean)">
            <summary>
            Maps a <see cref="T:Neon.Couchbase.DynamicData.Internal.ListMapper`1"/> to the corresponding <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            in the current <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.  A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> will be created if
            one doesn't already exist (with a default value).
            </summary>
            <typeparam name="TItem">The property values list item type.</typeparam>
            <param name="propertyMapper">The property mapper.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <returns><c>true</c> if the mapped value changed.</returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.MapProperty``1(Neon.Couchbase.DynamicData.Internal.EntityListMapper{``0}@,System.Boolean)">
            <summary>
            Maps an <see cref="T:Neon.Couchbase.DynamicData.Internal.EntityListMapper`1"/> to the corresponding <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            in the current <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.  A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> will be created if
            one doesn't already exist (with a default value).
            </summary>
            <typeparam name="TEntity">The property values list item type.</typeparam>
            <param name="propertyMapper">The property mapper.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <returns><c>true</c> if the mapped value changed.</returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.MapProperty``1(Neon.Couchbase.DynamicData.Internal.LinkListMapper{``0}@,System.Boolean)">
            <summary>
            Maps a <see cref="T:Neon.Couchbase.DynamicData.Internal.LinkListMapper`1"/> to the corresponding <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            in the current <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.  A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> will be created if
            one doesn't already exist (with a default value).
            </summary>
            <typeparam name="TEntity">The property value's list item type.</typeparam>
            <param name="propertyMapper">The property mapper.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <returns><c>true</c> if the mapped value changed.</returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.MapProperty``1(Neon.Couchbase.DynamicData.Internal.DocLinkMapper{``0}@,System.Boolean)">
            <summary>
            Maps an <see cref="T:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1"/> to the corresponding <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            in the current <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.  A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> will be created if
            one doesn't already exist (with a default value).
            </summary>
            <typeparam name="TDocument">The property values list item type.</typeparam>
            <param name="propertyMapper">The property mapper.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <returns><c>true</c> if the mapped value changed.</returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.MapProperty``1(Neon.Couchbase.DynamicData.Internal.DocListMapper{``0}@,System.Boolean)">
            <summary>
            Maps a <see cref="T:Neon.Couchbase.DynamicData.Internal.DocListMapper`1"/> to the corresponding <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            in the current <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/>.  A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> will be created if
            one doesn't already exist (with a default value).
            </summary>
            <typeparam name="TDocument">The property value's list item type.</typeparam>
            <param name="propertyMapper">The property mapper.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <returns><c>true</c> if the mapped value changed.</returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.OnJsonPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the mapped <see cref="P:Neon.Couchbase.DynamicData.DynamicEntity.JObject"/> raises its property changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.DynamicEntity.Neon#Couchbase#DynamicData#IDynamicEntity#_OnPropertyChanged(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.DynamicEntityAttribute">
            <summary>
            Used to tag an <c>interface</c> such that the <b>entity-gen</b> tool will 
            automatically generate equivalent data model classes derived from
            <see cref="T:Neon.Couchbase.DynamicData.DynamicEntity"/>.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicEntityAttribute.Name">
            <summary>
            Optional name for the generated class; otherwise the name will
            default to the interface name with the leading "I" character
            removed (if present).
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicEntityAttribute.Namespace">
            <summary>
            Optional namespace for the generated class; otherwise the namespace
            will default to the namespace of the tagged interface.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicEntityAttribute.IsInternal">
            <summary>
            Optionally indicates that the generated class will be declared as <c>internal</c>
            rather than <c>public</c>, the default.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicEntityAttribute.Type">
            <summary>
            <para>
            Optional entity type identifier.  This can be set to a <c>string</c> or <c>enum</c> 
            value uniquely identifying the entity type within the application domain.
            </para>
            <note>
            This property must be set for derived <c>interface</c> definitions.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute">
            <summary>
            Used to customize code generation for a property definition within an
            <c>interface</c> tagged by <see cref="T:Neon.Couchbase.DynamicData.DynamicEntityAttribute"/> by the
            <b>entity-gen</b> build tool.
            </summary>
            <remarks>
            <para>
            This attribute provides the <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.Name"/> property which allows for
            the customization of the string used when the property is serialized to
            JSON.  This allows for the decoupling of entity property names from
            the database.
            </para>
            <note>
            You need to be sure that all of the property names are unique within a 
            entity interface and any derived interfaces.
            </note>
            <para>
            The <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsTypeProperty"/> may be assigned <c>true</c> to generate a read-only
            property that returns the value specified by the <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityAttribute.Type"/>
            value used to tag the interface.
            </para>
            <note>
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsTypeProperty"/>=<c>true</c> must be set for the base interface
            of a derived interface heirarchy.
            </note>
            <note>
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.Name"/> defaults to <see cref="F:Neon.Couchbase.DynamicData.DynamicEntity.EntityTypeName"/> if <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsTypeProperty"/>=<c>true</c>
            rather than the actual property name to standardize the serialized type property
            name on a compact string.  Applications can override this behavior by explicitly
            setting <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.Name"/>.
            </note>
            <para>
            <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsLink"/> may be set to <c>true</c> to have the entity perist a string
            reference to another entity, rather than the entity itself.  This is useful for Couchbase
            Lite scenarios, where you'd like an entity to reference another its document ID,
            but have that entity be accessable as a parent entity property.  This will simplify
            UX data binding, etc.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.Name">
            <summary>
            The optional name to use when serializing the property.  This defaults
            to the defined property name.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsTypeProperty">
            <summary>
            <para>
            Optionally indicates that the property will be used to serialize the
            entity type.  The tagged property's type must be either a <c>string</c> 
            or <c>enum</c> type.
            </para>
            <note>
            Entity type properties must define a getter but not a setter and may only
            be specified for root entity interfaces (not derived ones).
            </note>
            <note>
            You may not combine this with <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.Name"/> or <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsLink"/>=<c>true</c>.
            </note>
            <para>
            The <b>entity-gen</b> code generator will generate this as a read-only property
            that returns the value specified by the <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityAttribute.Type"/>
            value used to tag the interface.
            </para>
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsLink">
            <summary>
            Optionally indicates that the property is a reference to another entity rather
            than holding the entity itself.
            </summary>
            <remarks>
            <para>
            Reference properties will persist a string value that identifies the specific 
            entity being referenced (e.g. a Couchbase Lite document ID or perhaps a file
            system path).  Advanced implementations can implement <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> 
            to provide a way for entities to resolve the string reference into 
            the referenced entity instance.
            </para>
            <note>
            You may not combine this with <see cref="P:Neon.Couchbase.DynamicData.DynamicEntityPropertyAttribute.IsTypeProperty"/>=<c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.DynamicIncludeAttribute">
            <summary>
            Used to tag a <c>class</c> or <c>enum</c> such that the <b>entity-gen</b> Visual 
            Studio build tool will automatically include the type in the generated output.  This
            is somewhat limited, as described in the remarks.
            </summary>
            <remarks>
            <para>
            Data models often need to reference <c>enum</c> types and sometimes its useful for a
            model library to be able to include constant definitions.  You can tag a class with
            this attribute to include the class in the generated model output.
            </para>
            <note>
            Only the class public constant definitions will be include in the generated output.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicIncludeAttribute.Namespace">
            <summary>
            Optional namespace for the generated class; otherwise the namespace
            will default to the namespace of the tagged class.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.DynamicIncludeAttribute.IsInternal">
            <summary>
            Optionally indicates that the generated class will be declared as <c>internal</c>
            rather than <c>public</c>, the default.
            </summary>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.IDynamicDocument">
            <summary>
            Base interface for document classes generated by the <b>gen-entity</b>
            tool.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicDocument._GetLink">
            <summary>
            Returns the document's link string.
            </summary>
            <returns>The link string or <c>null</c>.</returns>
            <remarks>
            <see cref="M:Neon.Couchbase.DynamicData.IDynamicDocument._GetLink"/> is used to implement entity linking for environments that
            provide an <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> implementation.
            </remarks>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.IDynamicDocument.IsDeleted">
            <summary>
            Returns <c>true</c> if the document has been deleted.
            </summary>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.IDynamicEntity">
            <summary>
            Defines the implementation of a data entity that wraps a JSON.NET
            <see cref="P:Neon.Couchbase.DynamicData.IDynamicEntity.JObject"/> to provide strongly typed properties.  This
            is used in the Couchbase Lite extensions but may be useful for
            other scenarios that require future proofing.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntity._GetEntityType">
            <summary>
            Returns the entity type string or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntity._SetLink(System.String)">
            <summary>
            Sets the entity's link string.
            </summary>
            <param name="link">The non-<c>null</c> link.</param>
            <remarks>
            <para>
            <see cref="M:Neon.Couchbase.DynamicData.IDynamicEntity._SetLink(System.String)"/> and <see cref="M:Neon.Couchbase.DynamicData.IDynamicEntity._GetLink"/> are used to
            implement entity linking for environments that provide an <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> 
            implementation.
            </para>
            <note>
            Entity links once assigned, are considered to be invariant.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntity._GetLink">
            <summary>
            Returns the entity's link string.
            </summary>
            <returns>The link string or <c>null</c>.</returns>
            <remarks>
            <see cref="M:Neon.Couchbase.DynamicData.IDynamicEntity._SetLink(System.String)"/> and <see cref="M:Neon.Couchbase.DynamicData.IDynamicEntity._GetLink"/> are used to
            implement entity linking for environments that provide an <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> 
            implementation.
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntity._Load(Newtonsoft.Json.Linq.JObject,System.Boolean,System.Boolean)">
            <summary>
            Initializes the model's entity properties, collections, etc. so they
            map to the JSON data in the <see cref="P:Neon.Couchbase.DynamicData.IDynamicEntity.JObject"/> passed.
            </summary>
            <param name="jObject">The dynamic model data.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <param name="setType">Pass <c>true</c> to initialize the entity type properties.</param>
            <returns>
            <c>true</c> if the new object had differences from the existing object
            and the updates were applied.
            </returns>
            <remarks>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="P:Neon.Couchbase.DynamicData.IDynamicEntity.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntity._Attach(Neon.Couchbase.DynamicData.IDynamicEntity)">
            <summary>
            Attaches the entity to an <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> parent.
            </summary>
            <param name="parent">The parent entity.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntity._Detach">
            <summary>
            Detaches the entity from its <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> parent.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.IDynamicEntity.JObject">
            <summary>
            Returns the dynamic <see cref="P:Neon.Couchbase.DynamicData.IDynamicEntity.JObject"/> used to back the object properties.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntity._OnPropertyChanged(System.String)">
            <summary>
            Raises the entity's property changed event.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="E:Neon.Couchbase.DynamicData.IDynamicEntity.Changed">
            <summary>
            Raised when any part of the entity or its tree of sub-entities is
            modified.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntity._OnChanged">
            <summary>
            Raises the <see cref="E:Neon.Couchbase.DynamicData.IDynamicEntity.Changed"/> event.
            </summary>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.IDynamicEntityContext">
            <summary>
            Implements methods used to resolve entity links.
            </summary>
            <remarks>
            <para>
            Advanced entity persistence frameworks, like the Neon Couchbase Lite extensions,
            implement this interface to provide allowing entities to link to one another.
            Links are specified as opaque strings.  For Couchbase Lite, these will be document
            IDs.  Other frameworks can specify something else.
            </para>
            <para>
            <see cref="M:Neon.Couchbase.DynamicData.IDynamicEntityContext.LoadEntity``1(System.String,System.Func{System.Boolean}@)"/> attempts to load an entity,
            given its link.  The method returns <c>null</c> if the linked entity doesn't exist
            and will throw an exception if there was some other kind of error.
            </para>
            <para>
            <see cref="M:Neon.Couchbase.DynamicData.IDynamicEntityContext.LoadDocument``1(System.String,System.Func{System.Boolean}@)"/> attempts to load a document,
            given its link.  The method returns <c>null</c> if the linked document doesn't exist
            and will throw an exception if there was some other kind of error.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntityContext.LoadEntity``1(System.String,System.Func{System.Boolean}@)">
            <summary>
            Instantiates the entity of the requested type by dereferencing the 
            <paramref name="link"/> string passed.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="link">The link string.</param>
            <param name="isDeletedFunc">
            Optionally returns as a function that will determine whether the linked 
            entity has been deleted from its context.  This may also return as <c>null</c>.
            </param>
            <returns>The loaded entity or <c>null</c> if it doesn't exist.
            </returns>
            <exception cref="T:System.Exception">
            The implementation should throw an exception if the entity couldn't be loaded 
            due to some kind of error, but not if the entity simply doesn't exist.
            </exception>
            <remarks>
            <para>
            Advanced entity contexts such as that implemented by the Neon Couchbase
            Lite extension will return a non-<c>null</c> <paramref name="isDeletedFunc"/>
            value that can be tested to check if the entity still exists.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.IDynamicEntityContext.LoadDocument``1(System.String,System.Func{System.Boolean}@)">
            <summary>
            Instantiates the document of the requested type by dereferencing the 
            <paramref name="link"/> string passed.
            </summary>
            <typeparam name="TDocument">The document type.</typeparam>
            <param name="link">The link string.</param>
            <param name="isDeletedFunc">
            Optionally returns as a function that will determine whether the linked 
            document has been deleted from its context.  This may also return as <c>null</c>.
            </param>
            <returns>The loaded document or <c>null</c> if it doesn't exist.
            </returns>
            <exception cref="T:System.Exception">
            The implementation should throw an exception if the document couldn't be loaded 
            due to some kind of error, but not if the entity simply doesn't exist.
            </exception>
            <remarks>
            <para>
            Advanced entity contexts such as that implemented by the Neon Couchbase
            Lite extension will return a non-<c>null</c> <paramref name="isDeletedFunc"/>
            value that can be tested to check if the document still exists.
            </para>
            </remarks>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations to 
            map a property to a linked <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> instance.
            </summary>
            <typeparam name="TDocument">The property value type.</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            <para>
            This class is used to link a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> value to an external
            entity document.  The property value will act as the document link and the
            <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> passed to the constructor (if any) will be
            used to dereference the link and load the document.
            </para>
            <para>
            Linked documents are loaded on demand and cached when the <see cref="P:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1.Value"/> 
            getter is called.  Subsequent calls to the getter will return the cached
            value.  The getter will return <c>null</c> if the link is null or if the
            referenced document doesn't exist.
            </para>
            <note>
            This class will simply return <c>null</c> if no <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> 
            is present.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,System.String,System.String,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this mapper.</param>
            <param name="jsonName">The JSON property name.</param>
            <param name="propertyName">The entity property name.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1.JsonName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1.Link">
            <summary>
            Returns the document link or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1.GetLink(`0)">
            <summary>
            Returns the link string for a document or <c>null</c>.
            </summary>
            <param name="document">The document or <c>null</c>.</param>
            <returns>The entity link or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
            <remarks>
            This method returns <c>null</c> when <paramref name="document"/>=<c>null</c>, otherwise
            it returns the document's link.  A non-<c>null</c> document must be linkable.
            </remarks>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1.Value">
            <summary>
            The current property value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocLinkMapper`1.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.DocListMapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to manage a list of document links.
            </summary>
            <typeparam name="TDocument">The list element type (implementing <see cref="T:Neon.Couchbase.DynamicData.IDynamicDocument"/>).</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            <para>
            The <see cref="T:Neon.Couchbase.DynamicData.Internal.ListMapper`1"/>'s primary responsibility is to listen 
            collection change events from the <see cref="T:Newtonsoft.Json.Linq.JArray"/> and relay these to
            the parent entity.
            </para>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListMapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,System.String,System.String,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this mapper.</param>
            <param name="jsonName">The JSON property name.</param>
            <param name="propertyName">The entity property name.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocListMapper`1.JsonName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocListMapper`1.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocListMapper`1.Value">
            <summary>
            Returns the current property value.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListMapper`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the collection items.
            </summary>
            <param name="items">The collection items or <c>null</c>.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListMapper`1.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to wrap an <see cref="T:System.Collections.IList"/> of document links around a <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <typeparam name="TDocument">The list's document item type (implementing <see cref="T:Neon.Couchbase.DynamicData.IDynamicDocument"/>).</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.LinkState">
            <summary>
            Holds the link state.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.LinkState.Link">
            <summary>
            The entity link.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.LinkState.Document">
            <summary>
            The cached document.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.LinkState.IsDeletedFunc">
            <summary>
            The entity deletion detection function.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,Neon.Couchbase.DynamicData.IDynamicEntityContext,Newtonsoft.Json.Linq.JArray,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this list.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
            <param name="jArray">The underlying <see cref="F:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.jArray"/>.</param>
            <param name="items">The initial items or <c>null</c> to initialize from <paramref name="jArray"/>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.IsAttached">
            <summary>
            Returns <c>true</c> if the list is currently attached to a <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.Detach">
            <summary>
            Detaches any event listeners from the underlying items and then
            disassociates the array.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.GetLink(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts a <see cref="T:Newtonsoft.Json.Linq.JToken"/> into an entity link.
            </summary>
            <param name="token">The token.</param>
            <returns>The entity link or <c>null</c>.</returns>
        </member>
        <member name="E:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.CollectionChanged">
            <summary>
            Raised when the list changes.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.IndexOf(`0)">
            <summary>
            Searches the list for a specific item.
            </summary>
            <param name="item">The item to be located.</param>
            <returns>The index of the first item that matches the index, if found; or -1 otherwise.</returns>">
            <exception cref="T:System.ArgumentException">Thrown if the entity passed cannot be linked.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.IsReadOnly">
            <summary>
            Indicates whether the list is read-only.  This always returns <c>false.</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.GetLink(`0)">
            <summary>
            Returns the link string for an entity or <c>null</c>.
            </summary>
            <param name="entity">The entity or <c>null</c>.</param>
            <returns>The entity link or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the entity cannot be linked.</exception>
            <remarks>
            This method returns <c>null</c> when <paramref name="entity"/>=<c>null</c>, otherwise
            it returns the entity's link.  A non-<c>null</c> entity must be linkable.
            </remarks>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.Item(System.Int32)">
            <summary>
            Accesses the item at an index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element at the index.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.Add(`0)">
            <summary>
            Appends an item to the list.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.Contains(`0)">
            <summary>
            Determines whether the list contains a specific item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the item exists.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value passed cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list items to an array. 
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The destination starting index.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.Remove(`0)">
            <summary>
            Removes the first occurance of a specific item from the list.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns><c>true</c> if the item was present and was removed.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value passed cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.GetEnumerator">
            <summary>
            Returns a generic enumerator over the list items.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.DocListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over the list items.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.EntityListMapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to manage a list of entities.
            </summary>
            <typeparam name="TEntity">The list element type (implementing <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/>).</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            <para>
            The <see cref="T:Neon.Couchbase.DynamicData.Internal.ListMapper`1"/>'s primary responsibility is to listen 
            collection change events from the <see cref="T:Newtonsoft.Json.Linq.JArray"/> and relay these to
            the parent entity.
            </para>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListMapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,System.String,System.String,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this mapper.</param>
            <param name="jsonName">The JSON property name.</param>
            <param name="propertyName">The entity property name.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityListMapper`1.JsonName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityListMapper`1.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityListMapper`1.Value">
            <summary>
            Returns the current property value.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListMapper`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the collection items.
            </summary>
            <param name="items">The collection items or <c>null</c>.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListMapper`1.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to wrap an <see cref="T:System.Collections.IList"/> of entities around a <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <typeparam name="TEntity">The list item type (implementing <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/>).</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,Neon.Couchbase.DynamicData.IDynamicEntityContext,Newtonsoft.Json.Linq.JArray,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this list.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
            <param name="jArray">The underlying <see cref="F:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.jArray"/>.</param>
            <param name="items">The initial items or <c>null</c> to initialize from <paramref name="jArray"/>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.IsAttached">
            <summary>
            Returns <c>true</c> if the list is currently attached to a <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.Detach">
            <summary>
            Detaches any event listeners from the underlying items and then
            disassociates the array.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.ToToken(`0)">
            <summary>
            Converts a list item into the equivalent <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.OnItemChanged(System.Object,System.EventArgs)">
            <summary>
            Called when any of the list item's <see cref="E:Neon.Couchbase.DynamicData.IDynamicEntity.Changed"/> event is
            raised.  This method will bubble the notifications to the parent entity.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="E:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.CollectionChanged">
            <summary>
            Raised when the list changes.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.IndexOf(`0)">
            <summary>
            Searches the list for a specific item.
            </summary>
            <param name="item">The item to be located.</param>
            <returns>The index of the first item that matches the index, if found; or -1 otherwise.</returns>
            <exception cref="T:System.NotImplementedException">Thrown always.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.IsReadOnly">
            <summary>
            Indicates whether the list is read-only.  This always returns <c>false.</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.Item(System.Int32)">
            <summary>
            Accesses the item at an index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element at the index.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.Add(`0)">
            <summary>
            Appends an item to the list.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.Contains(`0)">
            <summary>
            Determines whether the list contains a specific item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the item exists.</returns>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list items to an array. 
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The destination starting index.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.Remove(`0)">
            <summary>
            Removes the first occurance of a specific item from the list.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns><c>true</c> if the item was present and was removed.</returns>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.GetEnumerator">
            <summary>
            Returns a generic enumerator over the list items.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over the list items.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.EntityMapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations to 
            map a property to a nested <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> instance.
            </summary>
            <typeparam name="TEntity">The property value type.</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the
            <b>entity-gen</b> build tool.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityMapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,System.String,System.String,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this mapper.</param>
            <param name="jsonName">The JSON property name.</param>
            <param name="propertyName">The entity property name.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityMapper`1.JsonName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityMapper`1.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityMapper`1.Value">
            <summary>
            The current property value.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityMapper`1.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.EntityCreateDelegate">
            <summary>
            The delegate registered by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations that
            instantiates an entity using a parameterized constructor.
            </summary>
            <param name="jObject">The backing <see cref="T:Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
            <returns>The new <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/>.</returns>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.EntityRegistration">
            <summary>
            An <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementation's registration information.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.EntityRegistration.#ctor(System.Type,System.String,Neon.Couchbase.DynamicData.Internal.EntityCreateDelegate)">
            <summary>
            Constructor.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="typeIdentifier">The entity's application domain unique identifier string (or <c>null</c>).</param>
            <param name="creator">The entity creation delegate.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityRegistration.EntityType">
            <summary>
            Returns the entity type.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityRegistration.TypeIdentifier">
            <summary>
            Returns the entity's application domain unique identifier string or <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.EntityRegistration.Creator">
            <summary>
            Returns the entity creation delegate.
            </summary>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.IPropertyMapper">
            <summary>
            <b>Platform use only:</b> Defines common members implemented by entity
            property mapper classes.
            </summary>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b>.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.IPropertyMapper.JsonName">
            <summary>
            Returns the JSON property name..
            </summary>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.IPropertyMapper.PropertyName">
            <summary>
            Returns the entity property name.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.IPropertyMapper.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <summary>
            Maps or re-maps a <see cref="T:Newtonsoft.Json.Linq.JProperty"/>. 
            </summary>
            <param name="newProperty">The property.</param>
            <param name="reload">Optionally specifies that the model is being reloaded.</param>
            <remarks>
            <returns>
            <c>true</c> if the new property was different from the existing one 
            and updates were applied.
            </returns>
            <note>
            Pass <paramref name="reload"/>=<c>true</c> to reload data from a new 
            <see cref="T:Newtonsoft.Json.Linq.JObject"/> into the model.  In this case, the implementation
            must ensure that all appropriate property and collection change notifications 
            are raised to ensure that any listening UX elements will be updated.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.LinkListMapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to manage a list of entity links.
            </summary>
            <typeparam name="TEntity">The list element type (implementing <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/>).</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            <para>
            The <see cref="T:Neon.Couchbase.DynamicData.Internal.ListMapper`1"/>'s primary responsibility is to listen 
            collection change events from the <see cref="T:Newtonsoft.Json.Linq.JArray"/> and relay these to
            the parent entity.
            </para>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListMapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,System.String,System.String,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this mapper.</param>
            <param name="jsonName">The JSON property name.</param>
            <param name="propertyName">The entity property name.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkListMapper`1.JsonName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkListMapper`1.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkListMapper`1.Value">
            <summary>
            Returns the current property value.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListMapper`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the collection items.
            </summary>
            <param name="items">The collection items or <c>null</c>.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListMapper`1.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to wrap an <see cref="T:System.Collections.IList"/> of entity links around a <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <typeparam name="TEntity">The list's entity item type (implementing <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/>).</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.LinkState">
            <summary>
            Holds the link state.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.LinkState.Link">
            <summary>
            The entity link.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.LinkState.Entity">
            <summary>
            The cached entity.
            </summary>
        </member>
        <member name="F:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.LinkState.IsDeletedFunc">
            <summary>
            The entity deletion detection function.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,Neon.Couchbase.DynamicData.IDynamicEntityContext,Newtonsoft.Json.Linq.JArray,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this list.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
            <param name="jArray">The underlying <see cref="F:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.jArray"/>.</param>
            <param name="items">The initial items or <c>null</c> to initialize from <paramref name="jArray"/>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.IsAttached">
            <summary>
            Returns <c>true</c> if the list is currently attached to a <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.Detach">
            <summary>
            Detaches any event listeners from the underlying items and then
            disassociates the array.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.GetLink(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts a <see cref="T:Newtonsoft.Json.Linq.JToken"/> into an entity link.
            </summary>
            <param name="token">The token.</param>
            <returns>The entity link or <c>null</c>.</returns>
        </member>
        <member name="E:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.CollectionChanged">
            <summary>
            Raised when the list changes.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.IndexOf(`0)">
            <summary>
            Searches the list for a specific item.
            </summary>
            <param name="item">The item to be located.</param>
            <returns>The index of the first item that matches the index, if found; or -1 otherwise.</returns>">
            <exception cref="T:System.ArgumentException">Thrown if the entity passed cannot be linked.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.IsReadOnly">
            <summary>
            Indicates whether the list is read-only.  This always returns <c>false.</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.GetLink(`0)">
            <summary>
            Returns the link string for an entity or <c>null</c>.
            </summary>
            <param name="entity">The entity or <c>null</c>.</param>
            <returns>The entity link or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the entity cannot be linked.</exception>
            <remarks>
            This method returns <c>null</c> when <paramref name="entity"/>=<c>null</c>, otherwise
            it returns the entity's link.  A non-<c>null</c> entity must be linkable.
            </remarks>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.Item(System.Int32)">
            <summary>
            Accesses the item at an index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element at the index.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.Add(`0)">
            <summary>
            Appends an item to the list.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.Contains(`0)">
            <summary>
            Determines whether the list contains a specific item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the item exists.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value passed cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list items to an array. 
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The destination starting index.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.Remove(`0)">
            <summary>
            Removes the first occurance of a specific item from the list.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns><c>true</c> if the item was present and was removed.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value passed cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.GetEnumerator">
            <summary>
            Returns a generic enumerator over the list items.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over the list items.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.LinkMapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations to 
            map a property to a linked <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> instance.
            </summary>
            <typeparam name="TEntity">The property value type.</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            <para>
            This class is used to link a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> value to an external
            entity.  The property value will act as the entity link and the
            <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> passed to the constructor (if any) will be
            used to dereference the link and load the entity.
            </para>
            <para>
            Linked entities are loaded on demand and cached when the <see cref="P:Neon.Couchbase.DynamicData.Internal.LinkMapper`1.Value"/> 
            getter is called.  Subsequent calls to the getter will return the cached
            value.  The getter will return <c>null</c> if the link is null or if the
            referenced entity doesn't exist.
            </para>
            <note>
            This class will simply return <c>null</c> if no <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> 
            is present.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkMapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,System.String,System.String,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this mapper.</param>
            <param name="jsonName">The JSON property name.</param>
            <param name="propertyName">The entity property name.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkMapper`1.JsonName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkMapper`1.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkMapper`1.Link">
            <summary>
            Returns the entity link or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkMapper`1.GetLink(`0)">
            <summary>
            Returns the link string for an entity or <c>null</c>.
            </summary>
            <param name="entity">The entity or <c>null</c>.</param>
            <returns>The entity link or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
            <remarks>
            This method returns <c>null</c> when <paramref name="entity"/>=<c>null</c>, otherwise
            it returns the entity's link.  A non-<c>null</c> entity must be linkable.
            </remarks>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.LinkMapper`1.Value">
            <summary>
            The current property value.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if the value being saved cannot be linked.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.LinkMapper`1.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.ListMapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to manage a list of simple (non-entity) objects.
            </summary>
            <typeparam name="TEntity">The list element type.</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            <para>
            The <see cref="T:Neon.Couchbase.DynamicData.Internal.ListMapper`1"/>'s primary responsibility is to listen 
            collection change events from the <see cref="T:Newtonsoft.Json.Linq.JArray"/> and relay these
            to the parent entity.
            </para>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListMapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,System.String,System.String,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this mapper.</param>
            <param name="jsonName">The JSON property name.</param>
            <param name="propertyName">The entity property name.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.ListMapper`1.JsonName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.ListMapper`1.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.ListMapper`1.Value">
            <summary>
            Returns the current property value.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListMapper`1.Set(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Sets the collection items.
            </summary>
            <param name="items">The collection items or <c>null</c>.</param>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListMapper`1.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.ListWrapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to wrap a <see cref="T:System.Collections.IList"/> of simple types around a <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <typeparam name="TEntity">The list item type.</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,Newtonsoft.Json.Linq.JArray,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this list.</param>
            <param name="jArray">The underlying <see cref="F:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.jArray"/>.</param>
            <param name="items">The initial items or <c>null</c> to initialize from <paramref name="jArray"/>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.IsAttached">
            <summary>
            Returns <c>true</c> if the list is currently attached to a <see cref="T:Newtonsoft.Json.Linq.JArray"/>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.Detach">
            <summary>
            Detaches any event listeners from the underlying <see cref="F:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.jArray"/> and then
            disassociates the array.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.ToToken(`0)">
            <summary>
            Converts a list item into the equivalent <see cref="T:Newtonsoft.Json.Linq.JToken"/>.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.ToList">
            <summary>
            Creates a copy of the list suitable for enumerating over.
            </summary>
            <returns>The new list.</returns>
        </member>
        <member name="E:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.CollectionChanged">
            <summary>
            Raised when the list changes.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.IndexOf(`0)">
            <summary>
            Searches the list for a specific item.
            </summary>
            <param name="item">The item to be located.</param>
            <returns>The index of the first item that matches the index, if found; or -1 otherwise.</returns>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.IsReadOnly">
            <summary>
            Indicates whether the list is read-only.  This always returns <c>false.</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.Item(System.Int32)">
            <summary>
            Accesses the item at an index.
            </summary>
            <param name="index">The index.</param>
            <returns>The element at the index.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.Add(`0)">
            <summary>
            Appends an item to the list.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.Clear">
            <summary>
            Removes all items from the list.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.Contains(`0)">
            <summary>
            Determines whether the list contains a specific item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if the item exists.</returns>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list items to an array. 
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The destination starting index.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.Remove(`0)">
            <summary>
            Removes the first occurance of a specific item from the list.
            </summary>
            <param name="item">The item to be removed.</param>
            <returns><c>true</c> if the item was present and was removed.</returns>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.GetEnumerator">
            <summary>
            Returns a generic enumerator over the list items.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.ListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over the list items.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the array has been detached.</exception>
        </member>
        <member name="T:Neon.Couchbase.DynamicData.Internal.SimpleMapper`1">
            <summary>
            <b>Platform use only:</b> Used by <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> implementations 
            to map entity properties with a simple single value to their underlying
            <see cref="T:Newtonsoft.Json.Linq.JProperty"/>.
            </summary>
            <typeparam name="TValue">The property value type.</typeparam>
            <remarks>
            <note>
            This class is intended for use only by classes generated by the 
            <b>entity-gen</b> build tool.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.SimpleMapper`1.#ctor(Neon.Couchbase.DynamicData.IDynamicEntity,System.String,System.String,Neon.Couchbase.DynamicData.IDynamicEntityContext)">
            <summary>
            Constructor.
            </summary>
            <param name="parentEntity">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntity"/> that owns this mapper.</param>
            <param name="jsonName">The JSON property name.</param>
            <param name="propertyName">The entity property name.</param>
            <param name="context">The <see cref="T:Neon.Couchbase.DynamicData.IDynamicEntityContext"/> or <c>null</c>.</param>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.SimpleMapper`1.JsonName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.SimpleMapper`1.PropertyName">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Couchbase.DynamicData.Internal.SimpleMapper`1.Value">
            <summary>
            The current property value.
            </summary>
        </member>
        <member name="M:Neon.Couchbase.DynamicData.Internal.SimpleMapper`1.Load(Newtonsoft.Json.Linq.JProperty,System.Boolean)">
            <inheritdoc/>
        </member>
    </members>
</doc>
