<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Xunit.Cadence</name>
    </assembly>
    <members>
        <member name="T:Neon.Xunit.Cadence.CadenceFixture">
            <summary>
            Used to run the Docker <b>nkubeio.cadence-test</b> container on 
            the current machine as a test fixture while tests are being performed 
            and then deletes the container when the fixture is disposed.
            </summary>
            <remarks>
            <para>
            This fixture assumes that Cadence is not currently running on the
            local workstation or as a container named <b>cadence-test</b>.
            You may see port conflict errors if either of these conditions
            are not true.
            </para>
            <para>
            A somewhat safer but slower alternative, is to use the <see cref="T:Neon.Xunit.DockerFixture"/>
            instead and add <see cref="T:Neon.Xunit.Cadence.CadenceFixture"/> as a subfixture.  The 
            advantage is that <see cref="T:Neon.Xunit.DockerFixture"/> will ensure that all
            (potentially conflicting) containers are removed before the Cadence
            fixture is started.
            </para>
            </remarks>
            <threadsafety instance="true"/>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.#ctor">
            <summary>
            Constructs the fixture.
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.Start(Neon.Cadence.CadenceSettings,System.String,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            <para>
            Starts a Cadence container if it's not already running.  You'll generally want
            to call this in your test class constructor instead of <see cref="M:Neon.Xunit.ITestFixture.Start(System.Action)"/>.
            </para>
            <note>
            You'll need to call <see cref="M:Neon.Xunit.Cadence.CadenceFixture.StartAsComposed(Neon.Cadence.CadenceSettings,System.String,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean)"/>
            instead when this fixture is being added to a <see cref="T:Neon.Xunit.ComposedFixture"/>.
            </note>
            </summary>
            <param name="settings">Optional Cadence settings.</param>
            <param name="image">Optionally specifies the Cadence container image (defaults to <b>nkubeio/couchbase-test:latest</b>).</param>
            <param name="name">Optionally specifies the Cadence container name (defaults to <c>cadence-test</c>).</param>
            <param name="env">Optional environment variables to be passed to the Cadence container, formatted as <b>NAME=VALUE</b> or just <b>NAME</b>.</param>
            <param name="keepConnection">
            Optionally specifies that a new Cadence connection <b>should not</b> be established for each
            unit test case.  The same connection will be reused which will save about a second per test.
            </param>
            <param name="keepOpen">
            Optionally indicates that the container should continue to run after the fixture is disposed.
            </param>
            <param name="emulateProxy">
            <b>INTERNAL USE ONLY:</b> Optionally starts a partially functional integrated 
            <b>cadence-proxy</b> for low-level testing.  Most users should never enable this
            because it's probably not going to do what you expect.
            </param>
            <returns>
            <see cref="F:Neon.Xunit.TestFixtureStatus.Started"/> if the fixture wasn't previously started and
            this method call started it or <see cref="F:Neon.Xunit.TestFixtureStatus.AlreadyRunning"/> if the 
            fixture was already running.
            </returns>
            <remarks>
            <note>
            Some of the <paramref name="settings"/> properties will be ignored including 
            <see cref="P:Neon.Cadence.CadenceSettings.Servers"/>.  This will be replaced by the local
            endpoint for the Cadence container.  Also, the fixture will connect to the 
            <b>default</b> Cadence domain by default (unless another is specified).
            </note>
            <note>
            A fresh Cadence client <see cref="P:Neon.Xunit.Cadence.CadenceFixture.Connection"/> will be established every time this
            fixture is started, regardless of whether the fixture has already been started.  This
            ensures that each unit test will start with a client in the default state.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.StartAsComposed(Neon.Cadence.CadenceSettings,System.String,System.String,System.String[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Used to start the fixture within a <see cref="T:Neon.Xunit.ComposedFixture"/>.
            </summary>
            <param name="settings">Optional Cadence settings.</param>
            <param name="image">Optionally specifies the Cadence container image (defaults to <b>nkubeio/cadence-test:latest</b>).</param>
            <param name="name">Optionally specifies the Cadence container name (defaults to <c>cb-test</c>).</param>
            <param name="env">Optional environment variables to be passed to the Cadence container, formatted as <b>NAME=VALUE</b> or just <b>NAME</b>.</param>
            <param name="keepConnection">
            Optionally specifies that a new Cadence connection <b>should not</b> be established for each
            unit test case.  The same connection will be reused which will save about a second per test.
            </param>
            <param name="keepOpen">
            Optionally indicates that the container should continue to run after the fixture is disposed.
            </param>
            <param name="emulateProxy">
            <b>INTERNAL USE ONLY:</b> Optionally starts a partially functional integrated 
            <b>cadence-proxy</b> for low-level testing.  Most users should never enable this
            because it's probably not going to do what you expect.
            </param>
            <remarks>
            <note>
            A fresh Cadence client <see cref="P:Neon.Xunit.Cadence.CadenceFixture.Connection"/> will be established every time this
            fixture is started, regardless of whether the fixture has already been started.  This
            ensures that each unit test will start with a client in the default state.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Xunit.Cadence.CadenceFixture.Connection">
            <summary>
            Returns the <see cref="T:Neon.Cadence.CadenceClient"/> to be used to interact with Cadence.
            </summary>
        </member>
        <member name="P:Neon.Xunit.Cadence.CadenceFixture.ConnectionClient">
            <summary>
            Returns a <see cref="T:System.Net.Http.HttpClient"/> suitable for submitting requests to the
            <see cref="P:Neon.Xunit.Cadence.CadenceFixture.ConnectionClient"/> instance web server.
            </summary>
        </member>
        <member name="P:Neon.Xunit.Cadence.CadenceFixture.ProxyClient">
            <summary>
            <para>
            Returns a <see cref="T:System.Net.Http.HttpClient"/> suitable for submitting requests to the
            associated <b>cadence-proxy</b> process.
            </para>
            <note>
            This will return <c>null</c> if the <b>cadence-proxy</b> process was disabled by
            the settings.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.Restart">
            <summary>
            Closes the existing Cadence connection and then restarts the Cadence
            server and establishes a new connection.
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.Reset">
            <summary>
            This method completely resets the fixture by removing the Cadence 
            container from Docker.  Use <see cref="M:Neon.Xunit.ContainerFixture.Restart"/> 
            if you just want to restart a fresh Cadence instance.
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.CadenceFixture.OnRestart">
            <summary>
            Called when an already started fixture is being restarted.  This 
            establishes a fresh Cadence connection.
            </summary>
        </member>
        <member name="T:Neon.Xunit.Cadence.Program">
            <summary>
            We apparently need a main program entry when building with the 
            <b>Microsoft.NET.Sdk.Web</b> SDK.  We'll fake one here.
            </summary>
        </member>
        <member name="M:Neon.Xunit.Cadence.Program.Main(System.String[])">
            <summary>
            Fake program entry point.
            </summary>
            <param name="args">Command line arguments.</param>
            <returns>The exit code.</returns>
        </member>
    </members>
</doc>
