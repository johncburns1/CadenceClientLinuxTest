<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neon.Kube</name>
    </assembly>
    <members>
        <member name="T:Neon.Kube.DesktopClient">
            <summary>
            <para>
            Implements an HTTP client that will be used by the <b>neon-cli</b>
            tool for communicating with the neonKUBE Desktop application running
            on the same machine.
            </para>
            <note>
            Calls to the desktop application will fail silently if the desktop
            doesn't respond because the desktop may not be running and these
            are really just nice status notifications, not anything critical.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.DesktopClient.#ctor(System.String,System.TimeSpan)">
            <summary>
            Internal constructor.
            </summary>
            <param name="serviceUri">Base URI for the desktop API service.</param>
            <param name="timeout">Optional request timeout (defaults to <b>500ms</b>).</param>
        </member>
        <member name="M:Neon.Kube.DesktopClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.DesktopClient.UpdateUIAsync">
            <summary>
            Signals the desktop application to update its UI state.  This
            will generally be called after <b>neon-cli</b> has modified
            the cluster connection status.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.DesktopClient.Login">
            <summary>
            Signals to the Desktop application that the workstation has logged
            into a cluster.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.DesktopClient.Logout">
            <summary>
            Signals to the Desktop application that the workstation has logged
            out of a cluster.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.DesktopClient.StartOperationAsync(System.String)">
            <summary>
            Signals the desktop application that a long-running operation such
            as cluster setup is starting.
            </summary>
            <param name="summary">A brief summary of the operation.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.DesktopClient.EndOperationAsync(System.String,System.Boolean)">
            <summary>
            Signals the desktop application the a long-running operation has
            completed.
            </summary>
            <param name="completedToast">
            Optionally specifies text to be displayed as toast by the 
            desktop application.
            </param>
            <param name="failed">Optionally indicates that the operation failed.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <note>
            This method will fail silently if the desktop application does
            not respond.
            </note>
            </remarks>
        </member>
        <member name="T:Neon.Kube.KubeClientConfig">
            <summary>
            Used by the neonKUBE client desktop and command line tools to 
            manage the client side configuration.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeClientConfig.#ctor">
            <summary>
            Default constuctor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.Schema">
            <summary>
            The schema version for this state file.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.InstallationId">
            <summary>
            The globally unique client installation ID.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.StatusPollSeconds">
            <summary>
            The interval the desktop application uses to poll for changes to the Kubernetes
            cluster configuration state.  This defaults to <b>1 second</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.DesktopServicePort">
            <summary>
            The local network port where the neonKUBE desktop application exposes
            the desktop service providing integration for the <b>neon-cli</b>
            command line tool.  This defaults to <see cref="F:Neon.Kube.KubeConst.DesktopServicePort"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.KubectlProxyPort">
            <summary>
            The local network port where <b>kubectl proxy</b> will listen
            and forward traffic to the Kubernetes API server.  This 
            defaults to <see cref="F:Neon.Kube.KubeConst.KubectlProxyPort"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientConfig.KubeDashboardProxyPort">
            <summary>
            The local network port used for proxying requests to
            the Kubernetes dashboard for the current cluster.  This 
            defaults to <see cref="F:Neon.Kube.KubeConst.KubeDashboardProxyPort"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeClientConfig.Validate">
            <summary>
            Ensures that the state is valid.
            </summary>
        </member>
        <member name="T:Neon.Kube.RemoteOperation">
            <summary>
            The payload passed to the desktop API server via <see cref="M:Neon.Kube.DesktopClient.StartOperationAsync(System.String)"/>
            and <see cref="M:Neon.Kube.DesktopClient.EndOperationAsync(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.RemoteOperation.ProcessId">
            <summary>
            The caller's process ID.  The desktop application uses this to
            determine whether the caller has terminated before signalling
            that the operation has completed.
            </summary>
        </member>
        <member name="P:Neon.Kube.RemoteOperation.Summary">
            <summary>
            A brief summary of the operation being performed.
            </summary>
        </member>
        <member name="P:Neon.Kube.RemoteOperation.CompletedToast">
            <summary>
            Optionally specifies the text to be displayed by the desktop application
            as toast for calls to <see cref="M:Neon.Kube.DesktopClient.EndOperationAsync(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.RemoteOperation.Failed">
            <summary>
            Indicates whether the operation failed.
            </summary>
        </member>
        <member name="T:Neon.Kube.ReverseProxy">
            <summary>
            <para>
            Implements a reverse HTTP or proxy between an endpoint on the local machine
            and an endpoint on a remote machine.
            </para>
            <note>
            This is supported <b>only on Windows</b>.
            </note>
            </summary>
            <remarks>
            <para>
            Use the <see cref="T:Neon.Kube.ReverseProxy"/> constructor to create a proxy.  You'll
            pass the local and remote endpoints and optional request and response 
            handlers.
            </para>
            <para>
            The request handler will be called when a request is received on the local
            endpoint give the handler a chance to modify the request before it is
            forwarded on to the remote endpoint.  The response handler is called when
            a response is received from the remote endpoint, giving the handler a
            chance to examine and possibly modify the response before it is returned
            to the caller.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.#ctor(System.Int32,System.Int32,System.String,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Action{Microsoft.Net.Http.Server.RequestContext},System.Action{Microsoft.Net.Http.Server.RequestContext})">
            <summary>
            Constructs a reverse proxy.
            </summary>
            <param name="localPort">The local port.</param>
            <param name="remotePort">The remote port.</param>
            <param name="remoteHost">Optionally specifies the remote hostname or IP address.</param>
            <param name="remoteTls">Optionally indicates that the remote endpoint required TLS.</param>
            <param name="validCertificate">
            Optionally specifies an acceptable server certificate.  This can be used 
            as a way to allow access for a specific self-signed certificate.  Passing 
            a certificate implies <paramref name="remoteTls"/><c>=true</c>.
            </param>
            <param name="clientCertificate">
            Optionally specifies a client certificate.  Passing a certificate implies
            <paramref name="remoteTls"/><c>=true</c>.
            </param>
            <param name="requestHandler">Optional request hook.</param>
            <param name="responseHandler">Optional response hook.</param>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.Dispose">
            <ingeritdoc/>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.GetBuffer">
            <summary>
            Returns a buffer from the pool or allocates a new buffer if
            the pool is empty.
            </summary>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.ReleaseBuffer(System.Byte[])">
            <summary>
            Releases a buffer by adding it back to the pool.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Neon.Kube.ReverseProxy.RequestProcessor">
            <summary>
            Handles received requests.
            </summary>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="T:Neon.Kube.ClusterDefinitionException">
            <summary>
            Signals cluster definition errors.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterDefinitionException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterDefinitionException.#ctor(System.String)">
            <summary>
            Consstructs an instance with a message.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Neon.Kube.KubeException">
            <summary>
            Describes a cluster related related error.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs and instance with a message and an optional inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The optional inner exception.</param>
        </member>
        <member name="T:Neon.Kube.VersionException">
            <summary>
            Indicates a client or other version incompatiblity.
            </summary>
        </member>
        <member name="M:Neon.Kube.VersionException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.VersionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs and instance with a message and an optional inner exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The optional inner exception.</param>
        </member>
        <member name="T:Neon.Kube.HeadendClient">
            <summary>
            Provides access to neonKUBE headend services.
            </summary>
        </member>
        <member name="M:Neon.Kube.HeadendClient.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.HeadendClient.GetSetupInfoAsync(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns information required for setting up a Kubernetes cluster.  This
            includes things like the URIs to be used for downloading the <b>kubectl</b>
            and <b>kubeadm</b> tools.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>A <see cref="T:Neon.Kube.KubeSetupInfo"/> with the information.</returns>
        </member>
        <member name="M:Neon.Kube.HeadendClient.GetClientInfoAsync">
            <summary>
            Returns client related information such as the location of the help and GitHub
            repo pages and the availability of updates.
            </summary>
            <returns>A <see cref="T:Neon.Kube.KubeClientInfo"/>.</returns>
        </member>
        <member name="M:Neon.Kube.HeadendClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.KubeClientInfo">
            <summary>
            Describes client related information such as help, GitHub repo links as well
            as available update.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeClientInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.HelpUrl">
            <summary>
            Returns the neonKUBE help URL.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.GitHubUrl">
            <summary>
            Returns the neonKUBE GitHub repository URL.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.ReleaseNotesUrl">
            <summary>
            Returns the URL for the installed release notes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.UpdateVersion">
            <summary>
            Returns the version for the latest available neonKUBE update.
            This will be <c>null</c> when there are no updates.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.UpdateUrl">
            <summary>
            Returns the URL for the latest available neonKUBE update.
            This will be <c>null</c> when there are no updates.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeClientInfo.UpdateReleaseNotesUrl">
            <summary>
            Returns the URL for the latest available neonKUBE update
            release notes.  This will be <c>null</c> when there are 
            no updates.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeDashboardConfig">
            <summary>
            Manages the Kubernetes dashboard YAML configurations.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeDashboardConfig.GetDashboardConfigFor(System.String)">
            <summary>
            Returns the dashboard configuration to be used for the specified version
            of Kubernetes.
            </summary>
            <param name="kubernetesVersion">The target Kubernetes version.</param>
            <returns>The dashboard version and its YAML configuration file.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if there isn't a known compatble dashboard.</exception>
        </member>
        <member name="F:Neon.Kube.KubeDashboardConfig.DashboardYaml_1_10_1">
            <summary>
            Modified YAML for Dashboard 1.10.1
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeSetupInfo">
            <summary>
            Describes the details required to setup a Kubernetes cluster.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetupInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.Versions">
            <summary>
            Lists the installed component versions.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeCtlLinuxUri">
            <summary>
            The <b>kubectl</b> binary download URI for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeCtlOsxUri">
            <summary>
            The <b>kubectl</b> binary download URI for OS/X.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeCtlWindowsUri">
            <summary>
            The <b>kubectl</b> binary download URI for Windows.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeAdmLinuxUri">
            <summary>
            The <b>kubeadm</b> binary download URI for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeletLinuxUri">
            <summary>
            The <b>kubelet</b> binary download URI for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeAdmPackageUbuntuVersion">
            <summary>
            The Ubuntu package version for <b>kubeadm</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeCtlPackageUbuntuVersion">
            <summary>
            The Ubuntu package version for <b>kubectl</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeletPackageUbuntuVersion">
            <summary>
            The Ubuntu package version for <b>kubelet</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.DockerPackageUbuntuUri">
            <summary>
            The Docker package for Ubuntu.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.HelmLinuxUri">
            <summary>
            The Helm binary URL for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.HelmOsxUri">
            <summary>
            The Helm binary URL for OS/X.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.HelmWindowsUri">
            <summary>
            The Helm binary URL for Windows.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.CalicoRbacYamlUri">
            <summary>
            The Calico RBAC rules download (YAML for kubectl).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.CalicoSetupYamlUri">
            <summary>
            The Calico setup download (YAML for kubectl).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.IstioLinuxUri">
            <summary>
            The Istio binary URL for Linux.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupInfo.KubeDashboardYaml">
            <summary>
            <para>
            The Kubernetes Dashboard configuration YAML.
            </para>
            <note>
            See the remarks for information on embedded variables.
            </note>
            </summary>
            <remarks>
            The YAML returned includes two variables <b>$&lt;CERTIFICATE&gt;</b> and <b>$&lt;PRIVATEKEY&gt;</b> that 
            need to be replaced with the custom certificate and private key the dashboard will use to
            secure the site.  These must be passed as the PEM encoded certificate and key converted into
            a single line of base-64 text.
            </remarks>
        </member>
        <member name="T:Neon.Kube.KubeSetupVersions">
            <summary>
            Indicates the versions for the installed components.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetupVersions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupVersions.Kubernetes">
            <summary>
            The Kubernetes version.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupVersions.KubernetesDashboard">
            <summary>
            The Kubernetes dashboard version;
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupVersions.Docker">
            <summary>
            The Docker version.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupVersions.Helm">
            <summary>
            The Helm version.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupVersions.Calico">
            <summary>
            The Calico version.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupVersions.Istio">
            <summary>
            The Istio version.
            </summary>
        </member>
        <member name="T:Neon.Kube.HostingManager">
            <summary>
            Base class for environment specific hosting managers. 
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManager.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManager.Dispose">
            <summary>
            Releases any important resources associated with the instance.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManager.Dispose(System.Boolean)">
            <summary>
            Releases any important resources associated with the instance.
            </summary>
            <param name="disposing">Pass <c>true</c> if the instance is being disposed as opposed to being finalized.</param>
        </member>
        <member name="P:Neon.Kube.HostingManager.HostUsername">
            <summary>
            The initial host username to use when creating and/or configuring cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManager.HostPassword">
            <summary>
            The initial host password to use when creating and/or configuring cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManager.ShowStatus">
            <summary>
            Specifies whether the class should print setup status to the console.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManager.MaxParallel">
            <summary>
            The maximum number of nodes that will execute provisioning steps in parallel.  This
            defaults to <b>5</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManager.WaitSeconds">
            <summary>
            Number of seconds to delay after specific operations (e.g. to allow services to stablize).
            This defaults to <b>0.0</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManager.IsProvisionNOP">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.Validate(Neon.Kube.ClusterDefinition)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.Provision(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.GetSshEndpoint(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManager.AddPostProvisionSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.HostingManager.DrivePrefix">
            <inheritdoc/>
        </member>
        <member name="P:Neon.Kube.HostingManager.RequiresAdminPrivileges">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.HostingManagerFactory">
            <summary>
            Provides for the creation of <see cref="T:Neon.Kube.HostingManager"/> implementations
            for a target hosting environment.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingManagerFactory.Loader">
            <summary>
            <b>INTERNAL USE ONLY:</b> The driver providing low-level access to hosting
            manager implementations.  This is initialized by a call to <c>HostingLoader.Initialize()</c>
            defined withing the <b>Neon.Kube.Hosting</b> assembly.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.#ctor(System.Action)">
            <summary>
            Constructor.
            </summary>
            <param name="loaderAction">
            The optional action that will initialize the static <see cref="P:Neon.Kube.HostingManagerFactory.Loader"/> property with
            the <see cref="T:Neon.Kube.IHostingLoader"/> implemention.
            </param>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.CheckInitialized">
            <summary>
            Ensures that the factory has been initialized.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.GetMaster(Neon.Kube.ClusterProxy,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.IsCloudEnvironment(Neon.Kube.HostingEnvironments)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.HostingManagerFactory.Validate(Neon.Kube.ClusterDefinition)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.HostingProviderAttribute">
            <summary>
            Use this attribute to identify <see cref="T:Neon.Kube.IHostingManager"/> class implementations
            so they can be discovered by the <see cref="T:Neon.Kube.HostingManager"/> class.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingProviderAttribute.#ctor(Neon.Kube.HostingEnvironments)">
            <summary>
            Constructor.
            </summary>
            <param name="environment">Specifies the target hosting environment.</param>
        </member>
        <member name="P:Neon.Kube.HostingProviderAttribute.Environment">
            <summary>
            Returns the target hosting environment supported by the tagged <see cref="T:Neon.Kube.IHostingManager"/>.
            </summary>
        </member>
        <member name="T:Neon.Kube.IHostingLoader">
            <summary>
            <b>INTERNAL USE ONLY:</b> This interface describes a low-level class implementations
            that are registered by the <b>Neon.Kube.Hosting</b> class library with 
            <see cref="T:Neon.Kube.HostingManager"/> to provide a way to access the various hosting
            implementations without having to bake this into the <b>Neon.Kube</b> assembly.
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingLoader.GetManager(Neon.Kube.ClusterProxy,System.String)">
            <summary>
            Returns the <see cref="T:Neon.Kube.HostingManager"/> for a specific environment.
            </summary>
            <param name="cluster">The cluster being managed.</param>
            <param name="logFolder">
            The folder where log files are to be written, otherwise or <c>null</c> or 
            empty if logging is disabled.
            </param>
            <returns>
            The <see cref="T:Neon.Kube.HostingManager"/> or <c>null</c> if no hosting manager
            could be located for the specified cluster environment.
            </returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the multiple managers implement support for the same hosting environment.</exception>
        </member>
        <member name="M:Neon.Kube.IHostingLoader.IsCloudEnvironment(Neon.Kube.HostingEnvironments)">
            <summary>
            Determines whether a hosting environment is hosted in the cloud.
            </summary>
            <param name="environment">The target hosting environment.</param>
            <returns><c>true</c> for cloud environments.</returns>
        </member>
        <member name="T:Neon.Kube.IHostingManager">
            <summary>
            Interface describing the hosting environment managers.
            </summary>
        </member>
        <member name="P:Neon.Kube.IHostingManager.IsProvisionNOP">
            <summary>
            Returns <c>true</c> if the provisioning operation actually does nothing.
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManager.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Verifies that a cluster is valid for the hosting manager, customizing 
            properties as required.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if any problems were detected.</exception>
        </member>
        <member name="M:Neon.Kube.IHostingManager.Provision(System.Boolean)">
            <summary>
            Creates and initializes the cluster resources such as the virtual machines,
            networks, load balancers, network security groups, public IP addresses etc.
            </summary>
            <param name="force">
            Indicates that any existing resources (such as virtual machines) 
            are to be replaced or overwritten during privisioning.  The actual interpretation
            of this parameter is specific to each hosting manager implementation.
            </param>
            <returns><c>true</c> if the operation was successful.</returns>
        </member>
        <member name="M:Neon.Kube.IHostingManager.GetSshEndpoint(System.String)">
            <summary>
            Returns the FQDN or IP address (as a string) and the port to use
            to establish a SSH connection to a node while provisioning is in
            progress.
            </summary>
            <param name="nodeName">The target node's name.</param>
            <returns>A <b>(string Address, int Port)</b> tuple.</returns>
            <remarks>
            Hosting platforms such as Azure that may not assign public IP addresses
            to cluster nodes will return the IP address of the traffic manager and
            a temporary NAT port for the node.
            </remarks>
        </member>
        <member name="M:Neon.Kube.IHostingManager.AddPostProvisionSteps(Neon.Kube.SetupController{Neon.Kube.NodeDefinition})">
            <summary>
            Adds any necessary post-provisioning steps to the step controller.
            </summary>
            <param name="controller">The target setup controller.</param>
        </member>
        <member name="P:Neon.Kube.IHostingManager.DrivePrefix">
            <summary>
            <para>
            Returns the prefix for block devices that will be attached to
            the host machines.  For many hosting environments this will be
            <b>sd</b>, indicating that drives will be attached like: 
            <b>/dev/sda</b>, <b>/dev/sdb</b>, <b>/dev/sdc</b>...
            </para>
            <para>
            This may be different though for some hosting environment.
            XenServer for example, uses the <b>xvd</b> prefix and attaches
            drives as <b>/dev/sda</b>, <b>/dev/sdb</b>, <b>/dev/sdc</b>...
            </para>
            </summary>
        </member>
        <member name="P:Neon.Kube.IHostingManager.RequiresAdminPrivileges">
            <summary>
            Returns <c>true</c> if provisoning requires that the user has
            administrator privileges.
            </summary>
        </member>
        <member name="T:Neon.Kube.IHostingManagerFactory">
            <summary>
            Describes the implementation for mapping a hosting environment into
            a concrete <see cref="T:Neon.Kube.IHostingManager"/> implementation.
            </summary>
        </member>
        <member name="M:Neon.Kube.IHostingManagerFactory.GetMaster(Neon.Kube.ClusterProxy,System.String)">
            <summary>
            Returns the <see cref="T:Neon.Kube.HostingManager"/> implementation for a specific environment.
            </summary>
            <param name="cluster">The cluster being managed.</param>
            <param name="logFolder">
            The folder where log files are to be written, otherwise or <c>null</c> or 
            empty if logging is disabled.
            </param>
            <returns>
            The <see cref="T:Neon.Kube.HostingManager"/> or <c>null</c> if no hosting manager
            could be located for the specified cluster environment.
            </returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the multiple managers implement support for the same hosting environment.</exception>
        </member>
        <member name="M:Neon.Kube.IHostingManagerFactory.IsCloudEnvironment(Neon.Kube.HostingEnvironments)">
            <summary>
            Determines whether a hosting environment is hosted in the cloud.
            </summary>
            <param name="environment">The target hosting environment.</param>
            <returns><c>true</c> for cloud environments.</returns>
        </member>
        <member name="T:Neon.Kube.KubeConst">
            <summary>
            Important cluster constants.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.NeonProdRegistry">
            <summary>
            Identifies the production cluster public Docker registry.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.NeonDevRegistry">
            <summary>
            Identifies the development cluster public Docker registry.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConst.NeonBranchRegistry">
            <summary>
            Returns the appropriate public Docker registry to be used for the git branch the
            assembly was built from.  This returns <see cref="F:Neon.Kube.KubeConst.NeonProdRegistry"/> for release
            branches and <see cref="F:Neon.Kube.KubeConst.NeonDevRegistry"/> for all other branches.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.DefaultUsername">
            <summary>
            The default username for component dashboards and management tools (like Ceph and RabbitMQ).
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.DefaultPassword">
            <summary>
            The default password for component dashboards and management tools (like Ceph and RabbitMQ).
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MaxJitter">
            <summary>
            Timespan used to introduce some random jitter before an operation
            is performed.  This is typically used when it's possible that a 
            large number of entities will tend to perform an operation at
            nearly the same time (e.g. when a message signalling that an
            operation should be performed is broadcast to a large number
            of listeners.  Components can pass this to <see cref="M:Neon.Common.NeonHelper.PseudoRandomTimespan(System.TimeSpan)"/>
            to obtain a random delay timespan.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.DefaulVmTemplateUsername">
            <summary>
            The root account username baked into the Hyper-V and XenServer cluster
            host node virtual machine templates.  This is also used as the username
            for hosts provisioned to clouds like Azure, Aws, and Google Cloud. 
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.DefaulVmTemplatePassword">
            <summary>
            The root account password baked into the Hyper-V and XenServer cluster
            host node virtual machine templates.  Note that this will not be
            used for hosts provisioned on public clouds for security reasons.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MaxMasters">
            <summary>
            The maximum number of cluster master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinMasterCores">
            <summary>
            The minimum number of cores required by master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinWorkerCores">
            <summary>
            The minimum number of cores required by worker nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinMasterRamMiB">
            <summary>
            The minimum RAM (MiB) required for master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinWorkerRamMiB">
            <summary>
            The minimum RAM (MiB) required for worker nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinMasterNics">
            <summary>
            The minimum required network interface cards for master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.MinWorkerNics">
            <summary>
            The minimum required network interface cards for worker nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.DockerPublicRegistry">
            <summary>
            Hostname of the Docker public registry.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.RootUser">
            <summary>
            The root Kubernetes context username for provisioned clusters. 
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.TestModeFolderVar">
            <summary>
            The environment variable used for unit testing that indicates
            that <see cref="T:Neon.Kube.KubeHelper"/> should run in test mode.  The
            value will be set to the path of the temporary directory where
            the Kubernetes and neonKUBE files will be located.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.DesktopServicePort">
            <summary>
            The default local network port for the neonKUBE desktop API
            used by the <b>neon-cli</b> tool for communicating with
            the neonKUBE desktop.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.KubectlProxyPort">
            <summary>
            The default local network port where <b>kubectl proxy</b> will 
            listen and forward traffic to the Kubernetes API server.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.KubeDashboardProxyPort">
            <summary>
            The default local network port used for proxying requests to
            the Kubernetes dashboard for the current cluster.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SysAdminUser">
            <summary>
            The default host machine sysadmin username.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SysAdminUID">
            <summary>
            The default host machine sysadmin user ID.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SysAdminGroup">
            <summary>
            The default host machine sysadmin group.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.SysAdminGID">
            <summary>
            The default host machine sysadmin group ID.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.ContainerUser">
            <summary>
            The default host machine container username.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.ContainerUID">
            <summary>
            <para>
            The default host machine container user ID.
            </para>
            <note>
            This explictly set to the first valid normal Linux user ID to
            be compatible with as many Docker images as possible.
            </note>
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.ContainerGroup">
            <summary>
            The default host machine container group name.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeConst.ContainerGID">
            <summary>
            <para>
            The default host machine container group ID.
            </para>
            <note>
            This explictly set to the first valid normal Linux user ID to
            be compatible with as many Docker images as possible.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeHelper">
            <summary>
            cluster related utilties.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.ClearCachedItems">
            <summary>
            Clears all cached items.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetLogger(Neon.Diagnostics.INeonLogger)">
            <summary>
            Explicitly sets the class <see cref="T:Neon.Diagnostics.INeonLogger"/> implementation.  This defaults to
            a reasonable value.
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetTestMode(System.String)">
            <summary>
            Puts <see cref="T:Neon.Kube.KubeHelper"/> into test mode to support unit testing.  This
            changes the folders where Kubernetes and neonKUBE persists their state to
            directories beneath the folder passed.  This also modifies the KUBECONFIG
            environment variable to reference the new location.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.ResetTestMode">
            <summary>
            Resets the test mode, restoring normal operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if a parent process set test mode.</exception>
        </member>
        <member name="P:Neon.Kube.KubeHelper.IsTestMode">
            <summary>
            Returns <c>true</c> if the class is running in test mode.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.Desktop">
            <summary>
            Returns the <see cref="T:Neon.Kube.DesktopClient"/> suitable for communicating
            with the neonKUBE desktop application.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.ReadFileTextWithRetry(System.String)">
            <summary>
            Reads a file as text, retrying if the file is already open.
            </summary>
            <param name="path">The file path.</param>
            <returns>The file text.</returns>
            <remarks>
            It's possible for the configuration file to be temporarily opened
            by another process (e.g. the neonKUBE Desktop application or a 
            command line tool).  Rather than throw an exception, we're going
            to retry the operation a few times.
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeHelper.WriteFileTextWithRetry(System.String,System.String)">
            <summary>
            Writes a file as text, retrying if the file is already open.
            </summary>
            <param name="path">The file path.</param>
            <param name="text">The text to be written.</param>
            <remarks>
            It's possible for the configuration file to be temporarily opened
            by another process (e.g. the neonKUBE Desktop application or a 
            command line tool).  Rather than throw an exception, we're going
            to retry the operation a few times.
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ClientConfig">
            <summary>
            Accesses the neonKUBE desktop client configuration.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.LoadClientConfig">
            <summary>
            Loads or reloads the <see cref="P:Neon.Kube.KubeHelper.ClientConfig"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SaveClientState">
            <summary>
            Persists the <see cref="P:Neon.Kube.KubeHelper.ClientConfig"/> to disk.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.EncryptFile(System.String)">
            <summary>
            Encrypts a file or directory when supported by the underlying operating system
            and file system.  Currently, this only works on non-HOME versions of Windows
            and NTFS file systems.  This fails silently.
            </summary>
            <param name="path">The file or directory path.</param>
            <returns><c>true</c> if the operation was successful.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.EncryptSensitiveFiles">
            <summary>
            Ensures that sensitive folders and files on the local workstation are encrypted at rest
            for security purposes.  These include the users <b>.kube</b>, <b>.neonkube</b>, and any
            the <b>OpenVPN</b> if it exists.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.InToolContainer">
            <summary>
            Returns <c>true</c> if the current application is running in the special 
            <b>neon-cli</b> container as a shimmed application.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.HostPlatform">
            <summary>
            Returns the <see cref="T:Neon.Kube.KubeHostPlatform"/> for the current workstation.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.Headend">
            <summary>
            Returns a <see cref="T:Neon.Kube.HeadendClient"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetNeonKubeUserFolder(System.Boolean)">
            <summary>
            Returns the path the folder holding the user specific Kubernetes files.
            </summary>
            <param name="ignoreNeonToolContainerVar">
            Optionally ignore the presence of a <b>NEON_TOOL_CONTAINER</b> environment 
            variable.  Defaults to <c>false</c>.
            </param>
            <returns>The folder path.</returns>
            <remarks>
            The actual path return depends on the presence of the <b>NEON_TOOL_CONTAINER</b>
            environment variable.  <b>NEON_TOOL_CONTAINER=1</b> then we're running in a 
            shimmed Docker container and we'll expect the cluster login information to be mounted
            at <b>/neonkube</b>.  Otherwise, we'll return a suitable path within the 
            current user's home directory.
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetKubeUserFolder(System.Boolean)">
            <summary>
            Returns the path the folder holding the user specific Kubernetes configuration files.
            </summary>
            <param name="ignoreNeonToolContainerVar">
            Optionally ignore the presence of a <b>NEON_TOOL_CONTAINER</b> environment 
            variable.  Defaults to <c>false</c>.
            </param>
            <returns>The folder path.</returns>
            <remarks>
            The actual path return depends on the presence of the <b>NEON_TOOL_CONTAINER</b>
            environment variable.  <b>NEON_TOOL_CONTAINER=1</b> then we're running in a 
            shimmed Docker container and we'll expect the cluster login information to be mounted
            at <b>/$HOME/.kube</b>.  Otherwise, we'll return a suitable path within the 
            current user's home directory.
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeHelper.RunFolder">
            <summary>
            Returns the directory path where the [neon run CMD ...] will copy secrets and run the command.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.LogFolder">
            <summary>
            Returns the default directory path where neon-cli logs will be written.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.KubeConfigPath">
            <summary>
            Returns the path to the Kubernetes configuration file.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ClustersFolder">
            <summary>
            Returns the path the folder containing cluster related files (including kube context 
            extension), creating the folder if it doesn't already exist.
            </summary>
            <returns>The folder path.</returns>
            <remarks>
            <para>
            This folder will exist on developer/operator workstations that have used the <b>neon-cli</b>
            to deploy and manage clusters.  Each known cluster will have a JSON file named
            <b><i>NAME</i>.context.json</b> holding the serialized <see cref="T:Neon.Kube.KubeContextExtension"/> 
            information for the cluster, where <i>NAME</i> maps to a cluster configuration name
            within the <c>kubeconfig</c> file.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeHelper.PasswordsFolder">
            <summary>
            Returns path to the folder holding the encryption passwords.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.DesktopFolder">
            <summary>
            Returns path to the neonKUBE desktop application state folder.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.CacheFolder">
            <summary>
            Returns the path the folder containing cached files for various environments.
            </summary>
            <returns>The folder path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetPlatformCacheFolder(Neon.Kube.KubeHostPlatform)">
            <summary>
            Returns the path to the folder containing cached files for the specified platform.
            </summary>
            <param name="platform">Identifies the platform.</param>
            <returns>The folder path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetCachedComponentPath(Neon.Kube.KubeHostPlatform,System.String,System.String)">
            <summary>
            Returns the path to the cached file for a specific named component with optional version.
            </summary>
            <param name="platform">Identifies the platform.</param>
            <param name="component">The component name.</param>
            <param name="version">The component version (or <c>null</c>).</param>
            <returns>The component file path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetContextExtensionPath(Neon.Kube.KubeContextName)">
            <summary>
            Returns the path to the kubecontext extension file path for a specific context
            by raw name.
            </summary>
            <param name="contextName">The kubecontext name.</param>
            <returns>The file path.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.GetContextExtension(Neon.Kube.KubeContextName)">
            <summary>
            Returns the kubecontext extension for the structured configuration name.
            </summary>
            <param name="name">The structured context name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeContextExtension"/> or <c>null</c>.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.TempFolder">
            <summary>
            Returns the path the neonFORGE temporary folder, creating the folder if it doesn't already exist.
            </summary>
            <returns>The folder path.</returns>
            <remarks>
            This folder will exist on developer/operator workstations that have used the <b>neon-cli</b>
            to deploy and manage clusters.  The client will use this to store temporary files that may
            include sensitive information because these folders are encrypted on disk.
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeHelper.VmTemplatesFolder">
            <summary>
            Returns the path to the current user's cluster virtual machine templates
            folder, creating the directory if it doesn't already exist.
            </summary>
            <returns>The path to the cluster setup folder.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ProgramFolder">
            <summary>
            Returns the path to the neonKUBE program folder.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.PwshPath">
            <summary>
            Returns the path to the Powershell Core executable to be used.
            This will first examine the <b>NEONKUBE_PROGRAM_FOLDER</b> environment
            variable to see if the installed version of Powershell Core should
            be used, otherwise it will simply return <b>pwsh.exe</b> so that
            the <b>PATH</b> will be searched.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.LoadConfig">
            <summary>
            Loads or reloads the Kubernetes configuration.
            </summary>
            <returns>The <see cref="P:Neon.Kube.KubeHelper.Config"/>.</returns>
        </member>
        <member name="P:Neon.Kube.KubeHelper.Config">
            <summary>
            Returns the user's current <see cref="P:Neon.Kube.KubeHelper.Config"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetConfig(Neon.Kube.KubeConfig)">
            <summary>
            Rewrites the local kubeconfig file.
            </summary>
            <param name="config">The new configuration.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.InitContext(Neon.Kube.KubeConfigContext)">
            <summary>
            This is used for special situations for setting up a cluster to
            set an uninitialized Kubernetes config context as the current
            <see cref="P:Neon.Kube.KubeHelper.CurrentContext"/>.
            </summary>
            <param name="context">The context being set or <c>null</c> to reset.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetCurrentContext(Neon.Kube.KubeContextName)">
            <summary>
            Sets the current Kubernetes config context.
            </summary>
            <param name="contextName">The context name of <c>null</c> to clear the current context.</param>
            <exception cref="T:System.ArgumentException">Thrown if the context specified doesnt exist.</exception>
        </member>
        <member name="M:Neon.Kube.KubeHelper.SetCurrentContext(System.String)">
            <summary>
            Sets the current Kubernetes config context by string name.
            </summary>
            <param name="contextName">The context name of <c>null</c> to clear the current context.</param>
            <exception cref="T:System.ArgumentException">Thrown if the context specified doesnt exist.</exception>
        </member>
        <member name="P:Neon.Kube.KubeHelper.CurrentContext">
            <summary>
            Returns the <see cref="P:Neon.Kube.KubeHelper.CurrentContext"/> for the connected cluster
            or <c>null</c> when there is no current context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.CurrentContextName">
            <summary>
            Returns the current context's <see cref="P:Neon.Kube.KubeHelper.CurrentContextName"/> or <c>null</c>
            if there's no current context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ClusterCertificate">
            <summary>
            Returns the Kuberneties API service certificate for the current
            cluster context or <c>null</c> if we're not connected to a cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeHelper.ClientCertificate">
            <summary>
            Returns the Kuberneties API client certificate for the current
            cluster context or <c>null</c> if we're not connected to a cluster.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHelper.FindCertificateByFriendlyName(System.Security.Cryptography.X509Certificates.X509Store,System.String)">
            <summary>
            Looks for a certificate with a friendly name.
            </summary>
            <param name="store">The certificate store.</param>
            <param name="friendlyName">The case insensitive friendly name.</param>
            <returns>The certificate or <c>null</c> if one doesn't exist by the name.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.InstallKubeCtl(Neon.Kube.KubeSetupInfo)">
            <summary>
            <para>
            Ensures that <b>kubectl</b> tool whose version is at least as great as the Kubernetes
            cluster version is installed to the <b>neonKUBE</b> programs folder by copying the
            tool from the cache if necessary.
            </para>
            <note>
            This will probably require elevated privileges.
            </note>
            <note>
            This assumes that <b>kubectl</b> has already been downloaded and cached and also that 
            more recent <b>kubectl</b> releases are backwards compatible with older deployed versions
            of Kubernetes.
            </note>
            </summary>
            <param name="setupInfo">The KUbernetes setup information.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.InstallHelm(Neon.Kube.KubeSetupInfo)">
            <summary>
            <para>
            Ensures that <b>helm</b> tool whose version is at least as great as the requested
            cluster version is installed to the <b>neonKUBE</b> programs folder by copying the
            tool from the cache if necessary.
            </para>
            <note>
            This will probably require elevated privileges.
            </note>
            <note>
            This assumes that <b>Helm</b> has already been downloaded and cached and also that 
            more recent <b>Helm</b> releases are backwards compatible with older deployed versions
            of Tiller.
            </note>
            </summary>
            <param name="setupInfo">The KUbernetes setup information.</param>
        </member>
        <member name="M:Neon.Kube.KubeHelper.Kubectl(System.Object[])">
            <summary>
            Executes a <b>kubectl</b> command on the local workstation.
            </summary>
            <param name="args">The command arguments.</param>
            <returns>The <see cref="T:Neon.Common.ExecuteResponse"/>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeHelper.LookupPassword(System.String)">
            <summary>
            Looks up a password given its name.
            </summary>
            <param name="passwordName">The password name.</param>
            <returns>The password value.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the password doesn't exist.</exception>
        </member>
        <member name="T:Neon.Kube.KubeHostFolders">
            <summary>
            Enumerates the paths of important directories on cluster 
            host servers.
            </summary>
            <remarks>
            <note>
            Although these constants are referenced by C# code, Linux scripts 
            are likely to hardcode these strings.  You should do a search and
            replace whenever you change any of these values.
            </note>
            <note>
            Changing any of these will likely break [neon-cli] interactions
            with existing clusters that use the previous folder path.  Be
            ver sure you know what you're doing when you make changes.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Archive(System.String)">
            <summary>
            Path to a user archive directory.
            </summary>
            <param name="username">The username.</param>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Bin">
            <summary>
            Path to the cluster executable files directory.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Config">
            <summary>
            Path to the cluster configuration directory.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Download(System.String)">
            <summary>
            Path to the user download directory.
            </summary>
            <param name="username">The username.</param>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Exec(System.String)">
            <summary>
            The user folder where cluster tools can upload, unpack, and then
            execute <see cref="T:Neon.Kube.CommandBundle"/>s as well as store temporary
            command output files.
            </summary>
            <param name="username">The username.</param>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Home(System.String)">
            <summary>
            Path to a user archive directory.
            </summary>
            <param name="username">The username.</param>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Scripts">
            <summary>
            Path to the cluster management scripts directory.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Setup">
            <summary>
            Path to the cluster setup scripts directory.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.State">
            <summary>
            Path to the cluster setup state directory.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostFolders.Tmpfs">
            <summary>
            Root folder on the local tmpfs (shared memory) folder where 
            cluster will persist misc temporary files.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeHostFolders.Upload(System.String)">
            <summary>
            Path to a user upload directory.
            </summary>
            <param name="username">The username.</param>
        </member>
        <member name="T:Neon.Kube.KubeHostPlatform">
            <summary>
            Enumerates the operating systems supported by neonKUBE.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPlatform.Linux">
            <summary>
            Linux.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPlatform.Windows">
            <summary>
            Windows.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPlatform.Osx">
            <summary>
            OS/X
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeHostPorts">
            <summary>
            Defines reserved local node and cluster network ports.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPorts.KubeApiServer">
            <summary>
            Port exposed by the Kubernetes API servers on the master nodes.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPorts.KubeFirstNodePort">
            <summary>
            The first port reserved by Kubernetes for exposing service node ports.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPorts.KubeLastNodePort">
            <summary>
            The last port reserved by Kubernetes for exposing service node ports.
            </summary>
        </member>
        <member name="F:Neon.Kube.KubeHostPorts.KubeDashboard">
            <summary>
            The node port exposed by the Kubernetes dashboard service.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfig">
            <summary>
            Used to manage serialization of Kubernetes <b>kubeconfig</b> files. 
            These are used to manage cluster contexts on client machines:
            <a href="https://github.com/eBay/Kubernetes/blob/master/docs/user-guide/kubeconfig-file.md">more information</a>.
            </summary>
            <remarks>
            <note>
            This implementation currently supports only the a single kubeconfig
            located at <c>$HOME/.kube/config</c> (within the current user's
            HOME folder).  The <c>KUBECONFIG</c> environment variable is ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeConfig.Load">
            <summary>
            Reads and returns the current KubeConfig.
            </summary>
            <returns>The parsed <see cref="T:Neon.Kube.KubeConfig"/> or an empty config if the file doesn't exist.</returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown when the current config is invalid.</exception>
        </member>
        <member name="M:Neon.Kube.KubeConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.ApiVersion">
            <summary>
            The cluster API server protocol version (defaults to <b>v1</b>).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Kind">
            <summary>
            Identifies the document type: <b>Config</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Clusters">
            <summary>
            The list of cluster configurations.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Contexts">
            <summary>
            The list of config contexts.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.CurrentContext">
            <summary>
            The name of the current context or <c>null</c> when there is no current context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Preferences">
            <summary>
            The optional dictionary of preferences.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Users">
            <summary>
            The list of user configurations.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfig.Context">
            <summary>
            Returns the current context or <c>null</c>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfig.GetCluster(System.String)">
            <summary>
            Returns the named cluster.
            </summary>
            <param name="name">The cluster name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeConfigCluster"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeConfig.GetUser(System.String)">
            <summary>
            Returns the named user.
            </summary>
            <param name="name">The user name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeConfigUser"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeConfig.GetContext(System.String)">
            <summary>
            Returns the named context (using a raw context name).
            </summary>
            <param name="rawName">The raw context name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeConfigContext"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeConfig.GetContext(Neon.Kube.KubeContextName)">
            <summary>
            Returns the named context (using a structured context name).
            </summary>
            <param name="name">The raw context name.</param>
            <returns>The <see cref="T:Neon.Kube.KubeConfigContext"/> or <c>null</c>.</returns>
        </member>
        <member name="M:Neon.Kube.KubeConfig.SetContext(Neon.Kube.KubeConfigContext,Neon.Kube.KubeConfigCluster,Neon.Kube.KubeConfigUser,System.Boolean)">
            <summary>
            Adds or updates a kubecontext.
            </summary>
            <param name="context">The new context.</param>
            <param name="cluster">The context cluster information.</param>
            <param name="user">The context user information.</param>
            <param name="noSave">Optionally prevent context save after the change.</param>
        </member>
        <member name="M:Neon.Kube.KubeConfig.RemoveContext(Neon.Kube.KubeConfigContext,System.Boolean)">
            <summary>
            Removes a kubecontext if it exists.
            </summary>
            <param name="context">The context to be removed.</param>
            <param name="noSave">Optionally prevent context save after the change.</param>
        </member>
        <member name="M:Neon.Kube.KubeConfig.Validate">
            <summary>
            Validates the configuration.
            </summary>
            <exception cref="T:Neon.Kube.KubeException">Thrown when the current config is invalid.</exception>
        </member>
        <member name="M:Neon.Kube.KubeConfig.SetContext(System.String)">
            <summary>
            Sets the current context.
            </summary>
            <param name="contextName">The name of the current context or <c>null</c> to deselect the context.</param>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the context does not exist.</exception>
        </member>
        <member name="M:Neon.Kube.KubeConfig.Save">
            <summary>
            Persists the KubeContext along with any neonKUBE extension information to the
            local user folder.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigCluster">
            <summary>
            Describes a Kubernetes cluster configuration.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigCluster.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigCluster.Name">
            <summary>
            The local nickname for the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigCluster.Properties">
            <summary>
            The cluster properties.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigClusterProperties">
            <summary>
            Describes a Kubernetes cluster's properties.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigClusterProperties.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigClusterProperties.Server">
            <summary>
            Fully qualified URL to the cluster's API server.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigClusterProperties.CertificateAuthorityData">
            <summary>
            Optional path to the cluster certificate authority file.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigClusterProperties.InsecureSkipTlsVerify">
            <summary>
            Optionally disables TLS verification of the server.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigContext">
            <summary>
            Describes a Kubernetes context.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigContext.#ctor(Neon.Kube.KubeContextName)">
            <summary>
            Constructs a configuration from a structured name.
            </summary>
            <param name="contextName">The structured context name.</param>
        </member>
        <member name="P:Neon.Kube.KubeConfigContext.Name">
            <summary>
            The local nickname for the context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContext.Properties">
            <summary>
            The context properties.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContext.Extension">
            <summary>
            The context extension information for the context.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigContextProperties">
            <summary>
            Describes a Kubernetes context properties.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigContextProperties.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContextProperties.Cluster">
            <summary>
            The optional cluster nickname.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContextProperties.Namespace">
            <summary>
            The optional namespace.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigContextProperties.User">
            <summary>
            The optional user nickname.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigUser">
            <summary>
            Describes a Kubernetes user configuration.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigUser.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUser.Name">
            <summary>
            The local nickname for the user.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUser.Properties">
            <summary>
            The user properties.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeConfigUserProperties">
            <summary>
            Describes a Kubernetes user's credentials.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeConfigUserProperties.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.Token">
            <summary>
            The optional authentication token (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.ClientCertificateData">
            <summary>
            The optional path to the client certificate (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.ClientKeyData">
            <summary>
            The optional client key data.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.Username">
            <summary>
            The optional username (or <c>null</c>).
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeConfigUserProperties.Password">
            <summary>
            The optional password (or <c>null</c>).
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeContextExtension">
            <summary>
            Holds extended cluster information such as the cluster definition and
            node SSH credentials.  These records are persisted as files to the 
            <b>$HOME/.neonkube/clusters</b> folder in YAML files named like
            <b><i>USER</i>@<i>NAME</i>.context.yaml</b>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="path">Optionally specifies the path to the extension file.</param>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.ClusterId">
            <summary>
            Set to a globally unique ID to identify the cluster.  This defaults to 
            a gewnerated unique value.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.ClusterDefinition">
            <summary>
            The cluster definition.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SetupDetails">
            <summary>
            Holds additional information required during setup as well as for
            provisoning additional clsuter nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshUsername">
            <summary>
            The SSH root username.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshPassword">
            <summary>
            The SSH root password.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshCredentials">
            <summary>
            Returns a <see cref="P:Neon.Kube.KubeContextExtension.SshCredentials"/> instance suitable for connecting to
            a cluster node.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.KubernetesDashboardCertificate">
            <summary>
            The custom certificate generated for the Kubernetes dashboard PEM.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshNodeFingerprint">
            <summary>
            The SSH RSA private key fingerprint used to secure the cluster nodes.  This is a
            MD5 hash encoded as hex bytes separated by colons.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshNodePrivateKey">
            <summary>
            The SSH RSA private key used to secure the cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshNodePublicKey">
            <summary>
            The SSH RSA private key used to secure the cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextExtension.SshClientKey">
            <summary>
            The public and private parts of the SSH client key used to
            authenticate an SSH session with a cluster node.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.SetPath(System.String)">
            <summary>
            Sets the file path where the extension will be persisted.
            </summary>
            <param name="path">The target path.</param>
        </member>
        <member name="M:Neon.Kube.KubeContextExtension.Save">
            <summary>
            <para>
            Persists the extension data.
            </para>
            <note>
            A valid path must have been passed to the constructor for this to work.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeContextName">
            <summary>
            Handles the parsing of a Kubernetes context name which by convention
            encodes the user, cluster, and namespace as a string.
            </summary>
            <remarks>
            <para>
            neonKUBE encodes context names like:
            </para>
            <para>
            <b>USER</b> "@" <b>CLUSTER</b> [ "/" <b>NAMESPACE</b> ]
            </para>
            <para>k
            where <b>USER</b> is the username, <b>CLUSTER</b> identifies the
            cluster and <b>NAMESPACE</b> optionally identifies the Kubernetes
            namespace (which defaults to <b>default</b> when not specified).
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubeContextName.op_Explicit(Neon.Kube.KubeContextName)~System.String">
            <summary>
            Explictly casts a <see cref="T:Neon.Kube.KubeContextName"/> into a <c>string</c>.
            </summary>
            <param name="name">The context name or <c>null</c>.</param>
        </member>
        <member name="M:Neon.Kube.KubeContextName.op_Explicit(System.String)~Neon.Kube.KubeContextName">
            <summary>
            Explictly casts a <c>string</c> into a <see cref="T:Neon.Kube.KubeContextName"/>.
            </summary>
            <param name="name">The context name or <c>null</c>.</param>
        </member>
        <member name="M:Neon.Kube.KubeContextName.op_Equality(Neon.Kube.KubeContextName,Neon.Kube.KubeContextName)">
            <summary>
            Compares <see cref="T:Neon.Kube.KubeContextName"/> for equality.
            </summary>
            <param name="name1">Name 1</param>
            <param name="name2">Name 2</param>
            <returns><c>true</c> if the names are equal.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextName.op_Inequality(Neon.Kube.KubeContextName,Neon.Kube.KubeContextName)">
            <summary>
            Compares <see cref="T:Neon.Kube.KubeContextName"/> for inequality.
            </summary>
            <param name="name1">Name 1</param>
            <param name="name2">Name 2</param>
            <returns><c>true</c> if the names are not equal.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextName.Parse(System.String)">
            <summary>
            Parses a Kubernetes context name like: <b>USER</b> "@" <b>CLUSTER</b> [ "/" <b>NAMESPACE</b> ]
            </summary>
            <param name="text">The input text.</param>
            <returns>The parsed name.</returns>
            <remarks>
            <note>
            The username, cluster, and namespace will be converted to lowercase.
            </note>
            </remarks>
            <exception cref="T:System.FormatException">Thrown if the name is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.KubeContextName.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextName.#ctor(System.String,System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="username">The username.</param>
            <param name="cluster">The cluster name.</param>
            <param name="kubeNamespace">Optionally specifies the namespace (defaults to <b>"default"</b>).</param>
            <remarks>
            <note>
            The username, cluster, and namespace will be converted to lowercase.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.KubeContextName.User">
            <summary>
            Returns the username.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextName.Cluster">
            <summary>
            Returns the cluster name.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeContextName.Namespace">
            <summary>
            Returns the namespace or <b>default</b>.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeContextName.ValidateName(System.String)">
            <summary>
            Validates that a name component includes only nvalid characters.
            </summary>
            <param name="name">The name beoing tested.</param>
            <returns><c>true</c> if the name is OK.</returns>
        </member>
        <member name="M:Neon.Kube.KubeContextName.Validate">
            <summary>
            Ensures that the properties are valid.
            </summary>
            <exception cref="T:System.FormatException">Thrown when there's a problem.</exception>
        </member>
        <member name="M:Neon.Kube.KubeContextName.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.KubeContextName.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.KubeContextName.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.KubeFileDetails">
            <summary>
            Holds the contents and permissions for a downloaded Kubernetes file.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeFileDetails.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeFileDetails.#ctor(System.String,System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
            <param name="text">The file contexts.</param>
            <param name="permissions">Optional file permissions (defaults to <b>600</b>).</param>
            <param name="owner">Optional file owner (defaults to <b>root:root</b>).</param>
        </member>
        <member name="P:Neon.Kube.KubeFileDetails.Text">
            <summary>
            The file text.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeFileDetails.Permissions">
            <summary>
            The file permissions.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeFileDetails.Owner">
            <summary>
            The file owner.
            </summary>
        </member>
        <member name="T:Neon.Kube.KubeLogin">
            <summary>
            Holds all of the information required to import/export a cluster
            login.  This includes the Kubernetes cluster, login, and neonKUBE
            extensions.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeLogin.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeLogin.Cluster">
            <summary>
            The Kubernetes cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeLogin.Context">
            <summary>
            The Kubernetes context.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeLogin.Extensions">
            <summary>
            The context extension information.  This may be <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeLogin.User">
            <summary>
            The Kubernetes user.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeLogin.Validate">
            <summary>
            Ensures that the login information is valid.
            </summary>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the instance is invalid.</exception>
        </member>
        <member name="T:Neon.Kube.KubeSetupDetails">
            <summary>
            Holds details required during setup or for provisioning 
            additional cluster nodes.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubeSetupDetails.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.SetupInfo">
            <summary>
            Identifies the information used to setup the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.SetupPending">
            <summary>
            Indicates whether provisioning is complete but setup is still
            pending for this cluster
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.SshStrongPassword">
            <summary>
            Temporarily holds the strong password during cluster setup.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.HasStrongSshPassword">
            <summary>
            Indicates whether a strong host SSH password was generated for the cluster.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.ClusterJoinCommand">
            <summary>
            The command to be used join nodes to an existing cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubeSetupDetails.MasterFiles">
            <summary>
            Holds files captured from the boot master node that will need to be provisioned
            on the remaining masters.  The dictionary key is the file path and the value 
            specifies the file text, permissions, and owner.
            </summary>
        </member>
        <member name="T:Neon.Kube.SshClientKey">
            <summary>
            Describes a client key used for SSH public key authentication.
            </summary>
            <remarks>
            <note>
            Only <b>RSA</b> keys should be used in production.  Other keys like DSA are
            no longer considered secure.
            </note>
            <para>
            SSH authentication keys have two parts, the public key that needs to be deployed
            to every server machine and the private key that will be retained on client
            machines which will be used to sign authentication challenges by servers.
            </para>
            <para>
            The <see cref="P:Neon.Kube.SshClientKey.PublicPUB"/> property holds the public key.  This key has a 
            standard format can can be appended directly to the <b>authorized_keys</b>
            file on a Linux machine.
            </para>
            <para>
            <see cref="P:Neon.Kube.SshClientKey.PrivatePEM"/> and <see cref="P:Neon.Kube.SshClientKey.PrivatePPK"/> hold the private key
            using two different formats.  <see cref="P:Neon.Kube.SshClientKey.PrivatePEM"/> uses the <b>OpenSSH</b>
            format and is suitable for deployment on Linux client workstations.  <see cref="P:Neon.Kube.SshClientKey.PrivatePPK"/> 
            uses the <b>PuTTY Private Key (PPK)</b> format and is suitable for deploying
            on Windows client workstations that use PuTTY and WinSCP.
            </para>
            <para>
            <see cref="P:Neon.Kube.SshClientKey.Passphrase"/> is not currently used but eventually, this will
            enable an additional level of encryption at rest.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshClientKey.PublicPUB">
            <summary>
            The RSA public key to deployed on the server for authenticating SSH clients.
            This has the <b>PUB</b> format as generated by the Linux <b>ssh-keygen</b>
            tool.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshClientKey.PrivatePEM">
            <summary>
            The private key formatted for <b>OpenSSH</b> (PEM formatted).  
            </summary>
        </member>
        <member name="P:Neon.Kube.SshClientKey.PrivatePPK">
            <summary>
            The private key formatted as <b>PuTTY Private Key (PPK)</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshClientKey.Passphrase">
            <summary>
            <b>Not Implemented Yet:</b> The optional passphrase used for additional security.
            </summary>
        </member>
        <member name="T:Neon.Kube.AwsOptions">
            <summary>
            Specifies the Amazon Web Services hosting settings.
            </summary>
        </member>
        <member name="M:Neon.Kube.AwsOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.AwsOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AzureCloudEnvironment">
            <summary>
            Specifies the target Azure environment.
            </summary>
            <remarks>
            <para>
            Microsoft Azure deploys more than one environment for hosting services.
            <b>global-cloud</b> identifies their public cloud which is where most users
            and companies will deploy services.  Azure also has a few private environments
            that are typically used by specialized customers (like governments).
            </para>
            <para>
            The easiest way to use this is by setting the <see cref="P:Neon.Kube.AzureCloudEnvironment.Name"/> property to
            one of the possible environments:
            </para>
            <list type="table">
            <item>
                <term><b>global-cloud</b></term>
                <description>
                Public Azure cloud (the default).
                </description>
            </item>
            <item>
                <term><b>china-cloud</b></term>
                <description>
                Private Chinese cloud.
                </description>
            </item>
            <item>
                <term><b>german-cloud</b></term>
                <description>
                Private German cloud.
                </description>
            </item>
            <item>
                <term><b>us-government</b></term>
                <description>
                Private United States government cloud.
                </description>
            </item>
            </list>
            <para>
            Alternatively, you can set <see cref="P:Neon.Kube.AzureCloudEnvironment.Name"/> to <b>custom</b> and then set
            the specific environment endpoint URLs:
            </para>
            <para><see cref="P:Neon.Kube.AzureCloudEnvironment.AuthenticationEndpoint"/></para>
            <para><see cref="P:Neon.Kube.AzureCloudEnvironment.ResourceManagerEndpoint"/></para>
            <para><see cref="P:Neon.Kube.AzureCloudEnvironment.GraphEndpoint"/></para>
            <para><see cref="P:Neon.Kube.AzureCloudEnvironment.ManagementEnpoint"/></para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.AzureCloudEnvironment.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.Name">
            <summary>
            Identifies the Azure environment.  This defaults to <see cref="F:Neon.Kube.AzureCloudEnvironments.GlobalCloud"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.AuthenticationEndpoint">
            <summary>
            Environment authentication endpoint.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.ResourceManagerEndpoint">
            <summary>
            Environment resource manager endpoint.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.GraphEndpoint">
            <summary>
            Environment graph endpoint.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureCloudEnvironment.ManagementEnpoint">
            <summary>
            Environment management endpoint.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureCloudEnvironment.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AzureCloudEnvironments">
            <summary>
            Enumerates the possible Azure hosting environments.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.GlobalCloud">
            <summary>
            Public Azure cloud (default).
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.Custom">
            <summary>
            Custom cloud where the management URIs
            will be specified explicitly.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.ChinaCloud">
            <summary>
            China cloud.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.GermanCloud">
            <summary>
            German cloud.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureCloudEnvironments.USGovernment">
            <summary>
            United States Government cloud.
            </summary>
        </member>
        <member name="T:Neon.Kube.AzureHelper">
            <summary>
            Microsoft Azure helpers.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHelper.MaxClusterNodes">
            <summary>
            The maximum number of nodes currently allowed in a cluster deployed to Azure.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureHelper.MaxHostedEndpoints">
            <summary>
            The maximum number of hosted load balanced TCP/UDP endpoints allowed  in a cluster deployed to Azure.
            This is an Azure limit.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureHelper.GetDiskSizeGiB(Neon.Kube.AzureStorageTypes,System.Int32)">
            <summary>
            Converts the requested disk size in GiB to the actual required size of the Azure
            managed disk in GiB.
            </summary>
            <param name="storageType">Specifies the disk storage type.</param>
            <param name="requestedSizeGiB">The requested size in GB.</param>
            <returns>The actual Azure disk size in GiB.</returns>
        </member>
        <member name="T:Neon.Kube.AzureNodeOptions">
            <summary>
            Azure specific options for cluster cluster node.  The default constructor
            initializes reasonable defaults.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureNodeOptions.VmSize">
            <summary>
            Specifies the Azure virtual machine size.  This defaults to <see cref="F:Neon.Kube.AzureVmSizes.Standard_DS3_v2"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureNodeOptions.StorageType">
            <summary>
            <para>
            Specifies the storage type to use for any mounted drives.  This defaults to <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD_LRS"/>
            as the lowest cost option.
            </para>
            <note>
            You should really consider upgrading production clusters to one of the SSD based storage types.
            </note>
            </summary>
            <remarks>
            <note>
            All virtual machine sizes support <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD_LRS"/> which is why that
            is the default value.  Consult the consult the Azure documentation to virtual machine size specified 
            by <see cref="P:Neon.Kube.AzureNodeOptions.VmSize"/> can support <see cref="F:Neon.Kube.AzureStorageTypes.PremiumSSD_LRS"/>.
            </note>
            <para>
            <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD_LRS"/> specifies relatively slow rotating hard drives,
            <see cref="F:Neon.Kube.AzureStorageTypes.StandardSSD_LRS"/> specifies standard SSD based drives,
            <see cref="F:Neon.Kube.AzureStorageTypes.PremiumSSD_LRS"/> specifies fast SSD based drives.  Azure recommends that
            most production applications deploy with SSDs.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.AzureNodeOptions.HardDriveCount">
            <summary>
            <para>
            Specifies the number of managed Azure data drives to attach to the node's virtual machine.
            This defaults to <b>1</b>.
            </para>
            <note>
            Currently only values of <b>0..1</b> are supported.  In the future we may allow multiple
            data disks to be mounted and combined into a RAID0 array.
            </note>
            </summary>
            <remarks>
            <note>
            Before setting this, consult the Azure documentation to see how many drives the
            virtual machine size specified by <see cref="P:Neon.Kube.AzureNodeOptions.VmSize"/> can support.
            </note>
            <para>
            This may be set to <b>0</b> which specifies that the node will store its data on 
            the local ephemeral (temporary) drive belonging to the Azure virtual machine.
            This is not recommended for cluster nodes.
            </para>
            <para>
            For most clusters, you'll wish to provision one or more drives per node.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.AzureNodeOptions.HardDriveSizeGiB">
            <summary>
            Specifies the size of each of the mounted managed drives in gigabytes.  This
            defaults to <b>64GiB</b>.
            </summary>
            <remarks>
            <para>
            Azure <see cref="F:Neon.Kube.AzureStorageTypes.StandardHDD_LRS"/> based drives may be provisioned
            with one of these sizes: <b>32 GiB</b>, <b>64 GiB</b>, <b>128 GiB</b>, <b>256 GiB</b>,
            <b>512 GiB</b>, <b>1TiB</b>, <b>2TiB</b>, <b>4TiB</b> or <b>8TiB</b>.
            </para>
            <para>
            Azure <see cref="F:Neon.Kube.AzureStorageTypes.StandardSSD_LRS"/> based drives may be provisioned
            with one of these sizes: <b>32 GiB</b>, <b>64 GiB</b>, <b>128 GiB</b>, <b>256 GiB</b>,
            <b>512 GiB</b>, <b>1TiB</b>, <b>2TiB</b>, <b>4TiB</b>, <b>8TiB</b>, <b>16TiB</b> or <b>32TiB</b>.
            </para>
            <para>
            Azure <see cref="F:Neon.Kube.AzureStorageTypes.PremiumSSD_LRS"/> based drives may be provisioned
            with sizes: <b>32GiB</b>, <b>64GiB</b>, <b>128GiB</b>, <b>256GiB</b>, <b>512GiB</b>,
            <b>1TiB</b>, <b>2TiB</b>, <b>4TiB</b> or <b>8TiB</b>.
            </para>
            <note>
            This size will be rounded up to the next valid drive size for the given storage type
            and rounded down to the maximum allowed size, if necessary.
            </note>
            <note>
            The Azure drive sizes listed above may become out-of-date as Azure enhances their
            services.  Review the Azure documentation for more information about what they
            currently support.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.AzureNodeOptions.Validate(Neon.Kube.ClusterDefinition,System.String)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="nodeName">The associated node name.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AzureOptions">
            <summary>
            Specifies the Microsoft Azure cluster hosting settings.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.SubscriptionId">
            <summary>
            Azure account subscription ID obtained from the Azure portal.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.TenantId">
            <summary>
            Tenant ID generated when creating the neon tool's Azure service principal.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.ApplicationId">
            <summary>
            Application ID generated when creating the neon tool's Azure service principal. 
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.Password">
            <summary>
            Password generated when creating the neon tool's Azure service principal.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.ResourceGroup">
            <summary>
            Azure resource group where all clusterv components are to be provisioned.  This defaults
            to the clusterv name but can be customized as required.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.Region">
            <summary>
            Identifies the target Azure region (e.g. <b>westus</b>).
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.DomainLabel">
            <summary>
            The DNS domain prefix for the public IP address to be assigned to the cluster.
            </summary>
            <remarks>
            <note>
            <b>Recomendation:</b> To ensure that there's no conflicts with other 
            services deployed to Azure by you or other companies, we recommend that
            you generate a GUID and assign it to this property.
            </note>
            <para>
            This must be unique across all services deployed to an Azure region (your
            services as well as any other Azure cluster).  The IP address will be exposed
            by the Azure DNS like:
            </para>
            <para>
            DOMAINLABEL.AZURE-REGION.cloudapp.azure.com
            </para>
            <para>
            For example, a public IP address with the <b>mycluster</b> deployed to the
            Azure <b>westus</b> region would have this DNS name:
            </para>
            <para>
            mycluster.westus.cloudapp.azure.com
            </para>
            <para>
            Labels can be up to 80 characters in length and may include letters, digits,
            dashes, underscores, and periods.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.AzureOptions.StaticClusterAddress">
            <summary>
            <para>
            Specifies whether a static external IP address will be created for the cluster.  A static
            IP address will never change and may be referenced via a DNS A record.  Static addresses
            may incur additional costs and Azure limits the number of static addresses that may be
            provisioned for a subscription.  This defaults to <c>false</c>.
            </para>
            <para>
            When this is <c>false</c>, a dynamic external address will be provisioned.  This may be
            referenced via a DNS CNAME record and the address may change from time-to-time.
            </para>
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.PublicNodeAddresses">
            <summary>
            <note>
            <b>IMPORTANT:</b> assigning public IP addresses to cluster nodes is not currently
            implemented.
            </note>
            <para>
            Specifies whether the cluster nodes should be provisioned with public IP addresses
            in addition to the cluster wide public IP addresses assigned to the traffic manager.
            This defaults to <c>false</c>.
            </para>
            <note>
            You will incur additional recuring costs for each public IP address.
            </note>
            </summary>
            <remarks>
            <para>
            There are two main reasons for enabling this.
            </para>
            <list type="number">
            <item>
            Outbound SNAT port exhaustion: This can occur when cluster nodes behind a load
            balancer have a high rate of outbound requests to the Internet.  The essential
            issue is that the traffic manager can NAT a maximum of 64K outbound connections
            for the entire cluster.  This is described in detail 
            <a href="https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-outbound-connections#load-balanced-vm-with-no-instance-level-public-ip-address">here</a>.
            Assigning a public IP address to each node removes this cluster level restriction
            such that each node can have up to 64K outbound connections.
            </item>
            <item>
            Occasionally, it's important to be able to reach specific cluster nodes directly
            from the Internet.
            </item>
            </list>
            <para>
            Enabling this directs the <b>neon-cli</b> to create a dynamic instance level IP
            address for each cluster node and add a public network interface to each cluster 
            virtual machine.
            </para>
            <note>
            The public network interface will be protected by a public security group that
            denies all inbound traffic and allows all outbound traffic by default.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.AzureOptions.Environment">
            <summary>
            Specifies the target Azure environment.  This defaults to the 
            normal public Azure cloud.  See <see cref="T:Neon.Kube.AzureCloudEnvironment"/>
            for other possibilities.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.FaultDomains">
            <summary>
            Specifies the number of Azure fault domains the cluster nodes should be
            distributed across.  This defaults to <b>2</b> which should not be increased
            without making sure that your subscription supports the increase (most won't).
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureOptions.UpdateDomains">
            <summary>
            <para>
            Specifies the number of Azure update domains the cluster nodes will 
            distributed across.  This defaults to <b>5</b>  You may customize this
            with a value in the range of <b>2</b>...<b>20</b>.
            </para>
            <note>
            Larger clusters should increase this value to avoid losing significant capacity
            as Azure updates its underlying infrastructure in an update domain requiring
            VM shutdown and restarts.  A value of <b>2</b> indicates that one half of the
            cluster servers may be restarted during an update domain upgrade.  A value
            of <b>20</b> indicates that one twentieth of your VMs may be recycled at a
            time.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.AzureStorageTypes">
            <summary>
            Enumerates the possible Azure storage account types.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureStorageTypes.StandardHDD_LRS">
            <summary>
            Standard managed spinning drives with local redundancy.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureStorageTypes.StandardSSD_LRS">
            <summary>
            Standard managed SSD drives with local redundancy.
            </summary>
        </member>
        <member name="F:Neon.Kube.AzureStorageTypes.PremiumSSD_LRS">
            <summary>
            Premium managed SSD drives with local redundancy.
            </summary>
        </member>
        <member name="T:Neon.Kube.AzureVmCapabilities">
            <summary>
            Describes the capabilities of the Azure virtual machines.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureVmCapabilities.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureVmCapabilities.Get(Neon.Kube.AzureVmSizes)">
            <summary>
            Returns the <see cref="T:Neon.Kube.AzureVmCapabilities"/> for a specified VM size.
            </summary>
            <param name="vmSize">The VM size.</param>
            <returns>
            The requested <see cref="T:Neon.Kube.AzureVmCapabilities"/> or <c>null</c> 
            if information about the VM cannot be located.
            </returns>
        </member>
        <member name="M:Neon.Kube.AzureVmCapabilities.#ctor(Neon.Kube.AzureVmSizes,Neon.Kube.AzureStorageTypes[])">
            <summary>
            Private constructor.
            </summary>
            <param name="vmSize">The VM size.</param>
            <param name="storageTypes">The supported storage types.</param>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.IsDeprecated">
            <summary>
            Returns <c>true</c> if Azure has deprecated the VM size.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.NotSupported">
            <summary>
            Returns <c>true</c> if this VM size is not supported by clusters.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.VmSize">
            <summary>
            Returns the associated <see cref="T:Neon.Kube.AzureVmSizes"/> value.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.CoreCount">
            <summary>
            Returns the number of virtual CPU cores provided for the VM type.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.RamMiB">
            <summary>
            Returns RAM provided for the VM type in MiB.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.EphemeralDriveGiB">
            <summary>
            Returns the size of the VM ephemeral drive in GiB.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.EphemeralDriveSSD">
            <summary>
            Returns <c>true</c> if the VM ephemeral drive is an SSD.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.MaxDataDrives">
            <summary>
            Returns the number of data drives that can be attached to the VM.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.MaxNics">
            <summary>
            Returns the maximum number of network interfaces that can be attached.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.LoadBalancing">
            <summary>
            Returns <c>true</c> if the VM supports load balancing.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.GpuCount">
            <summary>
            Returns the number of GPUs.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.GpuRamGiB">
            <summary>
            Returns the amount of GPU RAM in GiB.
            </summary>
        </member>
        <member name="P:Neon.Kube.AzureVmCapabilities.SupportedDataStorageTypes">
            <summary>
            Hash set of the supported data drive storage account types.
            </summary>
        </member>
        <member name="M:Neon.Kube.AzureVmCapabilities.SupportsDataStorageType(Neon.Kube.AzureStorageTypes)">
            <summary>
            Determines whether the VM supports data drives with a specific storage account type.
            </summary>
            <param name="storageType">The storage type being tested.</param>
            <returns><c>true</c> if the storage type is supported.</returns>
        </member>
        <member name="T:Neon.Kube.AzureVmSizes">
            <summary>
            Enumerates the possible Azure VM sizes.
            </summary>
        </member>
        <member name="T:Neon.Kube.CephOptions">
            <summary>
            Specifies the options for configuring the cluster integrated
            <a href="https://ceph.com/">Ceph Distributed Storage</a>
            cluster.
            </summary>
        </member>
        <member name="F:Neon.Kube.CephOptions.SupportedReleases">
            <summary>
            Returns the names of the supported Ceph releases.
            </summary>
        </member>
        <member name="F:Neon.Kube.CephOptions.CacheSizeFudge">
            <summary>
            The fudge factor to apply to Ceph cache sizes before actually
            configuring the services.
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.Enabled">
            <summary>
            Indicates whether Ceph storage is to be enabled for the cluster.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.Username">
            <summary>
            Returns the Linux user for the Ceph components.
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.Release">
            <summary>
            Specifies the Ceph software major release name. This defaults to <b>mimic</b>.
            </summary>
            <remarks>
            <para>
            The following major Ceph releases are supported:
            </para>
            <list type="table">
            <item>
                <term><b>mimic</b></term>
                <description>
                Released 07-2018 (<b>default</b>)
                </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CephOptions.OSDDriveSize">
            <summary>
            <para>
            Specifies the default size of the Ceph OSD drives created for cloud and
            hypervisor based environments (<see cref="T:Neon.Common.ByteUnits"/>).  This can be 
            overridden  for specific nodes.  This defaults to <b>16GiB</b>.
            </para>
            <note>
            The default may be too small for production environments
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.OSDCacheSize">
            <summary>
            <para>
            Specifies the default amount of RAM to allocate to Ceph OSD processes for 
            caching (<see cref="T:Neon.Common.ByteUnits"/>).  his can be overridden for specific nodes. 
            This defaults to <b>256MiB</b>.
            </para>
            <note>
            <para>
            The <a href="https://ceph.com/community/new-luminous-bluestore/">Ceph documentation</a>
            states that OSD may tend to underestimate the RAM it's using by up to 1.5 times.
            To avoid potential memory issues, neonKUBE  will adjust this value by dividing it 
            by 1.5 to when actually configuring OSD services.
            </para>
            <para>
            You should also take care to leave 1-2GB of RAM for the host Linux operating system
            as well as the OSD non-cache related memory when you're configuring this property.
            </para>
            <note>
            The default may be too small for production environments
            </note>
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.OSDJournalSize">
            <summary>
            <para>
            Specifies the default size to allocate for the OSD journals  (<see cref="T:Neon.Common.ByteUnits"/>).  
            This  can be overridden for specific nodes.  This defaults to <b>1GiB</b>.
            </para>
            <note>
            The default may be too small for production environments
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.OSDObjectSizeMax">
            <summary>
            Specifies the maximum size of a Ceph RADOS object in bytes (<see cref="T:Neon.Common.ByteUnits"/>).  
            This can be overridden for specific nodes.  This defaults to <b>5GiB</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.OSDReplicaCount">
            <summary>
            Specifies the default number of object replicas to be stored in the cluster.
            This defaults to the minimum of 3 or the number of OSD nodes provisioned
            in the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.OSDReplicaCountMin">
            <summary>
            Specifies the minimum number of objects replicas required when the
            Ceph storage cluster is operating in a degraded state.  This defaults
            to <see cref="P:Neon.Kube.CephOptions.OSDReplicaCount"/><b>-1</b> unless <see cref="P:Neon.Kube.CephOptions.OSDReplicaCount"/><b>==1</b>
            in which case this will also default to 1.
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.OSDPlacementGroups">
            <summary>
            Specifies the default number of placement groups assigned to each OSD.
            This defaults to <b>100</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.CephOptions.MDSCacheSize">
            <summary>
            <para>
            Specifies the default amount of RAM to allocate to Ceph MDS processes for 
            caching (<see cref="T:Neon.Common.ByteUnits"/>). This can be overridden for specific nodes. 
            This defaults to <b>64MiB</b>.
            </para>
            <note>
            <para>
            The Ceph documentation states that MDS may tend to underestimate the RAM it's 
            using by up to 1.5 times.  To avoid potential memory issues, neonKUBE will 
            adjust this value by dividing it by 1.5 to when actually configuring the 
            MDS services.
            </para>
            <para>
            You should also take care to leave 1-2GB of RAM for the host Linux operating system
            as well as the OSD non-cache related memory when you're configuring this property.
            </para>
            </note>
            <note>
            The default is probably too small for production environments
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.CephOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.ClusterDefinition">
            <summary>
            Describes a Kubernetes cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.NameRegex">
            <summary>
            Regex for verifying cluster names for hosts, routes, groups, etc.
            </summary>
        </member>
        <member name="F:Neon.Kube.ClusterDefinition.ReservedLabelPrefix">
            <summary>
            The prefix reserved for neonKUBE related daemon, image, and pod labels.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.FromYaml(System.String,System.Boolean)">
            <summary>
            Parses a cluster definition from YAML text.
            </summary>
            <param name="yaml">The JSON text.</param>
            <param name="strict">Optionally require that all input properties map to <see cref="T:Neon.Kube.ClusterDefinition"/> properties.</param>
            <returns>The parsed <see cref="T:Neon.Kube.ClusterDefinition"/>.</returns>
            <remarks>
            <note>
            The source is first preprocessed using <see cref="T:Neon.IO.PreprocessReader"/>
            and then is parsed as YAML.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.ValidateFile(System.String,System.Boolean)">
            <summary>
            Parses and validates a YAML cluster definition file.
            </summary>
            <param name="path">The file path.</param>
            <param name="strict">Optionally require that all input properties map to <see cref="T:Neon.Kube.ClusterDefinition"/> properties.</param>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.FromFile(System.String,System.Boolean)">
            <summary>
            Parses a YAML cluster definition from a file.
            </summary>
            <param name="path">The file path.</param>
            <param name="strict">Optionally require that all input properties map to <see cref="T:Neon.Kube.ClusterDefinition"/> properties.</param>
            <returns>The parsed <see cref="T:Neon.Kube.ClusterDefinition"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
            <remarks>
            <note>
            The source is first preprocessed using <see cref="T:Neon.IO.PreprocessReader"/>
            and then is parsed as JSON.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.IsValidName(System.String)">
            <summary>
            Verifies that a string is a valid cluster name.
            </summary>
            <param name="name">The name being tested.</param>
            <returns><c>true</c> if the name is valid.</returns>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.ValidateSize(System.String,System.Type,System.String)">
            <summary>
            Ensures that a VM memory or disk size specification is valid and also
            converts the value to the corresponding long count.
            </summary>
            <param name="sizeValue">The size value string.</param>
            <param name="optionsType">Type of the property holding the size property (used for error reporting).</param>
            <param name="propertyName">The size property name (used for error reporting).</param>
            <returns>The size converted into a <c>long</c>.</returns>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the size is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Name">
            <summary>
            The cluster name.
            </summary>
            <remarks>
            <note>
            The name may include only letters, numbers, periods, dashes, and underscores.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Provisioner">
            <summary>
            Identifies the tool/version used to provision the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Kubernetes">
            <summary>
            Returns the Kubernetes cluster options.,
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Docker">
            <summary>
            Returns the options to be used when installing Docker on each
            of the cluster nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Ceph">
            <summary>
            Returns the options to be used for configuring the cluster integrated
            Ceph file system.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.EFK">
            <summary>
            Returns the options to be used for configuring the cluster integrated
            Elasticsearch/Fluentd/Kibana (EFK) logging stack.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Prometheus">
            <summary>
            Returns the options to be used for configuring the cluster integrated
            Elasticsearch/Fluentd/Kibana (EFK) logging stack.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.DrivePrefix">
            <summary>
            <para>
            Returns the prefix for block devices that will be attached to
            the host machines.  For many hosting environments this will be
            <b>sd</b>, indicating that drives will be attached like: 
            <b>/dev/sda</b>, <b>/dev/sdb</b>, <b>/dev/sdc</b>...
            </para>
            <para>
            This may be different though for some hosting environments.
            XenServer for example, uses the <b>xvd</b> prefix and attaches
            drives as <b>/dev/sda</b>, <b>/dev/sdb</b>, <b>/dev/sdc</b>...
            </para>
            <note>
            This property is set automatically during cluster provisioning.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.AllowUnitTesting">
            <summary>
            Optionally enable unit testing on this cluster.  This is disabled by 
            default for safety.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Hosting">
            <summary>
            Specifies hosting related settings (e.g. the cloud provider).  This defaults to
            <c>null</c> which indicates that the cluster will be hosted on private servers.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Datacenter">
            <summary>
            Identifies the datacenter.
            </summary>
            <remarks>
            <note>
            The name may include only letters, numbers, periods, dashes, and underscores.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Environment">
            <summary>
            Indicates how the cluster is being used.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.TimeSources">
            <summary>
            Specifies the NTP time sources to be configured for the cluster.  These are the
            FQDNs or IP addresses of the sources.  This defaults to <b>pool.ntp.org</b>.
            </summary>
            <remarks>
            <para>
            The cluster masters will be configured to synchronize their time with these
            time sources and the worker nodes will be configured to synchronize their time
            with the master nodes.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.PackageProxy">
            <summary>
            Optionally specifies one or more APT proxy/cache servers the cluster will use to install
            and update Linux packages.  These are endpoints like <b>HOSTNAME:PORT</b> or <b>ADDRESS.PORT</b>
            of a <b>apt-cacher-ng</b> or other package proxy server.  The port is generall set to <b>3142</b>
            Multiple proxies may be specified by separating them with spaces.  This defaults to
            referencing the <b>apt-cacher-ng</b> instances running on the master nodes.
            </summary>
            <remarks>
            <para>
            A package cache will greatly reduce the Internet network traffic required to deploy a
            cluster, especially for large clusters.
            </para>
            <note>
            The cluster nodes are configured to failover to different proxies or to hit the 
            default Linux distribution package mirror directly if any or all of the caches
            specified are unavailable.
            </note>
            <note>
            The package caches will be tried in the order they are listed.  This essentially
            makes the first cache primary, with the others as backups.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Setup">
            <summary>
            Optionally specifies setup process related options.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Network">
            <summary>
            Describes the cluster's network configuration.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.NodeOptions">
            <summary>
            Specifies host node options.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.NodeDefinitions">
            <summary>
            Describes the host nodes in the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Nodes">
            <summary>
            Enumerates all cluster node definitions.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.SortedNodes">
            <summary>
            Enumerates all cluster node definitions sorted in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Masters">
            <summary>
            Enumerates the cluster master node definitions.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.SortedMasters">
            <summary>
            Enumerates the cluster master node definitions sorted in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.Workers">
            <summary>
            Enumerates the cluster worker node definitions.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterDefinition.SortedWorkers">
            <summary>
            Enumerates the cluster worker node definitions sorted in ascending order by name.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.ValidatePrivateNodeAddresses">
            <summary>
            Validates that node private IP addresses are set, are within the nodes subnet, and
            are unique.  This method is intended to be called from hosting options classes
            like <see cref="T:Neon.Kube.MachineOptions"/> which require specified node IP addresses.
            </summary>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.Validate">
            <summary>
            Validates the cluster definition and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterDefinition.AddNode(Neon.Kube.NodeDefinition)">
            <summary>
            Adds a node to the cluster.
            </summary>
            <param name="node">The new node.</param>
        </member>
        <member name="T:Neon.Kube.DockerOptions">
            <summary>
            Describes the Docker options for a neonKUBE.
            </summary>
        </member>
        <member name="M:Neon.Kube.DockerOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.DockerOptions.Version">
            <summary>
            <para>
            The version of Docker to be installed or <b>default</b> to install a reasonable
            version for the version of Kubernetes being deployed.  This defaults to <b>default</b>
            which will install a reasonable supported version.
            </para>
            <note>
            Only Community Editions of Docker are supported at this time.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.DockerOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.DockerOptions.ClearSecrets">
            <summary>
            Clears any sensitive properties like the Docker registry credentials.
            </summary>
        </member>
        <member name="T:Neon.Kube.EFKOptions">
            <summary>
            Specifies the options for configuring the cluster integrated
            Elasticsearch/Fluentd/Kibana (EFK) logging stack.
            </summary>
        </member>
        <member name="P:Neon.Kube.EFKOptions.Enabled">
            <summary>
            Indicates whether the EFK stack is to be enabled for the cluster.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="M:Neon.Kube.EFKOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.EnvironmentType">
            <summary>
            Enumerates the types of cluster operating environments.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Other">
            <summary>
            Unspecified.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Development">
            <summary>
            Development environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Test">
            <summary>
            Test environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Staging">
            <summary>
            Staging environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.EnvironmentType.Production">
            <summary>
            Production environment.
            </summary>
        </member>
        <member name="T:Neon.Kube.GoogleOptions">
            <summary>
            Specifies the Google Cloud Platform hosting settings.
            </summary>
        </member>
        <member name="M:Neon.Kube.GoogleOptions.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.GoogleOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.HostingEnvironments">
            <summary>
            Enumerates the possible cluster hosting environments.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Machine">
            <summary>
            Hosted on directly on pre-provisioned bare metal or virtual machines.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Aws">
            <summary>
            Amazon Web Services.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Azure">
            <summary>
            Microsoft Azure.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Google">
            <summary>
            Google Cloud Platform.
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.HyperV">
            <summary>
            Microsoft Hyper-V hypervisor running on remote servers
            (typically for production purposes).
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.HyperVLocal">
            <summary>
            Microsoft Hyper-V hypervisor running on the local workstation
            (typically for development or test purposes).
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.XenServer">
            <summary>
            Citrix XenServer hypervisor running on remote servers (typically
            for production purposes).
            </summary>
        </member>
        <member name="F:Neon.Kube.HostingEnvironments.Unknown">
            <summary>
            Unknown or unspecified hosting environment.
            </summary>
        </member>
        <member name="T:Neon.Kube.HostingOptions">
            <summary>
            Specifies the cloud or colocation/on-premise hosting settings.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingOptions.#ctor">
            <summary>
            Default constructor that initializes a <see cref="F:Neon.Kube.HostingEnvironments.Machine"/> provider.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Environment">
            <summary>
            Identifies the cloud or other hosting platform.  This defaults to <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Aws">
            <summary>
            Specifies the Amazon Web Services hosting settings.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Azure">
            <summary>
            Specifies the Microsoft Azure hosting settings.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Google">
            <summary>
            Specifies the Google Cloud Platform hosting settings.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.HyperV">
            <summary>
            Specifies the Hyper-V settings when hosting on remote Hyper-V servers.  
            This is typically used for production.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.HyperVDev">
            <summary>
            Specifies the Hyper-V settings when hosting on the local workstation using the 
            Microsoft Hyper-V hypervisor.  This is typically used for development or
            test purposes.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.Machine">
            <summary>
            Specifies the hosting settings when hosting directly on bare metal or virtual machines.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.XenServer">
            <summary>
            Specifies the hosting settings when hosting on Citrix XenServer or the XCP-ng hypervisors.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.VmHosts">
            <summary>
            Optionally identifies the target Hyper-V or XenServer hypervisor machines.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.VmHostUsername">
            <summary>
            <para>
            The default username to use for connecting the hypervisor host machines specified by <see cref="P:Neon.Kube.HostingOptions.VmHosts"/>.
            This may be overridden for specific hypervisor machines.  This defaults to <c>null</c>.
            </para>
            <note>
            This defaults to <b>root</b> for XenServer based environments.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.VmHostPassword">
            <summary>
            The default password to use for connecting the hypervisor host machines specified by <see cref="P:Neon.Kube.HostingOptions.VmHosts"/>.
            This may be overridden for specific hypervisor machines within <see cref="P:Neon.Kube.HostingOptions.VmHosts"/> items.  This defaults to <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.VmProcessors">
            <summary>
            The default number of virtual processors to assign to each cluster virtual machine.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.VmMemory">
            <summary>
            Specifies the default maximum amount of memory to allocate to each cluster virtual machine.  This is specified as a string
            that can be a byte count or a number with units like <b>512MiB</b>, <b>0.5GiB</b>, <b>2iGB</b>, or <b>1TiB</b>.  
            This defaults to <b>4GiB</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.VmDisk">
            <summary>
            Specifies the maximum amount of memory to allocate to each cluster virtual machine.  This is specified as a string
            that can be a long byte count or a byte count or a number with units like <b>512MiB</b>, <b>0.5GiB</b>, <b>2GiB</b>, 
            or <b>1TiB</b>.  This defaults to <b>64GiB</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.VmDriveFolder">
            <summary>
            <para>
            Path to the folder where virtual machine hard drive folders are to be persisted.
            This defaults to the local Hyper-V folder for Windows.
            </para>
            <note>
            This is recognized only when deploying on a local Hyper-V hypervisor, typically
            for development and test purposes.  This is ignored when provisioning on remote
            Hyper-V instances or for cloud or bare machine environments.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.VmNamePrefix">
            <summary>
            <para>
            The prefix to be prepended to virtual machine provisioned to hypervisors for the
            <see cref="F:Neon.Kube.HostingEnvironments.HyperV"/>, <see cref="F:Neon.Kube.HostingEnvironments.HyperVLocal"/>,
            and <see cref="F:Neon.Kube.HostingEnvironments.XenServer"/> environments.
            </para>
            <para>
            When this is <c>null</c> (the default), the cluster name followed by a dash will 
            prefix the provisioned virtual machine names.  When this is a non-empty string, the
            value followed by a dash will be used.  If this is empty or whitespace, machine
            names will not be prefixed.
            </para>
            <note>
            Virtual machine name prefixes will always be converted to lowercase.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingOptions.GetVmNamePrefix(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the prefix to be used when provisioning virtual machines in hypervisor environments.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The prefix.</returns>
        </member>
        <member name="P:Neon.Kube.HostingOptions.IsCloudProvider">
            <summary>
            Returns <c>true</c> if the cluster will be hosted by a cloud provider like AWS, Azure or Google.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.IsOnPremiseProvider">
            <summary>
            Returns <c>true</c> if the cluster will be hosted by an on-premise (non-cloud) provider.
            </summary>
        </member>
        <member name="P:Neon.Kube.HostingOptions.IsRemoteHypervisorProvider">
            <summary>
            Returns <c>true</c> if the cluster will be hosted by a hypervisor provider
            that supports remote hosts.
            </summary>
        </member>
        <member name="M:Neon.Kube.HostingOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.HostingOptions.ValidateHypervisor(Neon.Kube.ClusterDefinition,System.Boolean)">
            <summary>
            Validates the Hypervisor related options.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="remoteHypervisors">
            Indicates that we're going to be deploying to remote hypervisor
            host machines as opposed to the local workstation.
            </param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.HostingOptions.ClearSecrets">
            <summary>
            Clears all hosting provider details because they may
            include hosting related secrets.
            </summary>
        </member>
        <member name="T:Neon.Kube.HypervisorHost">
            <summary>
            Describes the location and credentials required to connect to
            a specific Hyper-V or XenServer hypervisor machine for cluster 
            provisioning.
            </summary>
        </member>
        <member name="P:Neon.Kube.HypervisorHost.Name">
            <summary>
            The XenServer hostname.  This is used to by <see cref="T:Neon.Kube.NodeDefinition"/> instances
            to specify where a cluster node is to be provisioned.
            </summary>
        </member>
        <member name="P:Neon.Kube.HypervisorHost.Address">
            <summary>
            The IP address or FQDN of the hypervisor machine.
            </summary>
        </member>
        <member name="P:Neon.Kube.HypervisorHost.Username">
            <summary>
            The custom username to use when connecting to the hypervisor machine.  This
            overrides <see cref="P:Neon.Kube.HostingOptions.VmHostUsername"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.HypervisorHost.Password">
            <summary>
            The custom password to use when connecting to the hypervisor machine.  This
            overrides <see cref="P:Neon.Kube.HostingOptions.VmHostPassword"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.HypervisorHost.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.HyperVOptions">
            <summary>
            Specifies hosting settings for the Microsoft Hyper-V hypervisor.
            </summary>
        </member>
        <member name="M:Neon.Kube.HyperVOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.HyperVOptions.HostVhdxUri">
            <summary>
            <para>
            URI to the zipped VHDX image with the base cluster host operating system.  This defaults to
            <b>https://s3-us-west-2.amazonaws.com/neonforge/neoncluster/neon-Ubuntu-18.04.latest.vhdx</b>
            which is the latest supported Ubuntu 16.04 image.
            </para>
            <note>
            Production cluster definitions should be configured with an VHDX with a specific version
            of the host operating system to ensure that cluster nodes are provisioned with the same
            operating system version.
            </note>
            <note>
            The image file is actually a Hyper-V VHDX zipped using <b>neon zip create PATH-TO-VHDX PATH-TO-ZIP</b>.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.HyperVOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.KubernetesOptions">
            <summary>
            Describes the Kubernetes options for a neonKUBE.
            </summary>
        </member>
        <member name="M:Neon.Kube.KubernetesOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.Version">
            <summary>
            The version of Kubernetes to be installed.  This defaults to <b>default</b> which
            will install the latest tested version of Kubernetes.  The minimum supported
            version is <b>1.13.0</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.DashboardVersion">
            <summary>
            The version of Kubernetes dashboard to be installed.  This defaults to <b>default</b> which
            will install the latest tested version of Kubernetes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.HelmVersion">
            <summary>
            The version of Helm to be installed.  This defaults to <b>default</b> which
            will install a reasonable version for the Kubernetes release being inbstalled.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.AllowPodsOnMasters">
            <summary>
            Enable pods to be scheduled on cluster master nodes.  This defaults to <c>null</c>
            which will allow pods to be scheduled on masters if the cluster consists only of
            master nodes (e.g. for a single node cluster.  This defaults to <c>false</c> for
            clusters with worker nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.KubernetesOptions.ApiLoadBalancer">
            <summary>
            Optionally configures an external Kubernetes API server load balancer by
            specifying the load balancer endpoint as HOSTNAME:PORT or IPADDRESS:PORT.
            This defaults to <c>null</c>.  See the remarks to see what this means.
            </summary>
            <remarks>
            <para>
            Production clusters really should be deployed using an external highly
            available load balancer that distributes API server traffic across
            the API servers running on the masters.
            </para>
            <para>
            For cloud environments like AWS and Azure, neonKUBE provisions a cloud
            load balancer by default for this.  This is the ideal situation.
            </para>
            <para>
            For on-premise environments like Hyper-V and XenServer, we use the
            HAProxy based load balancer deployed to the first master node (as sorted
            by node name).  This forwards traffic to port 5000 to the Kubernetes
            API servers running on the masters.  This is not reeally HA though,
            because the loss of the first master will result in the loss of 
            API server connectivity.  This does help some though.  For example,
            stopping the API server on the first master won't take the cluster
            API server offline because HAProxy will still be able to direct 
            traffic to the remaining masters.
            </para>
            <note>
            <para>
            The HAProxy load balancer is actually deployed to all of the masters
            but the other master HAProxy instances won't see any traffic because
            Kubernetes is configured with a single balancer endpoint.
            </para>
            <para>
            In the future, it may be possible to turn the master HAProxy instances
            into an HA cluster via a virtual IP address and heartbeat mechanism.
            </para>
            <para>
            You can use the <see cref="P:Neon.Kube.KubernetesOptions.ApiLoadBalancer"/> property to specify an
            external load balancer that already exists.  Setting this will override
            the default behaviors described above.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.KubernetesOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.KubernetesOptions.ClearSecrets">
            <summary>
            Clears any sensitive properties like the Docker registry credentials.
            </summary>
        </member>
        <member name="T:Neon.Kube.LocalHyperVOptions">
            <summary>
            Specifies hosting settings for the local Microsoft Hyper-V hypervisor.
            </summary>
        </member>
        <member name="M:Neon.Kube.LocalHyperVOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.LocalHyperVOptions.HostVhdxUri">
            <summary>
            <para>
            URI to the zipped VHDX image with the base cluster host operating system.  This defaults to
            <b>https://s3-us-west-2.amazonaws.com/neonforge/neoncluster/neon-Ubuntu-18.04.latest.vhdx</b>
            which is the latest supported Ubuntu 16.04 image.
            </para>
            <note>
            Production cluster definitions should be configured with an VHDX with a specific version
            of the host operating system to ensure that cluster nodes are provisioned with the same
            operating system version.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.LocalHyperVOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.MachineOptions">
            <summary>
            Specifies hosting settings for bare metal or virtual machines.
            </summary>
        </member>
        <member name="M:Neon.Kube.MachineOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.MachineOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NetworkCni">
            <summary>
            Enumerates the supported of cluster network providers.
            </summary>
        </member>
        <member name="F:Neon.Kube.NetworkCni.Calico">
            <summary>
            The <a href="https://projectcalico.org">Calico</a> network provider.  As of 01/2019, this is probably
            the most popular network provider.  This is currently the default provider deployed for a neonKUBE
            but we expect to change this to the <see cref="F:Neon.Kube.NetworkCni.Istio"/> integrated provider when that is ready.
            </summary>
        </member>
        <member name="F:Neon.Kube.NetworkCni.Istio">
            <summary>
            The <a href="https://istio.io">Istio</a> integrated provider.  This isn't quite ready for prime time
            yet but will eventually become the default provider.
            </summary>
        </member>
        <member name="T:Neon.Kube.NetworkOptions">
            <summary>
            Describes the network options for a cluster.
            </summary>
        </member>
        <member name="M:Neon.Kube.NetworkOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.PremiseSubnet">
            <summary>
            Specifies the subnet for entire host network for on-premise environments like
            <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>, <see cref="F:Neon.Kube.HostingEnvironments.HyperVLocal"/> and
            <see cref="F:Neon.Kube.HostingEnvironments.XenServer"/>.  This is required for those environments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.NodeSubnet">
            <summary>
            <para>
            The subnet where the cluster nodes reside.
            </para>
            <note>
            This property must be configured for the on-premise providers (<see cref="F:Neon.Kube.HostingEnvironments.Machine"/>, 
            <b>HyperV</b>, and <b>XenServer</b>".  This is computed automatically by the <b>neon</b> tool when
            provisioning in a cloud environment.
            </note>
            <note>
            For on-premise clusters, the statically assigned IP addresses assigned 
            to the nodes must reside within the this subnet.  The network gateway
            will be assumed to be the second address in this subnet and the broadcast
            address will assumed to be the last address.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.PodSubnet">
            <summary>
            <para>
            Specifies the pod subnet to be used for the cluster.  This subnet will be
            split so that each node will be allocated its own subnet.  This defaults
            to <b>10.254.0.0/16</b>.
            </para>
            <note>
            <b>WARNING:</b> This subnet must not conflict with any other subnets
            provisioned within the premise network.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.ServiceSubnet">
            <summary>
            Specifies the subnet subnet to be used for the allocating service addresses
            within the cluster.  This defaults to <b>10.253.0.0/16</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.Nameservers">
            <summary>
            The IP addresses of the upstream DNS nameservers to be used by the cluster.  This defaults to the 
            Google Public DNS servers: <b>[ "8.8.8.8", "8.8.4.4" ]</b> when the property is <c>null</c> or empty.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.Gateway">
            <summary>
            Specifies the default network gateway address to be configured for hosts.  This defaults to the 
            first usable address in the <see cref="P:Neon.Kube.NetworkOptions.PremiseSubnet"/>.  For example, for the <b>10.0.0.0/24</b> 
            subnet, this will be set to <b>10.0.0.1</b>.  This is ignored for cloud hosting 
            environments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.Cni">
            <summary>
            Specifies the cluster network provider.  This currently defaults to <see cref="F:Neon.Kube.NetworkCni.Calico"/>
            but this will change to the <see cref="F:Neon.Kube.NetworkCni.Istio"/> integrated provider once that stablizes.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.CniVersion">
            <summary>
            <para>
            Specifies the cluster network provider version.  This defaults to <b>default</b> which will install
            a reasonable supported version.
            </para>
            <note>
            This is ignored for the <see cref="F:Neon.Kube.NetworkCni.Istio"/> integrated provider.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.IstioVersion">
            <summary>
            Specifies the version  of Istio to be installed.  This defaults to <b>default</b> which
            will install a reasonable supported version.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.MutualPodTLS">
            <summary>
            Optionally enable Istio mutual TLS support for cross pod communication.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="T:Neon.Kube.NetworkOptions.SubnetDefinition">
            <summary>
            Used for checking subnet conflicts below.
            </summary>
        </member>
        <member name="M:Neon.Kube.NetworkOptions.SubnetDefinition.#ctor(System.String,Neon.Net.NetworkCidr)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Subnet name.</param>
            <param name="cidr">Subnet CIDR.</param>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.SubnetDefinition.Name">
            <summary>
            Identifies the subnet.
            </summary>
        </member>
        <member name="P:Neon.Kube.NetworkOptions.SubnetDefinition.Cidr">
            <summary>
            The subnet CIDR.
            </summary>
        </member>
        <member name="M:Neon.Kube.NetworkOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NodeDefinition">
            <summary>
            Describes a cluster host node.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.ParseFromLabels(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parses a <see cref="T:Neon.Kube.NodeDefinition"/> from Kubernetes node labels.
            </summary>
            <param name="labels">The node labels.</param>
            <returns>The parsed <see cref="T:Neon.Kube.NodeDefinition"/>.</returns>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Name">
            <summary>
            Uniquely identifies the node within the cluster.
            </summary>
            <remarks>
            <note>
            The name may include only letters, numbers, periods, dashes, and underscores and
            also that all names will be converted to lower case.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.PublicAddress">
            <summary>
            The node's public IP address or DNS name.  This will be generally initialized
            to <c>null</c> before provisioning a cluster.  This will be initialized while
            by the <b>neon-cli</b> tool for master nodes when provisioning in a cloud provider.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.PrivateAddress">
            <summary>
            The node's IP address or <c>null</c> if one has not been assigned yet.
            Note that an node's IP address cannot be changed once the node has
            been added to the cluster.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.IsMaster">
            <summary>
            Indicates that the node will act as a master node (defaults to <c>false</c>).
            </summary>
            <remarks>
            <para>
            Master nodes are reponsible for managing service discovery and coordinating 
            pod deployment across the cluster.
            </para>
            <para>
            An odd number of master nodes must be deployed in a cluster (to help prevent
            split-brain).  One master node may be deployed for non-production environments,
            but to enable high-availability, three or five master nodes may be deployed.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.IsWorker">
            <summary>
            Returns <c>true</c> for worker nodes.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Role">
            <summary>
            Returns the node's <see cref="T:Neon.Kube.NodeRole"/>.  This defaults to <see cref="F:Neon.Kube.NodeRole.Worker"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Labels">
            <summary>
            Specifies the labels to be assigned to the host node.  These can provide
            detailed information such as the host CPU, RAM, storage, etc.  <see cref="T:Neon.Kube.NodeLabels"/>
            for more information.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.Azure">
            <summary>
            Azure provisioning options for this node, or <c>null</c> to use reasonable defaults.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.VmHost">
            <summary>
            Identifies the hypervisor instance where this node is to be provisioned for Hyper-V
            or XenServer based clusters.  This name must map to the name of one of the <see cref="P:Neon.Kube.HostingOptions.VmHosts"/>
            when set.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.VmProcessors">
            <summary>
            Specifies the number of processors to assigned to this node when provisioned on a hypervisor.  This
            defaults to the value specified by <see cref="P:Neon.Kube.HostingOptions.VmProcessors"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.VmMemory">
            <summary>
            Specifies the maximum amount of memory to allocate to this node when provisioned on a hypervisor.  
            This is specified as a string that can be a byte count or a number with units like <b>512MB</b>, 
            <b>0.5GB</b>, <b>2GB</b>, or <b>1TB</b>.  This defaults to the value specified by 
            <see cref="P:Neon.Kube.HostingOptions.VmMemory"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.VmDisk">
            <summary>
            The amount of disk space to allocate to this node when when provisioned on a hypervisor.  This is specified as a string
            that can be a byte count or a number with units like <b>512MB</b>, <b>0.5GB</b>, <b>2GB</b>, or <b>1TB</b>.  This defaults 
            to the value specified by <see cref="P:Neon.Kube.HostingOptions.VmDisk"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.GetVmProcessors(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the maximum number processors to allocate for this node when
            hosted on a hypervisor.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The number of cores.</returns>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.GetVmMemory(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the maximum number of bytes of memory allocate to for this node when
            hosted on a hypervisor.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.GetVmDisk(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the maximum number of bytes to disk allocate to for this node when
            hosted on a hypervisor.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The size in bytes.</returns>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.GetCephOSDDriveSize(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the size in bytes of the Ceph drive created for this node if 
            integrated Ceph storage cluster is enabled.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The size in bytes or zero if Ceph is not enabled.</returns>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.GetCephOSDCacheSize(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the size in bytes of RAM to allocate to the OSD cache
            on this node integrated Ceph storage cluster is enabled and
            OSD is deployed to the node.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The size in bytes or zero if Ceph is not enabled.</returns>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.GetCephOSDJournalSize(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the size in bytes of drive space to allocate to the
            OSD journal on this node integrated Ceph storage cluster is 
            enabled and OSD is deployed to the node.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The size in bytes or zero if Ceph is not enabled.</returns>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.GetCephMDSCacheSize(Neon.Kube.ClusterDefinition)">
            <summary>
            Returns the size in bytes of RAM to allocate to the MDS cache
            on this node integrated Ceph storage cluster is enabled and
            MDS is deployed to the node.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <returns>The size in bytes or zero if Ceph is not enabled.</returns>
        </member>
        <member name="P:Neon.Kube.NodeDefinition.StepDelay">
            <summary>
            <b>HACK:</b> This used by <see cref="T:Neon.Kube.SetupController`1"/> to introduce a delay for this
            node when executing the next setup step.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeDefinition.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the node definition.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NodeLabels">
            <summary>
            Describes the standard cluster and custom labels to be assigned to 
            a cluster node.
            </summary>
            <remarks>
            <para>
            Labels are name/value properties that can be assigned to the cluster
            nodes for pod scheduling and other purposes.
            </para>
            <para>
            By convention, label names should use a reverse domain name prefix using a
            DNS domain you control.  For example, neonCLUSTER cluster related labels 
            are prefixed with <b>"io.neonkube/..."</b>.  You should follow this convention 
            for any custom labels you define.
            </para>
            <note>
            You may specify labels without a domain prefix if you're not concerned
            about potential conflicts.
            </note>
            <para>
            Label names must begin and end with a letter or digit and may include
            letters, digits, dashes and dots within.  Dots or dashes must not appear
            consecutively.
            </para>
            <note>
            Whitespace is not allowed in label values.
            </note>
            <para>
            This class exposes several built-in cluster properties.  You can use
            the <see cref="P:Neon.Kube.NodeLabels.Custom"/> dictionary to add your own labels.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.NodeLabels.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeLabels.#ctor(Neon.Kube.NodeDefinition)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.Node">
            <summary>
            The parent node definition.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelDatacenter">
            <summary>
            Reserved label name that identifies the datacenter.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelEnvironment">
            <summary>
            Reserved label name that identifies the cluster environment.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPublicAddress">
            <summary>
            Reserved label name that identifies the node's public IP address or FQDN.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPrivateAddress">
            <summary>
            Reserved label name that identifies the node's private IP address.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelRole">
            <summary>
            Reserved label name that identifies the node role.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelAzureVmSize">
            <summary>
            Reserved label name that identifies the node's Azure VM size.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelAzureStorageType">
            <summary>
            Reserved label name that identifies the node's Azure attached storage type.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelAzureDriveCount">
            <summary>
            Reserved label name that identifies the node's Azure attached drive count.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelAzureDriveSize">
            <summary>
            Reserved label name that identifies the node's Azure attached drive size.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageSize">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageSize"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageLocal">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageLocal"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageHDD">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageHDD"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageRedundant">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageRedundant"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelStorageEphemeral">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.StorageEphemeral"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageSize">
            <summary>
            <b>io.neonkube/storage.size</b> [<c>string</c>]: Specifies the node primary drive 
            storage capacity in bytes (<see cref="T:Neon.Common.ByteUnits"/>).
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageLocal">
            <summary>
            <b>io.neonkube/storage.local</b> [<c>bool</c>]: Specifies whether the node storage is hosted
            on the node itself or is mounted as a remote file system or block device.  This defaults
            to <c>true</c> for on-premise clusters and is computed for cloud deployments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageHDD">
            <summary>
            <b>io.neonkube/storage.hdd</b> [<c>bool</c>]: Indicates that the storage is backed
            by a spinning drive as opposed to a SSD.  This defaults to <c>false</c> for 
            on-premise clusters and is computed for cloud deployments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageRedundant">
            <summary>
            <b>io.neonkube/storage.redundant</b> [<c>bool</c>]: Indicates that the storage is redundant.  This
            may be implemented locally using RAID1+ or remotely using network or cloud-based file systems.
            This defaults to <c>false</c> for on-premise clusters and is computed for cloud deployments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.StorageEphemeral">
            <summary>
            <b>io.neonkube/storage.redundant</b> [<c>bool</c>]: Indicates that the storage is ephemeral.
            All data will be lost when the host is restarted.  This defaults to <c>false</c> for 
            on-premise clusters and is computed for cloud deployments.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelComputeCores">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.ComputeCores"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelComputeRamMiB">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.ComputeRam"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.ComputeCores">
            <summary>
            <b>io.neonkube/compute.cores</b> [<c>int</c>]: Specifies the number of CPU cores.
            This defaults to <b>0</b> for <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>
            and is initialized for cloud and Hypervisor based hosting environments.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.ComputeRam">
            <summary>
            <b>io.neonkube/compute.ram_mb</b> [<c>int</c>]: Specifies the available RAM in
            megabytes.  This defaults to <b>0</b> for <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>
            and is initialized for cloud and Hypervisor based hosting environments.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPhysicalLocation">
            <summary>
            Reserved label name for <see cref="F:Neon.Kube.NodeLabels.LabelPhysicalPower"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPhysicalMachine">
            <summary>
            Reserved label name for <see cref="F:Neon.Kube.NodeLabels.LabelPhysicalMachine"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPhysicalFaultDomain">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.PhysicalFaultDomain"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelPhysicalPower">
            <summary>
            Reserved label name for <see cref="F:Neon.Kube.NodeLabels.LabelPhysicalPower"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.PhysicalLocation">
            <summary>
            <b>io.neonkube/physical.location</b> [<c>string</c>]: A free format string describing the
            physical location of the server.  This defaults to the 
            <b>empty string</b>.
            </summary>
            <remarks>
            <para>
            You should use a consistent convention to describe a physical machine location.
            Here are some examples:
            </para>
            <list type="bullet">
            <item><i>rack-slot</i></item>
            <item><i>rack-number</i>/<i>rack-slot</i></item>
            <item><i>row</i>/<i>rack-number</i>/<i>rack-slot</i></item>
            <item><i>floor</i>/<i>row</i>/<i>rack-number</i>/<i>rack-slot</i></item>
            <item><i>building</i>/<i>floor</i>/<i>row</i>/<i>rack-number</i>/<i>rack-slot</i></item>
            </list>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.PhysicalMachine">
            <summary>
            <b>io.neonkube/physical.model</b> [<c>string</c>]: A free format string describing the
            physical server computer model (e.g. <b>Dell-PowerEdge-R220</b>).  This defaults to the <b>empty string</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.PhysicalFaultDomain">
            <summary>
            <b>io.neonkube/physical.faultdomain</b> [<c>string</c>]: A free format string 
            grouping the host by the possibility of underlying hardware or software failures.
            This defaults to the <b>empty string</b>.
            </summary>
            <remarks>
            <para>
            The idea here is to identify broad possible failure scenarios and to assign hosts
            to fault domains in such a way that a failure for one domain will be unlikely
            to impact the hosts in another.  These groupings can be used to spread application
            containers across available fault domains such that an application has a reasonable 
            potential to continue operating in the face of hardware or network failures.
            </para>
            <para>
            Fault domains will be mapped to your specific hardware and networking architecture.
            Here are some example scenarios:
            </para>
            <list type="table">
            <item>
                <term><b>VMs on one machine:</b></term>
                <description>
                <para>
                This will be a common setup for development and test where every host
                node is simply a virtual machine running locally.  In this case, the
                fault domain could be set to the virtual machine name such that
                failures can be tested by simply stopping a VM.
                </para>
                <note>
                If no fault domain is specified for a node, then the fault domain
                will default to the node name.
                </note>
                </description>
            </item>
            <item>
                <term><b>Single Rack:</b></term>
                <description>
                For a cluster deployed to a single rack with a shared network connection,
                the fault domain will typically be the physical machine such that the 
                loss of a machine can be tolerated.
                </description>
            </item>
            <item>
                <term><b>Multiple Racks:</b></term>
                <description>
                For clusters deployed to multiple racks, each with their own network
                connection, the fault domain will typically be set at the rack
                level, such that the loss of a rack or its network connectivity can
                be tolerated.
                </description>
            </item>
            <item>
                <term><b>Advanced:</b></term>
                <description>
                <para>
                More advanced scenarios are possible.  For example, a datacenter may
                have multiple pods, floors, or buildings that each have redundant 
                infrastructure such as power and networking.  You could set the fault
                domain at the pod or floor level.
                </para>
                <para>
                For clusters that span physical datacenters, you could potentially map
                each datacenter to an fault domain.
                </para>
                </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.PhysicalPower">
            <summary>
            <b>io.neonkube/physical.power</b> [<c>string</c>]: Describes host the physical power
            to the server may be controlled.  This defaults to the <b>empty string</b>.
            </summary>
            <remarks>
            <note>
            The format for this property is not currently defined.
            </note>
            <para>
            This field includes the information required to remotely control the power to
            the physical host machine via a Power Distribution Unit (PDU).
            </para>
            </remarks>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelCephMON">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.CephMON"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelCephOSD">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.CephOSD"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelCephOSDDevice">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.CephOSDDevice"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelCephMDS">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.CephMDS"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelCephOSDDriveSize">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.CephOSDDriveSize"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelCephOSDCacheSize">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.CephOSDCacheSize"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelCephOSDJournalSize">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.CephOSDJournalSize"/>.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeLabels.LabelCephMDSCacheSize">
            <summary>
            Reserved label name for <see cref="P:Neon.Kube.NodeLabels.CephOSDJournalSize"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.CephMON">
            <summary>
            <b>io.neonkube.ceph.monitor</b> [<c>bool</c>]: Indicates that the Ceph 
            monitor and manager services  will be deployed to this node if 
            <see cref="P:Neon.Kube.CephOptions.Enabled"/> is <c>true</c>.  This defaults 
            to <c>false</c>.
            </summary>
            <remarks>
            <para>
            Monitors maintain maps of the Ceph file system state state, including 
            the monitor map, manager map, the OSD map, and the CRUSH map. These maps 
            are critical cluster state required for Ceph daemons to coordinate with
            each other.  Monitors are also responsible for managing authentication
            between daemons and clients. At least three monitors are normally required 
            for redundancy and high availability.
            </para>
            <para>
            Managers are responsible for keeping track of runtime metrics and the
            current state of the Ceph cluster, including storage utilization, 
            current performance metrics, and system load. The Ceph Manager daemons
            also host python-based plugins to manage and expose Ceph cluster information,
            including a web-based dashboard and REST API. At least two managers are
            normally required for high availability.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.CephOSD">
            <summary>
            <b>io.neonkube.ceph.osd</b> [<c>bool</c>]: Indicates that a Ceph OSD 
            (object storage daemon) will be deployed to this node if 
            <see cref="P:Neon.Kube.CephOptions.Enabled"/> is <c>true</c>.  
            This defaults to <c>false</c>.
            </summary>
            <remarks>
            OSDs store data, handles data replication, recovery, rebalancing, and
            provides some monitoring information to Ceph Monitors and Managers by 
            checking other Ceph OSD Daemons for a heartbeat. At least 3 Ceph OSDs 
            are normally required for redundancy and high availability.
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.CephOSDDevice">
            <summary>
            <b>io.neonkube.ceph.osd_device</b> (<c>string</c>]: The path to the block
            device where the OSD data will be persisted (like: <b>/dev/sdb</b>)
            when <see cref="P:Neon.Kube.NodeLabels.CephOSD"/> is <c>true</c>.  This will be initialized 
            automatically for most hosting environments but will need to be specified 
            explicitly for <see cref="F:Neon.Kube.HostingEnvironments.Machine"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.CephMDS">
            <summary>
            <b>io.neonkube.ceph.mds</b> [<c>bool</c>]: Indicates that a Ceph MDS 
            (metadata server) will be deployed to this node if <see cref="P:Neon.Kube.CephOptions.Enabled"/> 
            is <c>true</c>.  This defaults to <c>false</c>.
            </summary>
            <remarks>
            Metadata servers store metadata on behalf of the Ceph Filesystem 
            (e.g. Ceph Block Devices and Ceph Object Storage do not use MDS). 
            Ceph Metadata Servers allow POSIX file system users to execute basic 
            commands (like ls, find, etc.) without placing an enormous burden on
            the Ceph Storage Cluster.
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.CephOSDDriveSize">
            <summary>
            <b>io.neonkube.ceph.drivesize</b> [<c>int</c>]: Specifies the size in bytes
            (<see cref="T:Neon.Common.ByteUnits"/>) of the Ceph OSD drive created for cloud and hypervisor
            based environments if the integrated Ceph storage cluster is enabled and <see cref="P:Neon.Kube.NodeLabels.CephOSD"/>
            is <c>true</c> for this node.  This defaults to <see cref="P:Neon.Kube.CephOptions.OSDDriveSize"/>
            (<b>128GiB</b>).
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.CephOSDCacheSize">
            <summary>
            <para>
            <b>io.neonkube.ceph.cachesize</b> [<c>int</c>]: Specifies the RAM in bytes
            <see cref="T:Neon.Common.ByteUnits"/>) to assign to the Ceph OSDs for caching if the integrated 
            Ceph storage cluster is enabled and <see cref="P:Neon.Kube.NodeLabels.CephOSD"/> is <c>true</c> for this 
            node.  This defaults to <see cref="P:Neon.Kube.CephOptions.OSDCacheSize"/> (<b>1GB</b>) (which
            is probably too small for production clusters).
            </para>
            <note>
            <para>
            The <a href="https://ceph.com/community/new-luminous-bluestore/">Ceph documentation</a>
            states that OSDs may tend to underestimate the RAM it's using by up to 1.5 times.
            To avoid potential memory issues, neonKUBE will adjust this value by dividing it 
            by 1.5 to when actually configuring the OSD services.
            </para>
            <para>
            You should also take care to leave 1-2GB of RAM for the host Linux operating system
            as well as the OSD non-cache related memory when you're configuring this property.
            </para>
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.CephOSDJournalSize">
            <summary>
            <b>io.neonkube.ceph.journalsize</b> [<c>int</c>]: Specifies the disk capacity
            in bytes <see cref="T:Neon.Common.ByteUnits"/>) to assign to the Ceph OSD journal if the integrated 
            Ceph storage cluster is enabled and <see cref="P:Neon.Kube.NodeLabels.CephOSD"/> is <c>true</c> for this node.
            This defaults to <see cref="P:Neon.Kube.CephOptions.OSDJournalSize"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.CephMDSCacheSize">
            <summary>
            <para>
            <b>io.neonkube.ceph.mds_cachesize_mb</b> [<c>int</c>]: Specifies the RAM in bytes
            <see cref="T:Neon.Common.ByteUnits"/>) to assign to the Ceph MDS services for caching if the integrated
            Ceph storage cluster is enabled and <see cref="P:Neon.Kube.NodeLabels.CephMDS"/> is <c>true</c> for this node.
            This defaults to <see cref="P:Neon.Kube.CephOptions.MDSCacheSize"/> (<b>1GB</b>) (which is 
            probably too small for production clusters).
            </para>
            <note>
            <para>
            The Ceph documentation states that OSDs may tend to underestimate the RAM it's using
            by up to 1.5 times.  To avoid potential memory issues, neonKUBE  will adjust this
            value by dividing it  by 1.5 to when actually configuring the MDS services.
            </para>
            <para>
            You should also take care to leave 1-2GB of RAM for the host Linux operating system
            as well as the OSD non-cache related memory when you're configuring this property.
            </para>
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.Custom">
            <summary>
            Custom node labels.
            </summary>
            <remarks>
            <para>
            Use this property to define custom host node labels.
            </para>
            <note>
            The <b>io.neonkube/</b> label prefix is reserved.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.NodeLabels.Standard">
            <summary>
            Enumerates the node labels.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeLabels.All">
            <summary>
            Enumerates all node labels.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeLabels.ParseCheck(System.Collections.Generic.KeyValuePair{System.String,System.String},System.Action)">
            <summary>
            Logs a warning if a label field parse action fails.
            </summary>
            <param name="label">The label being parsed.</param>
            <param name="parseAction">The parse action.</param>
        </member>
        <member name="M:Neon.Kube.NodeLabels.Parse(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parses a dictionary of name/value labels by setting the appropriate
            properties of the parent node.
            </summary>
            <param name="labels">The label dictionary.</param>
        </member>
        <member name="M:Neon.Kube.NodeLabels.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the node labels.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:System.ArgumentException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NodeOptions">
            <summary>
            Describes cluster host node options.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeOptions.Upgrade">
            <summary>
            Specifies whether the host node operating system should be upgraded
            during cluster preparation.  This defaults to <see cref="F:Neon.Kube.OsUpgrade.Full"/>
            to pick up most criticial updates.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeOptions.PasswordLength">
            <summary>
            cluster hosts are configured with a random root account password.
            This defaults to <b>20</b> characters.  The minumum length is <b>8</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeOptions.AllowPackageManagerIPv6">
            <summary>
            Allow the Linux package manager to use IPv6 when communicating with
            package mirrors.  This defaults to <c>false</c> to restrict access
            to IPv4.
            </summary>
        </member>
        <member name="P:Neon.Kube.NodeOptions.PackageManagerRetries">
            <summary>
            Specifies the number of times the host package manager should retry
            failed index or package downloads.  This defaults to <b>5</b>.
            </summary>
        </member>
        <member name="M:Neon.Kube.NodeOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NodeRole">
            <summary>
            Enumerates the roles a cluster node can assume.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeRole.Master">
            <summary>
            The node is a a cluster master.
            </summary>
        </member>
        <member name="F:Neon.Kube.NodeRole.Worker">
            <summary>
            The node is a cluster worker.
            </summary>
        </member>
        <member name="T:Neon.Kube.OsUpgrade">
            <summary>
            Enumerates the possible host node operating system upgrade options.
            </summary>
        </member>
        <member name="F:Neon.Kube.OsUpgrade.None">
            <summary>
            Perform no operating system upgrade.
            </summary>
        </member>
        <member name="F:Neon.Kube.OsUpgrade.Partial">
            <summary>
            Upgrades many but not all components.  This is equivalent to performing: <b>apt-get upgrade</b>
            </summary>
        </member>
        <member name="F:Neon.Kube.OsUpgrade.Full">
            <summary>
            Upgrades all components.  This is equivalent to performing: <b>apt-get dist-upgrade</b>
            </summary>
        </member>
        <member name="T:Neon.Kube.PrometheusOptions">
            <summary>
            Specifies the options for configuring the cluster integrated Prometheus 
            metrics stack: <a href="https://prometheus.io/">https://prometheus.io/</a>
            </summary>
        </member>
        <member name="P:Neon.Kube.PrometheusOptions.Enabled">
            <summary>
            Indicates whether Prometheus metrics are to be enabled for the cluster.  
            This defaults to <c>true</c>.
            </summary>
        </member>
        <member name="M:Neon.Kube.PrometheusOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.SetupOptions">
            <summary>
            Specifies setup related options.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupOptions.Debug">
            <summary>
            <para>
            Indicates that cluster prepare and setup should be run in <b>debug mode</b>.
            This is intended to help debugging cluster setup issues by having scripts
            uploaded multiple times at different stages of setup so that setup can
            be restarted with new scripts without having to restart setup from the
            beginning.  This defaults to <c>false</c>.
            </para>
            <note>
            This is intended for use by cluster developers.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupOptions.StepStaggerSeconds">
            <summary>
            <para>
            Specifies the maximum delay to be added between steps at strategic points 
            during cluster preparation and setup to help mitigate potential problems 
            when mutiple cluster nodes are trying to access the same Internet resources,
            potentially getting throttled by the remote endpoint.
            </para>
            <para>
            This defaults to <b>5 seconds</b> between these steps  Set this to 0 to disable
            the delay.
            </para>
            </summary>
        </member>
        <member name="M:Neon.Kube.SetupOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.XenServerOptions">
            <summary>
            Specifies hosting settings for the Citrix XenServer hypervisor.
            </summary>
        </member>
        <member name="M:Neon.Kube.XenServerOptions.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerOptions.HostXvaUri">
            <summary>
            <para>
            URI to the XenServer XVA image to use as a template for creating the virtual machines.  This defaults to
            <b>http://s3-us-west-2.amazonaws.com/neonforge/neoncluster/neon-Ubuntu-18.04.latest.xva</b>
            which is the latest supported Ubuntu 16.04 image.
            </para>
            <note>
            Production cluster definitions should be configured with an XVA with a specific version
            of the host operating system to ensure that cluster nodes are provisioned with the same
            operating system version.
            </note>
            <note>
            The XenServer <b>xe</b> CLI <b>does not support</b> downloading XVA images <b>via HTTPS</b>.
            You'll need to use HTTP or FTP.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerOptions.TemplateName">
            <summary>
            Names the XenServer template to be used when creating cluster nodes.  This defaults
            to <b>ubuntu-template</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerOptions.StorageRepository">
            <summary>
            Identifies the XenServer storage repository to be used to store the XenServer
            node template as well as the cluster virtual machine images.  This defaults to
            <b>Local storage</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerOptions.OsdStorageRepository">
            <summary>
            Identifies the XenServer storage repository to be used to for any Ceph OSD
            drives created for the cluster.  This defaults to <b>Local storage</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.XenServerOptions.Snapshot">
            <summary>
            Optionally directs XenCenter to create the virtual machines using a snapshot of
            the virtual machine template rather than creating a full copy.  This defaults
            to <c>false</c>.
            </summary>
            <remarks>
            <para>
            Virtual machines created via a snapshot will be ready within seconds where as
            creation can take something like 4 minutes on a SSD or 9 minutes on a spinning
            drive.  We don't enable snapshots though by default, because some web posts
            from around 2014 indicate that operators may encounter problems when something
            like 30 virtual machines have been created as snapshots from the same template.
            </para>
            <para>
            We figure that it's best to default to safe setting for production clusters and
            then allow operators to override this when provisioning temporary test clusters 
            or when provisioning on a storage repository that doesn't have these limitations.
            </para>
            <note>
            For snapshots to work, the storage repository must support them and the virtual
            machine template must reside in the same repository where the virtual machines
            are being created.  The current <c>neon-cli</c> implementation persists the
            cluster VM templates to the local storage repository, so support for non-local
            storage repositories is not support out-of-the-box at this time.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.XenServerOptions.Validate(Neon.Kube.ClusterDefinition)">
            <summary>
            Validates the options and also ensures that all <c>null</c> properties are
            initialized to their default values.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <exception cref="T:Neon.Kube.ClusterDefinitionException">Thrown if the definition is not valid.</exception>
        </member>
        <member name="T:Neon.Kube.NodeProxyCreator">
            <summary>
            Creates a <see cref="T:Neon.Kube.SshProxy`1"/> for the specified host and server name,
            configuring logging and the credentials as specified by the global command
            line options.
            </summary>
            <param name="name">The node name.</param>
            <param name="publicAddress">The node's public IP address or FQDN.</param>
            <param name="privateAddress">The node's private IP address.</param>
            <param name="appendToLog">
            Pass <c>true</c> to append to an existing log file (or create one if necessary)
            or <c>false</c> to replace any existing log file with a new one.
            </param>
            <returns>The <see cref="T:Neon.Kube.SshProxy`1"/>.</returns>
        </member>
        <member name="T:Neon.Kube.ClusterProxy">
            <summary>
            Used to remotely manage a cluster via SSH/SCP.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.#ctor(Neon.Kube.KubeConfigContext,Neon.Kube.NodeProxyCreator,System.Boolean,Neon.Kube.RunOptions)">
            <summary>
            Constructs a cluster proxy from a cluster login.
            </summary>
            <param name="kubeContext">The cluster context.</param>
            <param name="nodeProxyCreator">
            The optional application supplied function that creates a node proxy
            given the node name, public address or FQDN, private address, and
            the node definition.
            </param>
            <param name="appendToLog">Optionally have logs appended to an existing log file rather than creating a new one.</param>
            <param name="defaultRunOptions">
            Optionally specifies the <see cref="T:Neon.Kube.RunOptions"/> to be assigned to the 
            <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> property for the
            nodes managed by the cluster proxy.  This defaults to <see cref="F:Neon.Kube.RunOptions.None"/>.
            </param>
            <remarks>
            The <paramref name="nodeProxyCreator"/> function will be called for each node in
            the cluster definition giving the application the chance to create the management
            proxy using the node's SSH credentials and also to specify logging.  A default
            creator that doesn't initialize SSH credentials and logging is used if <c>null</c>
            is passed.
            </remarks>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.#ctor(Neon.Kube.ClusterDefinition,Neon.Kube.NodeProxyCreator,System.Boolean,Neon.Kube.RunOptions)">
            <summary>
            Constructs a cluster proxy from a cluster definition.
            </summary>
            <param name="clusterDefinition">The cluster definition.</param>
            <param name="nodeProxyCreator">
            The application supplied function that creates a management proxy
            given the node name, public address or FQDN, private address, and
            the node definition.
            </param>
            <param name="appendToLog">Optionally have logs appended to an existing log file rather than creating a new one.</param>
            <param name="defaultRunOptions">
            Optionally specifies the <see cref="T:Neon.Kube.RunOptions"/> to be assigned to the 
            <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> property for the
            nodes managed by the cluster proxy.  This defaults to <see cref="F:Neon.Kube.RunOptions.None"/>.
            </param>
            <remarks>
            The <paramref name="nodeProxyCreator"/> function will be called for each node in
            the cluster definition giving the application the chance to create the node
            proxy using the node's SSH credentials and also to specify logging.  A default
            creator that doesn't initialize SSH credentials and logging is used if <c>null</c>
            is passed.
            </remarks>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.Dispose">
            <summary>
            Releases all resources associated with the instance.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.Dispose(System.Boolean)">
            <summary>
            Releases all associated resources.
            </summary>
            <param name="disposing">Pass <c>true</c> if we're disposing, <c>false</c> if we're finalizing.</param>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Name">
            <summary>
            Returns the cluster name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.HostingManager">
            <summary>
            The associated <see cref="T:Neon.Kube.IHostingManager"/> or <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.KubeContext">
            <summary>
            Returns the cluster context.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Definition">
            <summary>
            Returns the cluster definition.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Nodes">
            <summary>
            Returns the read-only list of cluster node proxies.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.FirstMaster">
            <summary>
            Returns the first cluster master node as sorted by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.SecureRunOptions">
            <summary>
            Specifies the <see cref="T:Neon.Kube.RunOptions"/> to use when executing commands that 
            include secrets.  This defaults to <see cref="F:Neon.Kube.RunOptions.Redact"/> for best 
            security but may be changed to just <see cref="F:Neon.Kube.RunOptions.None"/> when debugging
            cluster setup.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Masters">
            <summary>
            Enumerates the cluster master node proxies sorted in ascending order by name.
            </summary>
        </member>
        <member name="P:Neon.Kube.ClusterProxy.Workers">
            <summary>
            Enumerates the cluster worker node proxies sorted in ascending order by name.
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.CreateNodes">
            <summary>
            Initializes or reinitializes the <see cref="P:Neon.Kube.ClusterProxy.Nodes"/> list.  This is called during
            construction and also in rare situations where the node proxies need to be 
            recreated (e.g. after configuring node static IP addresses).
            </summary>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetNode(System.String)">
            <summary>
            Returns the <see cref="T:Neon.Kube.SshProxy`1"/> instance for a named node.
            </summary>
            <param name="nodeName">The node name.</param>
            <returns>The node proxy instance.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the name node is not present in the cluster.</exception>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.FindNode(System.String)">
            <summary>
            Looks for the <see cref="T:Neon.Kube.SshProxy`1"/> instance for a named node.
            </summary>
            <param name="nodeName">The node name.</param>
            <returns>The node proxy instance or <c>null</c> if the named node does not exist.</returns>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetReachableMaster(Neon.Net.ReachableHostMode)">
            <summary>
            Returns a master node that is reachable via the network because it answers a ping.
            </summary>
            <param name="failureMode">Specifies what should happen when there are no reachable masters.</param>
            <returns>The reachable master node or <c>null</c>.</returns>
            <exception cref="T:Neon.Kube.KubeException">
            Thrown if no masters are reachable and <paramref name="failureMode"/> 
            is passed as <see cref="F:Neon.Net.ReachableHostMode.Throw"/>.
            </exception>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetReachableNode(System.Func{Neon.Kube.SshProxy{Neon.Kube.NodeDefinition},System.Boolean},Neon.Net.ReachableHostMode)">
            <summary>
            Selects a cluster node from the set of nodes that match a predicate that is 
            reachable via the network because it answers a ping.
            </summary>
            <param name="predicate">Predicate used to select the candidate nodes.</param>
            <param name="failureMode">Specifies what should happen when there are no reachable nodes.</param>
            <returns>The reachable node or <c>null</c>.</returns>
            <exception cref="T:Neon.Kube.KubeException">
            Thrown if no nodes matching the predicate are reachable and <paramref name="failureMode"/> 
            is passed as <see cref="F:Neon.Net.ReachableHostMode.Throw"/>.
            </exception>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.Configure(Neon.Kube.ConfigStepList)">
            <summary>
            Performs cluster configuration steps.
            </summary>
            <param name="steps">The configuration steps.</param>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetFileUploadSteps(System.Collections.Generic.IEnumerable{Neon.Kube.SshProxy{Neon.Kube.NodeDefinition}},System.String,System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            Returns steps that upload a text file to a set of cluster nodes.
            </summary>
            <param name="nodes">The cluster nodes to receive the upload.</param>
            <param name="path">The target path on the Linux node.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">Optionally expands TABs into spaces when non-zero.</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies target file permissions (must be <c>chmod</c> compatible).</param>
            <returns>The steps.</returns>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetFileUploadSteps(Neon.Kube.SshProxy{Neon.Kube.NodeDefinition},System.String,System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            Returns steps that upload a text file to a cluster node.
            </summary>
            <param name="node">The cluster node to receive the upload.</param>
            <param name="path">The target path on the Linux node.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">Optionally expands TABs into spaces when non-zero.</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies target file permissions (must be <c>chmod</c> compatible).</param>
            <returns>The steps.</returns>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.LogLine(System.String)">
            <summary>
            Writes a message to the logs associated with all cluster nodes.
            </summary>
            <param name="message">Optionally specifies the log message.</param>
        </member>
        <member name="M:Neon.Kube.ClusterProxy.GetTimeUtc">
            <summary>
            Returns the current time (UTC) for the cluster by fetching the 
            time from one of the cluster masters.
            </summary>
            <returns>The cluster's current <see cref="T:System.DateTime"/> (UTC).</returns>
        </member>
        <member name="T:Neon.Kube.CommandBundle">
            <summary>
            Describes a collection of files to be uploaded to a Linux server along with the command to be executed 
            after the files have been unpacked.
            </summary>
            <remarks>
            <para>
            This class is intended for use with the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)"/>
            and  <see cref="M:Neon.Kube.SshProxy`1.SudoCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)"/> methods for situations where
            one or more files need to be uploaded to a cluster host node and be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.Kube.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            </remarks>
        </member>
        <member name="F:Neon.Kube.CommandBundle.ArgBreak">
            <summary>
            <para>
            This is a meta command line argument that can be added to a command
            to indicate that the following non-command line option is not to be
            considered to be the value for the previous command line option.
            </para>
            <para>
            This is entirely optional but can make <see cref="M:Neon.Kube.CommandBundle.ToBash(System.String)"/> 
            formatting a bit nicer.
            </para>
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandBundle.NormalizeArgs(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Normalizes the bundle command arguments into a single list of strings
            by expanding any arguments that can enumerate strings, normalizing common
            value types like booleans, and adding surrounding quotes if necessary.
            </summary>
            <param name="args">The arguments to be normalized.</param>
            <param name="keepArgBreaks">
            Optionally specifies that any <see cref="F:Neon.Kube.CommandBundle.ArgBreak"/> arguments are 
            included in the output.
            </param>
            <returns>List of normalized arguments.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.SafeArg(System.String)">
            <summary>
            Ensures that a Bash command argument is escaped as necessary.
            </summary>
            <param name="arg">The argument string.</param>
            <returns>The safe argument.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.FromScript(System.String)">
            <summary>
            Creates a bundle that simply uploads and runs a (<c>string</c>) script.
            </summary>
            <param name="script">The script text.</param>
            <returns>The <see cref="T:Neon.Kube.CommandBundle"/>.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.FromScript(System.Text.StringBuilder)">
            <summary>
            Creates a bundle that simply uploads and runs a (<see cref="T:System.Text.StringBuilder"/>) script.
            </summary>
            <param name="script">The script text.</param>
            <returns>The <see cref="T:Neon.Kube.CommandBundle"/>.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.#ctor(System.String,System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The command arguments or <c>null</c>.</param>
            <remarks>
            <para>
            The <paramref name="args"/> parameter optionally specifies an array of
            command argument objects.  With a few exceptions, these arguments will 
            be passed to the command by rendering the object into a <c>string</c>
            by calling its <see cref="M:System.Object.ToString"/> method.  <c>null</c>
            and empty string arguments will be ignored and <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            arguments will be expanded.
            </para>
            <para>
            <c>bool</c> and <c>double</c> arguments get special treatment.  <c>bool</c>
            values will be rendered as <c>true</c> or <c>false</c> and <c>double</c>
            arguments will be rendered using <c>double.ToString("#.0")</c>.  If you
            need something different, you can convert your arguments to strings first.
            </para>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CommandBundle.Command">
            <summary>
            Returns the command to be executed after the bundle has been unpacked.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandBundle.Args">
            <summary>
            Returns the command arguments.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandBundle.AddFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a text file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="text">The file text.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
            <param name="linuxCompatible">
            Optionally controls whether the text is made Linux compatible by removing carriage returns
            and expanding TABs into spaces.  This defaults to <c>true</c>.
            </param>
        </member>
        <member name="M:Neon.Kube.CommandBundle.AddFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            Adds a binary file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="data">The file data.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
        </member>
        <member name="M:Neon.Kube.CommandBundle.Validate">
            <summary>
            Verifies that the bundle is valid.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the bundle is not valid.</exception>
        </member>
        <member name="M:Neon.Kube.CommandBundle.ToString">
            <summary>
            Renders the command and arguments as a Bash compatible command line.
            </summary>
            <returns>The command line.</returns>
        </member>
        <member name="M:Neon.Kube.CommandBundle.ToBash(System.String)">
            <summary>
            <para>
            Formats the command such that it could be added to a Bash script.
            </para>
            <note>
            This doesn't work if the command has attached files.
            </note>
            </summary>
            <param name="comment">Optional comment text (without a leading <b>#</b>).</param>
            <returns>The command formatted for Bash.</returns>
            <exception cref="T:System.NotSupportedException">
            Thrown because <see cref="M:Neon.Kube.CommandBundle.ToBash(System.String)"/> does not support commands with attached files.
            </exception>
            <remarks>
            This can be useful for making copies of cluster configuration commands
            on the server as scripts for situations where system operators need
            to manually tweak things.
            </remarks>
        </member>
        <member name="T:Neon.Kube.CommandFile">
            <summary>
            Describes a file to be included in a <see cref="T:Neon.Kube.CommandBundle"/>.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandFile.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandFile.Path">
            <summary>
            The relative path of the file within the bundle.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandFile.Text">
            <summary>
            The file text.  This will be uploaded encoded as UTF-8.
            </summary>
            <remarks>
            <note>
            No transformations will be performed on the text.  Specifically, Windows style line endings
            <b>will not</b> be converted to Linux standard TAB characters will not be expanded into
            spaces.  You'll need perform these yourself if necessary.
            </note>
            <note>
            Only one of <see cref="P:Neon.Kube.CommandFile.Text"/> or <see cref="P:Neon.Kube.CommandFile.Data"/> may be specified.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CommandFile.Data">
            <summary>
            The file binary data.
            </summary>
            <remarks>
            <note>
            Only one of <see cref="P:Neon.Kube.CommandFile.Text"/> or <see cref="P:Neon.Kube.CommandFile.Data"/> may be specified.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CommandFile.IsExecutable">
            <summary>
            Indicates whether the file should be marked as executable after being
            unpacked on the Linux machine.
            </summary>
        </member>
        <member name="T:Neon.Kube.CommandResponse">
            <summary>
            Describes the results of a command executed on the remote server using
            <see cref="M:Neon.Kube.SshProxy`1.RunCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)"/> 
            or <see cref="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,System.Object[])"/>.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.Command">
            <summary>
            Returns the original command line.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.BashCommand">
            <summary>
            Returns the command nicely formatted across multiple lines of text
            that is suitable for including in a Bash script.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.ExitCode">
            <summary>
            Returns the command exit code.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.Success">
            <summary>
            Returns <c>true</c> if the command exit code was zero, 
            <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.ProxyIsFaulted">
            <summary>
            Indicates whether the command failed because the proxy is faulted due to a previous error.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.OutputText">
            <summary>
            Returns the command standard output as a string when <see cref="F:Neon.Kube.RunOptions.BinaryOutput"/> 
            is not specified.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.OpenOutputTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard output result.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.ErrorText">
            <summary>
            Returns the command standard error as a string.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.OpenErrorTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard error result.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.AllText">
            <summary>
            Returns the command standard output and error as a string.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.OpenAllTextReader">
            <summary>
            Creates a <see cref="T:System.IO.TextReader"/> over the command's standard output and standard error results.
            </summary>
        </member>
        <member name="P:Neon.Kube.CommandResponse.OutputBinary">
            <summary>
            Returns the command standard output as a byte array when <see cref="F:Neon.Kube.RunOptions.BinaryOutput"/> 
            is specified.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.OpenOutputBinaryStream">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> that can be used to read the standard output as binary when 
            <see cref="F:Neon.Kube.RunOptions.BinaryOutput"/> is specified.
            </summary>
            <returns>The <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="P:Neon.Kube.CommandResponse.ErrorSummary">
            <summary>
            Returns an error message suitable for including in a related exception message.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandResponse.ToBash(System.String)">
            <inheritdic/>
        </member>
        <member name="M:Neon.Kube.CommandResponse.EnsureSuccess">
            <summary>
            Ensures that the response has a zero exit code.
            </summary>
            <exception cref="T:Neon.Common.ExecuteException">Thrown if when <see cref="P:Neon.Kube.CommandResponse.ExitCode"/> is non-zero.</exception>
        </member>
        <member name="T:Neon.Kube.IBashCommandFormatter">
            <summary>
            Describes a type implementation that can render a nicely formatted Bash command.
            </summary>
        </member>
        <member name="M:Neon.Kube.IBashCommandFormatter.ToBash(System.String)">
            <summary>
            Renders a nicely formatted Bash command.  Note that the string returned may
            include multipe lines with continuation characters.
            </summary>
            <param name="comment">The optional comment to be included in the output.</param>
            <returns>The formatted Bash command.</returns>
        </member>
        <member name="T:Neon.Kube.RemoteCommandException">
            <summary>
            Indicates that a remote command execution failed.
            </summary>
        </member>
        <member name="M:Neon.Kube.RemoteCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The optional inner exception.</param>
        </member>
        <member name="T:Neon.Kube.RunOptions">
            <summary>
            Enumerates the possible options to use when executing a remote
            command on a <see cref="T:Neon.Kube.SshProxy`1"/>.  These options may be 
            combined using the bitwise OR operator.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.None">
            <summary>
            No options are set.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.Defaults">
            <summary>
            Bitwise ORs any specific option flags with those specified by <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/>.
            This is handy for setting or resetting flags like <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> on a global 
            basis for a node proxy instance.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.FaultOnError">
            <summary>
            Puts the <see cref="T:Neon.Kube.SshProxy`1"/> into the faulted state when the command
            returns a non-zero exit code.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.RunWhenFaulted">
            <summary>
            Runs the command even if the <see cref="T:Neon.Kube.SshProxy`1"/> is in the faulted state.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.IgnoreRemotePath">
            <summary>
            Ignore the <see cref="P:Neon.Kube.SshProxy`1.RemotePath"/> property.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.BinaryOutput">
            <summary>
            Return the standard output from remote command as binary data rather
            than intrepreting it as text.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.Redact">
            <summary>
            Use for commands that may include sensitive secrets as command arguments
            and/or results.  Only limited information about commands run with this
            flag will be logged.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.LogOnErrorOnly">
            <summary>
            Logs command output only if the command returns a non-zero exit code.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.LogOutput">
            <summary>
            Logs the command standard output (standard error output is logged by default).
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.LogBundle">
            <summary>
            Used internally to prevent logging of the command "START: *" line at 
            lower levels because this has already been logged.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.Audit">
            <summary>
            Used to mark commands whose execution should be logged for auditing.
            </summary>
        </member>
        <member name="F:Neon.Kube.RunOptions.Shutdown">
            <summary>
            <para>
            Indicates that the command will shutdown or restart or reboot
            the target server.  Commands with this flag will not be retried
            on the server.
            </para>
            <note>
            IMPORTANT: You must specify this flag if your command shutdown
            down the machine to prevent causing an infinite reboot loop.
            </note>
            </summary>
        </member>
        <member name="T:Neon.Kube.SshCredentials">
            <summary>
            Provides credentials suitable for connecting to a server machine via SSH.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshCredentials.FromUserPassword(System.String,System.String)">
            <summary>
            Returns credentials based on a user name and password.
            </summary>
            <param name="username">The user name.</param>
            <param name="password">The password.</param>
            <returns>The <see cref="T:Neon.Kube.SshCredentials"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshCredentials.FromPrivateKey(System.String,System.String)">
            <summary>
            Returns credentials based on a user name and password.
            </summary>
            <param name="username">The user name.</param>
            <param name="privateKey">The unencrypted PEM-encoded private key.</param>
            <returns>The <see cref="T:Neon.Kube.SshCredentials"/>.</returns>
        </member>
        <member name="P:Neon.Kube.SshCredentials.None">
            <summary>
            Returns an instance indicating that there are no available credentials.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Neon.Kube.SshCredentials.Username">
            <summary>
            Returns the user name.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshCredentials.AuthenticationMethod">
            <summary>
            Returns the authentication method to be used to establish an SSH.NET session.
            </summary>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the SSH credentials are not available.</exception>
        </member>
        <member name="T:Neon.Kube.SshProxy`1">
            <summary>
            <para>
            Uses an SSH/SCP connection to provide access to Linux machines to access
            files, run commands, etc.
            </para>
            <note>
            This is class is <b>not intended</b> to be a <b>general purpose SSH wrapper</b> 
            at this time.  It currently assumes that the remote side is running some variant
            of Linux and it makes some globale changes including overwriting the 
            <b>/etc/sudoers.d/nopasswd</b> file to disable password prompts for all
            users and creating some global directories.
            </note>
            </summary>
            <typeparam name="TMetadata">
            Defines the metadata type the application wishes to associate with the server.
            You may specify <c>object</c> when no additional metadata is required.
            </typeparam>
            <remarks>
            <para>
            Construct an instance to connect to a specific cluster node.  You may specify
            <typeparamref name="TMetadata"/> to associate application specific information
            or state with the instance.
            </para>
            <para>
            This class includes methods to invoke Linux commands on the node,
            </para>
            <para>
            Call <see cref="M:Neon.Kube.SshProxy`1.Dispose"/> or <see cref="M:Neon.Kube.SshProxy`1.Disconnect"/> to close the connection.
            </para>
            <note>
            You can use <see cref="M:Neon.Kube.SshProxy`1.Clone"/> to make a copy of a proxy that can be
            used to perform parallel operations against the same machine.
            </note>
            </remarks>
            <threadsafety instance="false"/>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.GetConnectLock(System.String)">
            <summary>
            Returns the object to be used to when establishing connections to
            a target server.
            </summary>
            <param name="host">The target server hostname or IP address.</param>
            <returns>The lock object.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.#ctor(System.String,System.String,System.Net.IPAddress,Neon.Kube.SshCredentials,System.IO.TextWriter)">
            <summary>
            Constructs a <see cref="T:Neon.Kube.SshProxy`1"/>.
            </summary>
            <param name="name">The display name for the server.</param>
            <param name="publicAddress">The public IP address or FQDN of the server or <c>null.</c></param>
            <param name="privateAddress">The private cluster IP address for the server.</param>
            <param name="credentials">The credentials to be used for establishing SSH connections.</param>
            <param name="logWriter">The optional <see cref="T:System.IO.TextWriter"/> where operation logs will be written.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="name"/> or if <paramref name="credentials"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Dispose">
            <summary>
            Releases all associated resources (e.g. any open server connections).
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Dispose(System.Boolean)">
            <summary>
            Releases all associated resources (e.g. any open server connections).
            </summary>
            <param name="disposing">Pass <c>true</c> if we're disposing, <c>false</c> if we're finalizing.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Clone">
            <summary>
            Returns a clone of the SSH proxy.  This can be useful for situations where you
            need to be able to perform multiple SSH/SCP operations against the same
            machine in parallel.
            </summary>
            <returns>The cloned <see cref="T:Neon.Kube.SshProxy`1"/>.</returns>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.OsName">
            <summary>
            <para>
            Returns the name of the remote operating system (e.g. "Ubuntu").
            </para>
            <note>
            This is only valid after a connection has been established.
            </note>
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.OsVersion">
            <summary>
            <para>
            Returns the version of the remote operating system (e.g. "18.04.1").
            </para>
            <note>
            This is only valid after a connection has been established.
            </note>
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DeadlockBreaker(System.String,System.Action,System.TimeSpan)">
            <summary>
            Performs an action on a new thread, killing the thread if it hasn't
            terminated within the specified timeout.
            </summary>
            <param name="actionName">Idenfies the action for logging purposes.</param>
            <param name="action">The action to be performed.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Disconnect">
            <summary>
            Closes any open connections to the Linux server but leaves open the
            opportunity to reconnect later.
            </summary>
            <remarks>
            <note>
            This is similar to what dispose does <see cref="M:Neon.Kube.SshProxy`1.Dispose"/> but dispose does
            not allow reconnection.
            </note>
            <para>
            This command is useful situations where the client application may temporarily
            lose contact with the server if for example, when it is rebooted or the network
            configuration changes.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.InternalSshDisconnect">
            <summary>
            Disconnects the SSH client.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.InternalScpDisconnect">
            <summary>
            Disconnects the SCP client.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Cluster">
            <summary>
            The associated <see cref="T:Neon.Kube.ClusterProxy"/> or <c>null</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Name">
            <summary>
            Returns the display name for the server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.PublicAddress">
            <summary>
            Returns the cluster public IP address, FQDN, or <c>null</c> for the
            server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.PrivateAddress">
            <summary>
            Returns the cluster private IP address to used for connecting to the server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.SshPort">
            <summary>
            The SSH port.  This defaults to <b>22</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.ConnectTimeout">
            <summary>
            The connection attempt timeout.  This defaults to <b>5</b> seconds.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.FileTimeout">
            <summary>
            The file operation timeout.  This defaults to <b>30</b> seconds.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.RetryCount">
            <summary>
            The number of times to retry a failed remote command.  
            This defaults to <b>5</b>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.DefaultRunOptions">
            <summary>
            Specifies the default options to be bitwise ORed with any specific
            options passed to a run or sudo execution command when the <see cref="F:Neon.Kube.RunOptions.Defaults"/> 
            flag is specified.  This defaults to <see cref="F:Neon.Kube.RunOptions.None"/>.
            </summary>
            <remarks>
            Setting this is a good way to specify a global default for flags like <see cref="F:Neon.Kube.RunOptions.FaultOnError"/>.
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.RemotePath">
            <summary>
            The PATH to use on the remote server when executing commands in the
            session or <c>null</c>/empty to run commands without a path.  This
            defaults to the standard Linux path and <see cref="F:Neon.Kube.KubeHostFolders.Bin"/>.
            </summary>
            <remarks>
            <note>
            When you modify this, be sure to use a colon (<b>:</b>) to separate 
            multiple directories as required.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Username">
            <summary>
            Returns the username used to log into the remote node.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UpdateCredentials(Neon.Kube.SshCredentials)">
            <summary>
            Updates the proxy credentials.  Call this whenever you change the
            password or SSH certificate for the user account we're using for the
            current proxy connection.  This ensures that the proxy will be able
            to reconnect to the service when required.
            </summary>
            <param name="newCredentials">The new credentials.</param>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Status">
            <summary>
            The current server status.
            </summary>
            <remarks>
            <para>
            This property is intended to be used by management tools to indicate the state
            of the server for UX purposes.  This property will be set by some methods such
            as <see cref="M:Neon.Kube.SshProxy`1.WaitForBoot(System.Nullable{System.TimeSpan},System.Boolean)"/> but can also be set explicitly by tools when they
            have an operation in progress on the server.
            </para>
            <note>
            This will return <b>*** FAULTED ***</b> if the <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.IsReady">
            <summary>
            Indicates that the server has completed or has failed the current set of operations.
            </summary>
            <remarks>
            <note>
            This will always return <c>false</c> if the server has faulted (<see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>).
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.IsFaulted">
            <summary>
            Indicates that the server is in a faulted state because one or more operations
            have failed.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.Metadata">
            <summary>
            Applications may use this to associate metadata with the instance.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DisableSudoPrompt(System.String)">
            <summary>
            <para>
            Prevents <b>sudo</b> from prompting for passwords.
            </para>
            <note>
            The connected user must already be a member of the <b>root</b> group.
            </note>
            <note>
            You do not need to call <see cref="M:Neon.Kube.SshProxy`1.Connect(System.TimeSpan)"/> or <see cref="M:Neon.Kube.SshProxy`1.WaitForBoot(System.Nullable{System.TimeSpan},System.Boolean)"/>
            before calling this method (in fact, calling those methods will probably fail).
            </note>
            </summary>
            <param name="password">The current user's password.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Shutdown">
            <summary>
            Shutdown the server.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Reboot(System.Boolean)">
            <summary>
            Reboot the server.
            </summary>
            <param name="wait">Optionally wait for the server to reboot (defaults to <c>true</c>).</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Log(System.String)">
            <summary>
            Writes text to the operation log.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.LogLine(System.String)">
            <summary>
            Writes a line of text to the operation log.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.LogFlush">
            <summary>
            Flushes the log.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.LogException(System.Exception)">
            <summary>
            Writes exception information to the operation log.
            </summary>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.LogException(System.String,System.Exception)">
            <summary>
            Writes exception information to the operation log.
            </summary>
            <param name="message">The operation details.</param>
            <param name="e">The exception.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Fault(System.String)">
            <summary>
            Puts the node proxy into the faulted state.
            </summary>
            <param name="message">The optional message to be logged.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.GetConnectionInfo">
            <summary>
            Returns the connection information for SSH.NET.
            </summary>
            <returns>The connection information.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Connect(System.TimeSpan)">
            <summary>
            Establishes a connection to the server.
            </summary>
            <param name="timeout">Maximum amount of time to wait for a connection (defaults to <see cref="P:Neon.Kube.SshProxy`1.ConnectTimeout"/>).</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.WaitForBoot(System.Nullable{System.TimeSpan},System.Boolean)">
            <summary>
            Waits for the server to boot by continuously attempting to establish an SSH session.
            </summary>
            <param name="timeout">The operation timeout (defaults to <b>10 minutes</b>).</param>
            <param name="createHomeFolders">Optionally ensure that the required HOME folders for the user account exist.</param>
            <returns>The tracking <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            <para>
            The method will attempt to connect to the server every 10 seconds up to the specified
            timeout.  If it is unable to connect during this time, the exception thrown by the
            SSH client will be rethrown.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.OpenSshConnection">
            <summary>
            Opens a new <see cref="T:Renci.SshNet.SshClient"/> connection.
            </summary>
            <returns>The new connection.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.EnsureSshConnection">
            <summary>
            Ensures that an SSH connection has been established.
            </summary>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.OpenScpConnection">
            <summary>
            Opens a new <see cref="T:Renci.SshNet.ScpClient"/> connection.
            </summary>
            <returns>The new connection.</returns>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.EnsureScpConnection">
            <summary>
            Ensures that an SCP connection has been established.
            </summary>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.HomeFolderPath">
            <summary>
            Returns the path to the user's home folder on the server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.UploadFolderPath">
            <summary>
            Returns the path to the user's upload folder on the server.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.EnsureUploadFolder">
            <summary>
            Ensures that the [~/.upload] folder exists on the server.
            </summary>
        </member>
        <member name="P:Neon.Kube.SshProxy`1.DownloadFolderPath">
            <summary>
            Returns the path to the user's download folder on the server.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.EnsureDownloadFolder">
            <summary>
            Ensures that the [~/.download] folder exists on the server.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CloneSshClient">
            <summary>
            <para>
            Creates and returns a clone of a low-level <see cref="T:Renci.SshNet.SshClient"/> to 
            the remote endpoint.
            </para>
            <note>
            The caller is responsible for disposing the returned instance.
            </note>
            </summary>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CloneScpClient">
            <summary>
            <para>
            Creates and returns a clone of a low-level <see cref="T:Renci.SshNet.ScpClient"/> to 
            the remote endpoint.
            </para>
            <note>
            The caller is responsible for disposing the returned instance.
            </note>
            </summary>
            <exception cref="T:Renci.SshNet.Common.SshConnectionException">Thrown if a connection could not be established.</exception>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CreateHostFolders">
            <summary>
            Ensures that the configuration and setup folders required for a Neon host
            node exist and have the appropriate permissions.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.RemoveFile(System.String)">
            <summary>
            Removes a file on the server if it exists.
            </summary>
            <param name="target">The path to the target file.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Download(System.String,System.IO.Stream)">
            <summary>
            Downloads a file from the Linux server and writes it out a stream.
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DownloadBytes(System.String)">
            <summary>
            Downloads a file as bytes from the Linux server .
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <returns>The file contents as UTF8 text.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DownloadText(System.String)">
            <summary>
            Downloads a file as text from the Linux server.
            </summary>
            <param name="source">The source path of the file on the Linux server.</param>
            <returns>The file contents as UTF8 text.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.DirectoryExists(System.String,Neon.Kube.RunOptions)">
            <summary>
            Determines whether a directory exists on the remote server.
            </summary>
            <param name="path">The directory path.</param>
            <param name="runOptions">Optional command execution options.</param>
            <returns><c>true</c> if the directory exists.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.FileExists(System.String)">
            <summary>
            Determines whether a file exists on the remote server.
            </summary>
            <param name="path">The file path.</param>
            <returns><c>true</c> if the file exists.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Upload(System.String,System.IO.Stream,System.String,System.String,System.Boolean)">
            <summary>
            Uploads a binary stream to the Linux server and then writes it to the file system.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="input">The input stream.</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <param name="userPermissions">Optionally indicates that the operation should be performed with user-level permissions.</param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadBytes(System.String,System.Byte[])">
            <summary>
            Uploads a byte array to a Linux server file.
            </summary>
            <param name="target">The target path of the file on the Linux server.</param>
            <param name="bytes">The bytes to be uploaded.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadText(System.String,System.IO.Stream,System.Int32,System.Text.Encoding,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads a text stream to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="textStream">The input stream.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="inputEncoding">Optionally specifies the input text encoding (defaults to UTF-8).</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            Any Unicode Byte Order Marker (BOM) at start of the input stream will be removed.
            </note>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadText(System.String,System.String,System.Int32,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads a text string to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadText(System.String,System.Text.StringBuilder,System.Int32,System.Text.Encoding,System.String,System.String)">
            <summary>
            Uploads text from a <see cref="T:System.Text.StringBuilder"/> to the Linux server and then writes it to the file system,
            converting any CR-LF line endings to the Unix-style LF.
            </summary>
            <param name="target">The target path on the Linux server.</param>
            <param name="text">The input text.</param>
            <param name="tabStop">
            Optionally expands TABs into spaces when greater than zero or converts 
            a series of leading spaces into tabs if less than zero.
            </param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies the file permissions (must be <c>chmod</c> compatible).</param>
            <param name="owner">Optionally specifies the file owner (must be <c>chown</c> compatible).</param>
            <remarks>
            <note>
            <para>
            <b>Implementation Note:</b> The SSH.NET library we're using does not allow for
            files to be uploaded directly to arbitrary file system locations, even if the
            logged-in user has admin permissions.  The problem is that SSH.NET does not
            provide a way to use <b>sudo</b> to claim these higher permissions.
            </para>
            <para>
            The workaround is to create an upload folder in the user's home directory
            called <b>~/upload</b> and upload the file there first and then use SSH
            to move the file to its target location under sudo.
            </para>
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.Download(System.String,System.String)">
            <summary>
            Downloads a file from the remote node to the local file computer, creating
            parent folders as necessary.
            </summary>
            <param name="source">The source path on the Linux server.</param>
            <param name="target">The target path on the local computer.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.FormatCommand(System.String,System.Object[])">
            <summary>
            Formats a Linux command and argument objects into a form suitable for passing
            to the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,System.Object[])"/> or <see cref="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,System.Object[])"/>
            methods.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The arguments.</param>
            <returns>The formatted command string.</returns>
            <remarks>
            This method quote arguments with embedded spaces and ignore <c>null</c> arguments.
            The method also converts arguments with types like <c>bool</c> into a Bash compatible
            form.
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.UploadBundle(Neon.Kube.CommandBundle,Neon.Kube.RunOptions,System.Boolean)">
            <summary>
            Uploads a command bundle to the server and unpacks it to a temporary folder
            in the user's home folder.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The command execution options.</param>
            <param name="userPermissions">Indicates whether the upload should be performed with user or root permissions.</param>
            <returns>The path to the folder where the bundle was unpacked.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.RunCommand(System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <para>
            This method uses <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.Kube.RunOptions"/> to
            the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeScpOperation(System.String,System.Action)">
            <summary>
            Attempts to perform a safe SCP operation up to
            [<see cref="P:Neon.Kube.SshProxy`1.RetryCount"/> + 1] times in the face of
            connection failures.
            </summary>
            <param name="name">The operation name (for logging).</param>
            <param name="action">The operation action.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeUpload(System.IO.Stream,System.String)">
            <summary>
            Uploads a file while attempting to deal with transient connection issues.
            </summary>
            <param name="input">The source stream.</param>
            <param name="path">The target path.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeDownload(System.String,System.IO.Stream)">
            <summary>
            Downloads a file while attempting to deal with transient connection issues.
            </summary>
            <param name="path">The source path.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeSshOperation(System.String,System.Action)">
            <summary>
            Attempts to perform a safe SSH command operation up to
            [<see cref="P:Neon.Kube.SshProxy`1.RetryCount"/> + 1] times in the face of
            connection failures.
            </summary>
            <param name="name">The operation name (for logging).</param>
            <param name="action">The operation action.</param>
        </member>
        <member name="T:Neon.Kube.SshProxy`1.SafeSshCommand">
            <summary>
            Holds the result of a <see cref="M:Neon.Kube.SshProxy`1.SafeRunCommand(System.String,System.Boolean)"/> command execution.
            </summary>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SafeRunCommand(System.String,System.Boolean)">
            <summary>
            Runs the command passed on the server to proactively deal with 
            transient connection issues.
            </summary>
            <param name="command">The command.</param>
            <param name="binaryOutput">Optionally indicates that the standard output should be treated as bunary.</param>
            <returns>The <see cref="T:Renci.SshNet.SshCommand"/> response.</returns>
            <remarks>
            <note>
            The command may not specify file redirection (this is verified by
            <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])"/>).
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.ToBash(System.String,System.Object[])">
            <summary>
            Returns the command and arguments as a nicely formatted Bash command.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The arguments.</param>
            <returns>The command string.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server with <see cref="T:Neon.Kube.RunOptions"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <exception cref="T:Neon.Kube.RemoteCommandException">
            Thrown if the command returned a non-zero exit code and 
            <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> was passed.
            </exception>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c> and throwing a <see cref="T:Neon.Kube.RemoteCommandException"/>.
            This means that <see cref="P:Neon.Kube.SshProxy`1.IsReady"/> will  always return <c>false</c> 
            afterwards and subsequent calls to <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,System.Object[])"/>
            and <see cref="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,System.Object[])"/> will be ignored unless 
            <see cref="F:Neon.Kube.RunOptions.RunWhenFaulted"/> is passed with the future command. 
            <see cref="F:Neon.Kube.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.RunCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)">
            <summary>
            Runs a <see cref="T:Neon.Kube.CommandBundle"/> with user permissions on the remote machine.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The execution options (defaults to <see cref="F:Neon.Kube.RunOptions.Defaults"/>).</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="bundle"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            This method is intended for situations where one or more files need to be uploaded to a cluster host node 
            and then be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.Kube.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            <note>
            <paramref name="runOptions"/> is set to <see cref="F:Neon.Kube.RunOptions.Defaults"/> by default.  This means
            that the flags specified by <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> will be be used.  This is a 
            good way to specify a global default for flags like <see cref="F:Neon.Kube.RunOptions.FaultOnError"/>.
            </note>
            <note>
            This command requires that the <b>unzip</b> package be installed on the host.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b>.
            </summary>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            This method uses the <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.Kube.RunOptions"/> to
            the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommand(System.String,Neon.Kube.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> with <see cref="T:Neon.Kube.RunOptions"/>.
            </summary>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>.  This means that <see cref="P:Neon.Kube.SshProxy`1.IsReady"/> will 
            always return <c>false</c> afterwards and subsequent command executions will be 
            ignored unless  <see cref="F:Neon.Kube.RunOptions.RunWhenFaulted"/> is specified for the 
            future command.
            </para>
            <para>
            <see cref="F:Neon.Kube.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommandAsUser(System.String,System.String,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> as a specific user.
            </summary>
            <param name="user">The username.</param>
            <param name="command">The command.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            This method uses the <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> when executing the command.
            </para>
            <para>
            You can override this behavior by passing an <see cref="T:Neon.Kube.RunOptions"/> to
            the <see cref="M:Neon.Kube.SshProxy`1.RunCommand(System.String,Neon.Kube.RunOptions,System.Object[])"/> override.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommandAsUser(System.String,System.String,Neon.Kube.RunOptions,System.Object[])">
            <summary>
            Runs a shell command on the Linux server under <b>sudo</b> as a specific user
            and with <see cref="T:Neon.Kube.RunOptions"/>.
            </summary>
            <param name="user">The username.</param>
            <param name="command">The command.</param>
            <param name="runOptions">The execution options.</param>
            <param name="args">The optional command arguments.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <note>
            <paramref name="command"/> may not include single quotes or redirect
            angle brackets such as <b>&lt;</b> or <b>>&gt;</b>.  For more complex
            command, try uploading and executing a <see cref="T:Neon.Kube.CommandBundle"/> instead.
            </note>
            <para>
            The <paramref name="runOptions"/> flags control how this command functions.
            If <see cref="F:Neon.Kube.RunOptions.FaultOnError"/> is set, then commands that return
            a non-zero exit code will put the server into the faulted state by setting
            <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>.  This means that <see cref="P:Neon.Kube.SshProxy`1.IsReady"/> will 
            always return <c>false</c> afterwards and subsequent command executions will be 
            ignored unless  <see cref="F:Neon.Kube.RunOptions.RunWhenFaulted"/> is specified for the 
            future command.
            </para>
            <para>
            <see cref="F:Neon.Kube.RunOptions.LogOnErrorOnly"/> indicates that command output should
            be logged only for non-zero exit codes.
            </para>
            <note>
            Any <c>null</c> arguments will be ignored.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.SudoCommand(Neon.Kube.CommandBundle,Neon.Kube.RunOptions)">
            <summary>
            Runs a <see cref="T:Neon.Kube.CommandBundle"/> under <b>sudo</b> on the remote machine.
            </summary>
            <param name="bundle">The bundle.</param>
            <param name="runOptions">The execution options (defaults to <see cref="F:Neon.Kube.RunOptions.Defaults"/>).</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
            <remarks>
            <para>
            This method is intended for situations where one or more files need to be uploaded to a cluster host node 
            and then be used when a command is executed.
            </para>
            <para>
            To use this class, construct an instance passing the command and arguments to be executed.  The command be 
            an absolute reference to an executable in folders such as <b>/bin</b> or <b>/usr/local/bin</b>, an executable
            somewhere on the current PATH, or relative to the files unpacked from the bundle.  The current working directory
            will be set to the folder where the bundle was unpacked, so you can reference local executables like
            <b>./MyExecutable</b>.
            </para>
            <para>
            Once a bundle is constructed, you will add <see cref="T:Neon.Kube.CommandFile"/> instances specifying the
            file data you want to include.  These include the relative path to the file to be uploaded as well
            as its text or binary data.  You may also indicate whether each file is to be marked as executable.
            </para>
            <note>
            <paramref name="runOptions"/> is set to <see cref="F:Neon.Kube.RunOptions.Defaults"/> by default.  This means
            that the flags specified by <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> will be be used.  This is a 
            good way to specify a global default for flags like <see cref="F:Neon.Kube.RunOptions.FaultOnError"/>.
            </note>
            <note>
            This command requires that the <b>unzip</b> package be installed on the host.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.InvokeIdempotentAction(System.String,System.Action)">
            <summary>
            Invokes a named action on the node if it has never been been performed
            on the node before.
            </summary>
            <param name="actionId">The node-unique action ID.</param>
            <param name="action">Tbe action to be performed.</param>
            <returns><c>true</c> if the action was invoked.</returns>
            <remarks>
            <para>
            <paramref name="actionId"/> must uniquely identify the action on the node.
            This may include letters, digits, dashes and periods as well as one or
            more forward slashes that can be used to organize idempotent status files
            into folders.
            </para>
            <para>
            This method tracks successful action completion by creating a file
            on the node at <see cref="F:Neon.Kube.KubeHostFolders.State"/><b>/ACTION-ID</b>.
            To ensure idempotency, this method first checks for the existance of
            this file and returns immediately without invoking the action if it is 
            present.
            </para>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.VerifyCertificate(System.String,Neon.Cryptography.TlsCertificate,System.String)">
            <summary>
            Verifies a TLS/SSL certificate.
            </summary>
            <param name="name">The certificate name (included in errors).</param>
            <param name="certificate">The certificate being tested or <c>null</c>.</param>
            <param name="hostname">The hostname to be secured by the certificate.</param>
            <returns>The command response.</returns>
            <remarks>
            You may pass <paramref name="certificate"/> as <c>null</c> to indicate that no 
            checking is to be performed as a convienence.
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CreateShell">
            <summary>
            Creates an interactive shell.
            </summary>
            <returns>A <see cref="T:Renci.SshNet.ShellStream"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.CreateSudoShell">
            <summary>
            Creates an interactive shell for running with <b>sudo</b> permissions. 
            </summary>
            <returns>A <see cref="T:Renci.SshNet.ShellStream"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.GetNetworkInterface(System.Net.IPAddress)">
            <summary>
            Returns the name of the network interface assigned to a specific IP address.
            </summary>
            <param name="address">The target IP address.</param>
            <returns>The network interface name.</returns>
            <exception cref="T:Neon.Kube.KubeException">Thrown if the interface was not found.</exception>
            <remarks>
            <para>
            In the olden days, network devices were assigned names like <b>eth0</b>,
            <b>eth1</b>,... during boot somewhat randomly and there was no guarantee
            that the same assignments would be made on subsequent server restarts.
            </para>
            <para>
            Modern Linux systems generate predictable network interfaces names during
            boot by enumerating the physical devices installed and generating device
            names based on the topology of the system (e.g. slots, channels,...).
            This is discussed <a href="https://www.freedesktop.org/wiki/Software/systemd/PredictableNetworkInterfaceNames/">here</a>.
            </para>
            <note>
            Cloud environments as well as environments where nodes hosted on hypervisors 
            like Hyper-V or XenServer will still assign interface names like <b>eth0</b>...
            This method will still work for these environments.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.GetTimeUtc">
            <summary>
            Returns the current time (UTC) on the remote machine.
            </summary>
            <returns>The machine's current <see cref="T:System.DateTime"/> (UTC).</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.ConfigureNetwork(System.String,System.Net.IPAddress,System.Net.IPAddress,Neon.Net.NetworkCidr,System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
            Configures a network interface's IP address, mask, nameservers, etc.
            </summary>
            <param name="networkInterface">Identifies the network interface.</param>
            <param name="address">The IPv4 address.</param>
            <param name="gateway">The IPv4 default gateway.</param>
            <param name="subnet">The subnet.</param>
            <param name="nameservers">The optional list of IPv4 nameservers.</param>
            <remarks>
            <note>
            This method <b>doesn't</b> immediately apply the changes because
            that would break the SSH connection.  You'll typically need to
            reboot the remote machine to accomplish this.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.ConfigureNetwork_Ubuntu1604(System.String,System.Net.IPAddress,System.Net.IPAddress,Neon.Net.NetworkCidr,System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
            Configures a network interface's IP address, mask, nameservers, etc.
            for an Ubuntu 16.04 machine.
            </summary>
            <param name="networkInterface">Identifies the network interface.</param>
            <param name="address">The IPv4 address.</param>
            <param name="gateway">The IPv4 default gateway.</param>
            <param name="subnet">The subnet.</param>
            <param name="nameservers">The optional list of IPv4 nameservers.</param>
            <remarks>
            <note>
            This method <b>doesn't</b> immediately apply the changes because
            that would break the SSH connection.  You'll typically need to
            reboot the remote machine to accomplish this.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.ConfigureNetwork_Ubuntu1804(System.String,System.Net.IPAddress,System.Net.IPAddress,Neon.Net.NetworkCidr,System.Collections.Generic.IEnumerable{System.Net.IPAddress})">
            <summary>
            Configures a network interface's IP address, mask, nameservers, etc.
            for an Ubuntu 18.04 machine.
            </summary>
            <param name="networkInterface">Identifies the network interface.</param>
            <param name="address">The IPv4 address.</param>
            <param name="gateway">The IPv4 default gateway.</param>
            <param name="subnet">The subnet.</param>
            <param name="nameservers">The optional list of IPv4 nameservers.</param>
            <remarks>
            <note>
            This method <b>doesn't</b> immediately apply the changes because
            that would break the SSH connection.  You'll typically need to
            reboot the remote machine to accomplish this.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.KubectlApply(System.String,Neon.Kube.RunOptions)">
            <summary>
            Uses <c>kubectl apply -f</c> to apply a YAML file.
            </summary>
            <param name="yaml">The YAML file contents.</param>
            <param name="runOptions">Optional <see cref="T:Neon.Kube.RunOptions"/>.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.KubeCtlApply(System.Text.StringBuilder,Neon.Kube.RunOptions)">
            <summary>
            Uses <c>kubectl apply -f</c> to apply a YAML file.
            </summary>
            <param name="sbYaml">The YAML file contents.</param>
            <param name="runOptions">Optional <see cref="T:Neon.Kube.RunOptions"/>.</param>
            <returns>The <see cref="T:Neon.Kube.CommandResponse"/>.</returns>
        </member>
        <member name="M:Neon.Kube.SshProxy`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.ActionStep">
            <summary>
            Runs an <see cref="T:System.Action`1"/> as a cluster setup step.
            </summary>
        </member>
        <member name="M:Neon.Kube.ActionStep.Create(System.String,System.String,System.Action{Neon.Kube.SshProxy{Neon.Kube.NodeDefinition}})">
            <summary>
            Creates a configuration step that executes an potentially idempotent <see cref="T:System.Action"/>
            on a specific cluster node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="operationName">The idempotent operation name or <c>null</c> if the operation is not idempotent.</param>
            <param name="action">The action to be invoked.</param>
        </member>
        <member name="M:Neon.Kube.ActionStep.#ctor(System.String,System.String,System.Action{Neon.Kube.SshProxy{Neon.Kube.NodeDefinition}})">
            <summary>
            Private constructor.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="operationName">The idempotent operation name or <c>null</c> if the operation is not idempotent.</param>
            <param name="action">The action to be invoked.</param>
        </member>
        <member name="M:Neon.Kube.ActionStep.Run(Neon.Kube.ClusterProxy)">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.CommandStep">
            <summary>
            Runs a Linux command on a node, optionally uploading some command related files first.
            Commands are executed with root privileges.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandStep.CreateSudo(System.String,System.String,System.Object[])">
            <summary>
            Creates a configuration step that executes a command under <b>sudo</b>
            on a specific node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="command">The Linux command.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="M:Neon.Kube.CommandStep.CreateIdempotentSudo(System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates an idempotent configuration step that executes a command under <b>sudo</b>
            on a specific node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="operationName">The idempotent operation name.</param>
            <param name="command">The Linux command.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="M:Neon.Kube.CommandStep.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Constructs a configuration step that executes a command under <b>sudo</b>
            on a specific cluster node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="command">The Linux command.</param>
            <param name="args">The command arguments.</param>
            <remarks>
            <note>
            You can add <see cref="F:Neon.Kube.CommandBundle.ArgBreak"/> as one of the arguments.  This is
            a meta argument that indicates that the following non-command line option
            is not to be considered to be the value for the previous command line option.
            This is a formatting hint for <see cref="M:Neon.Kube.CommandStep.ToBash(System.String)"/> and will
            not be included in the command itself.
            </note>
            </remarks>
        </member>
        <member name="P:Neon.Kube.CommandStep.Sudo">
            <summary>
            Indicates whether the command is to be executed with <b>sudo</b> privileges.
            </summary>
        </member>
        <member name="M:Neon.Kube.CommandStep.AddFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a text file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="text">The file text.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
            <param name="linuxCompatible">
            Optionally controls whether the text is made Linux compatible by removing carriage returns
            and expanding TABs into spaces.  This defaults to <c>true</c>.
            </param>
        </member>
        <member name="M:Neon.Kube.CommandStep.AddFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            Adds a binary file to be uploaded before executing the command.
            </summary>
            <param name="path">The file path relative to the directory where the command will be executed.</param>
            <param name="data">The file data.</param>
            <param name="isExecutable">Optionally specifies that the file is to be marked as executable.</param>
        </member>
        <member name="M:Neon.Kube.CommandStep.Run(Neon.Kube.ClusterProxy)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.CommandStep.Execute(Neon.Kube.SshProxy{Neon.Kube.NodeDefinition})">
            <summary>
            Actually executes the command on the node.
            </summary>
            <param name="node">The target node.</param>
        </member>
        <member name="M:Neon.Kube.CommandStep.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.CommandStep.ToBash(System.String)">
            <summary>
            <para>
            Formats the command such that it could be added to a Bash script.
            </para>
            <note>
            This doesn't work if the command has attached files.
            </note>
            </summary>
            <param name="comment">Optional comment text (without a leading <b>#</b>).</param>
            <returns>The command formatted for Bash.</returns>
            <exception cref="T:System.NotSupportedException">
            <see cref="M:Neon.Kube.CommandStep.ToBash(System.String)"/> does not support commands with attached files.
            </exception>
            <remarks>
            This can be useful for making copies of cluster configuration commands
            on the server as scripts for situations where system operators need
            to manually tweak things.
            </remarks>
        </member>
        <member name="T:Neon.Kube.ConfigStep">
            <summary>
            The <c>abstract</c> base class for node configuration step implementations.
            </summary>
        </member>
        <member name="M:Neon.Kube.ConfigStep.Run(Neon.Kube.ClusterProxy)">
            <summary>
            Implements the configuration step.
            </summary>
            <param name="cluster">The cluster proxy instance.</param>
        </member>
        <member name="M:Neon.Kube.ConfigStep.StatusPause">
            <summary>
            Pause briefly to allow the configuration UI a chance to display
            step information.
            </summary>
        </member>
        <member name="T:Neon.Kube.ConfigStepList">
            <summary>
            Implements a list of <see cref="T:Neon.Kube.ConfigStep"/>s to be performed
            on a cluster.
            </summary>
        </member>
        <member name="M:Neon.Kube.ConfigStepList.Add(System.Collections.Generic.IEnumerable{Neon.Kube.ConfigStep})">
            <summary>
            Adds a set of configuration steps to the list.
            </summary>
            <param name="steps">The steps.</param>
        </member>
        <member name="T:Neon.Kube.IXenClient">
            <summary>
            <b>INTERNAL USE ONLY:</b> Used internally by cluster as a potentially temporary
            hack required by <see cref="T:Neon.Kube.SetupController`1"/> to display XenServer
            provisioning status.  This may be removed at some point in the future.
            </summary>
        </member>
        <member name="P:Neon.Kube.IXenClient.Name">
            <summary>
            Returns the name of the connected XenServer.
            </summary>
        </member>
        <member name="T:Neon.Kube.PauseStep">
            <summary>
            Pauses cluster configuration for a period of time.
            </summary>
        </member>
        <member name="M:Neon.Kube.PauseStep.#ctor(System.TimeSpan)">
            <summary>
            Constructs a configuration step that pauses setup for a period of time.
            </summary>
            <param name="delay">The amount of time to pause.</param>
        </member>
        <member name="M:Neon.Kube.PauseStep.Run(Neon.Kube.ClusterProxy)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.PauseStep.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.Kube.SetupController`1">
            <summary>
            Manages a cluster setup operation consisting of a series of  setup operations
            steps, while displaying status to the <see cref="T:System.Console"/>.
            </summary>
            <typeparam name="NodeMetadata">Specifies the node metadata type.</typeparam>
        </member>
        <member name="M:Neon.Kube.SetupController`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Neon.Kube.SshProxy{`0}})">
            <summary>
            Constructor.
            </summary>
            <param name="operationTitle">Summarizes the high-level operation being performed.</param>
            <param name="nodes">The node proxies for the cluster nodes being manipulated.</param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.#ctor(System.String[],System.Collections.Generic.IEnumerable{Neon.Kube.SshProxy{`0}})">
            <summary>
            Constructor.
            </summary>
            <param name="operationTitle">Summarizes the high-level operation being performed.</param>
            <param name="nodes">The node proxies for the cluster nodes being manipulated.</param>
        </member>
        <member name="P:Neon.Kube.SetupController`1.ShowStatus">
            <summary>
            Specifies whether the class should print setup status to the console.
            This defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupController`1.ShowNodeStatus">
             <summary>
             Specifies whether that node status will be displayed.  This
             defaults to <c>true</c>.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupController`1.MaxDisplayedSteps">
            <summary>
            Specifies the maximum number of setup steps to be displayed.
            This defaults to <b>5</b>.  You can set <b>0</b> to allow an 
            unlimited number of steps may be displayed.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupController`1.MaxParallel">
            <summary>
            The maximum number of nodes that will execute setup steps in parallel.  This
            defaults to essentially unconstrained.
            </summary>
        </member>
        <member name="P:Neon.Kube.SetupController`1.StepCount">
            <summary>
            Returns the number of setup steps.
            </summary>
        </member>
        <member name="M:Neon.Kube.SetupController`1.SetDefaultRunOptions(Neon.Kube.RunOptions)">
            <summary>
            Sets the <see cref="P:Neon.Kube.SshProxy`1.DefaultRunOptions"/> property for
            all nodes managed by the controller.
            </summary>
            <param name="options">The options to be set.</param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.AddStep(System.String,System.Action{Neon.Kube.SshProxy{`0},System.TimeSpan},System.Func{Neon.Kube.SshProxy{`0},System.Boolean},System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends a configuration step.
            </summary>
            <param name="stepLabel">Brief step summary.</param>
            <param name="nodeAction">
            The action to be performed on each node.  Two parameters will be passed
            to this action: the node's <see cref="T:Neon.Kube.SshProxy`1"/> and a <see cref="T:System.TimeSpan"/>
            indicating the amount of time the action should wait before performing
            the operation, if the operation hasn't already been performed.
            </param>
            <param name="nodePredicate">
            Optional predicate used to select the nodes that participate in the step
            or <c>null</c> to select all nodes.
            </param>
            <param name="quiet">Optionally specifies that the step is not to be reported in the progress.</param>
            <param name="noParallelLimit">
            Optionally ignores the global <see cref="P:Neon.Kube.SetupController`1.MaxParallel"/> 
            limit for the new step when greater.
            </param>
            <param name="stepStaggerSeconds">
            Optionally specifies the time delay used to stagger execution
            of the nodes executing this step.  Setting a non-zero value of
            perhaps 5 seconds will help mitigate problems with multiple
            accessing nodes trying to download the same files from
            the Internet at the same time, potentially causing the remote
            endpoint to start throttling access.
            </param>
            <param name="position">
            Optionally specifies the zero-based index of the position where the step is
            to be inserted into the step list.
            </param>
            <param name="parallelLimit">
            Optionally specifies the maximum number of operations to be performed
            in parallel for this step, overriding the controller default.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.AddGlobalStep(System.String,System.Action,System.Boolean,System.Int32)">
            <summary>
            Adds a global cluster configuration step.
            </summary>
            <param name="stepLabel">Brief step summary.</param>
            <param name="action">The global action to be performed.</param>
            <param name="quiet">Optionally specifies that the step is not to be reported in the progress.</param>
            <param name="position">
            The optional zero-based index of the position where the step is
            to be inserted into the step list.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.AddWaitUntilOnlineStep(System.String,System.String,System.Func{Neon.Kube.SshProxy{`0},System.Boolean},System.Boolean,System.Nullable{System.TimeSpan},System.Int32)">
            <summary>
            Adds a step that waits for nodes to be online.
            </summary>
            <param name="stepLabel">Brief step summary.</param>
            <param name="status">The optional node status.</param>
            <param name="nodePredicate">
            Optional predicate used to select the nodes that participate in the step
            or <c>null</c> to select all nodes.
            </param>
            <param name="quiet">Optionally specifies that the step is not to be reported in the progress.</param>
            <param name="timeout">Optionally specifies the maximum time to wait (defaults to <b>10 minutes</b>).</param>
            <param name="position">
            The optional zero-based index of the position where the step is
            to be inserted into the step list.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.AddDelayStep(System.String,System.TimeSpan,System.String,System.Func{Neon.Kube.SshProxy{`0},System.Boolean},System.Boolean,System.Int32)">
            <summary>
            Adds a step that waits for a specified period of time.
            </summary>
            <param name="stepLabel">Brief step summary.</param>
            <param name="delay">The amount of time to wait.</param>
            <param name="status">The optional node status.</param>
            <param name="nodePredicate">
            Optional predicate used to select the nodes that participate in the step
            or <c>null</c> to select all nodes.
            </param>
            <param name="quiet">Optionally specifies that the step is not to be reported in the progress.</param>
            <param name="position">
            The optional zero-based index of the position where the step is
            to be inserted into the step list.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.Run(System.Boolean)">
            <summary>
            Performs the operation steps in the order they were added.
            </summary>
            <param name="leaveNodesConnected">Pass <c>true</c> leave the node proxies connected.</param>
            <returns><c>true</c> if all steps completed successfully.</returns>
        </member>
        <member name="M:Neon.Kube.SetupController`1.SetOperationStatus(System.String)">
            <summary>
            Sets the optation status text.
            </summary>
            <param name="status">The optional operation status text.</param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.PerformStep(Neon.Kube.SetupController{`0}.Step)">
            <summary>
            Performs an operation step on the selected nodes.
            </summary>
            <param name="step">A step being performed.</param>
            <returns><c>true</c> if the step succeeded.</returns>
            <remarks>
            <para>
            This method begins by setting the <see cref="P:Neon.Kube.SshProxy`1.IsReady"/>
            state of each selected node to <c>false</c> and then it starts a new thread for
            each node and performs the action on these servnodeer threads.
            </para>
            <para>
            In parallel, the method spins on the current thread, displaying status while
            waiting for each of the nodes to transition to the <see cref="P:Neon.Kube.SshProxy`1.IsReady"/>=<c>true</c>
            state.
            </para>
            <para>
            The method returns <c>true</c> after all of the node actions have completed
            and none of the nodes have <see cref="P:Neon.Kube.SshProxy`1.IsFaulted"/>=<c>true</c>.
            </para>
            <note>
            This method does nothing if a previous step failed.
            </note>
            </remarks>
        </member>
        <member name="M:Neon.Kube.SetupController`1.GetStatus(System.Collections.Generic.HashSet{System.String},Neon.Kube.SshProxy{`0})">
            <summary>
            Returns the current status for a node.
            </summary>
            <param name="stepNodeNamesSet">The set of node names participating in the current step.</param>
            <param name="node">The node being queried.</param>
            <returns>The status prefix.</returns>
        </member>
        <member name="M:Neon.Kube.SetupController`1.FormatStepNumber(System.Int32)">
            <summary>
            Formats a step index into a form suitable for display.
            </summary>
            <param name="stepNumber">The step index.</param>
            <returns>The formatted step number.</returns>
        </member>
        <member name="M:Neon.Kube.SetupController`1.DisplayStatus(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Displays the current operation status on the <see cref="T:System.Console"/>.
            </summary>
            <param name="stepNodeNamesSet">
            The set of node names that participating in the current step or
            <c>null</c> if all nodes are included.
            </param>
        </member>
        <member name="M:Neon.Kube.SetupController`1.ThrowOnError">
            <summary>
            Throws an exception if any of the operation steps did not complete successfully.
            </summary>
        </member>
        <member name="T:Neon.Kube.UploadStep">
            <summary>
            Uploads a file.
            </summary>
        </member>
        <member name="M:Neon.Kube.UploadStep.Text(System.String,System.String,System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            Uploads text to a file.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="path">The path on the node for uploaded file.</param>
            <param name="text">The text to be uploaded.</param>
            <param name="tabStop">Optionally expands TABs into spaces when non-zero.</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies target file permissions (compatible with the <c>chmod</c> command).</param>
        </member>
        <member name="M:Neon.Kube.UploadStep.#ctor(System.String,System.String,System.String,System.Int32,System.Text.Encoding,System.String)">
            <summary>
            Constructs a configuration step that executes a command under <b>sudo</b>
            on a specific cluster node.
            </summary>
            <param name="nodeName">The node name.</param>
            <param name="path">The path on the node for uploaded file.</param>
            <param name="text">The text to be uploaded.</param>
            <param name="tabStop">Optionally expands TABs into spaces when non-zero.</param>
            <param name="outputEncoding">Optionally specifies the output text encoding (defaults to UTF-8).</param>
            <param name="permissions">Optionally specifies target file permissions (compatible with the <c>chmod</c> command).</param>
        </member>
        <member name="M:Neon.Kube.UploadStep.Run(Neon.Kube.ClusterProxy)">
            <inheritdoc/>
        </member>
        <member name="M:Neon.Kube.UploadStep.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Neon.DnsTools.NeonDnsClient">
            <summary>
            Extends <see cref="T:DNS.Client.DnsClient"/> to support resolution against 
            multiple nameservers.
            </summary>
        </member>
        <member name="T:Neon.DnsTools.NeonDnsClient.Answer">
            <summary>
            Used to cache a DNS response.
            </summary>
        </member>
        <member name="P:Neon.DnsTools.NeonDnsClient.Answer.Addresses">
            <summary>
            The host addresses.
            </summary>
        </member>
        <member name="P:Neon.DnsTools.NeonDnsClient.Answer.TTD">
            <summary>
            The scheduled time (SYS) for this cached entry to expire.
            </summary>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.CreateWithCaching(System.Net.IPAddress[])">
            <summary>
            Creates a DNS client that caches responses.
            </summary>
            <param name="nameservers">The nameservers specified as <see cref="T:System.Net.IPAddress"/> instances.</param>
            <returns>The <see cref="T:Neon.DnsTools.NeonDnsClient"/>.</returns>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.CreateWithCaching(System.String[])">
            <summary>
            Creates a DNS client that caches responses.
            </summary>
            <param name="nameservers">The nameservers specified as IP address strings.</param>
            <returns>The <see cref="T:Neon.DnsTools.NeonDnsClient"/>.</returns>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.Create(System.Net.IPAddress[])">
            <summary>
            Creates a DNS client that <b>does not</b> cache responses.
            </summary>
            <param name="nameservers">The nameservers specified as <see cref="T:System.Net.IPAddress"/> instances.</param>
            <returns>The <see cref="T:Neon.DnsTools.NeonDnsClient"/>.</returns>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.Create(System.String[])">
            <summary>
            Creates a DNS client that <b>does not</b> cache responses.
            </summary>
            <param name="nameservers">The nameservers specified as IP address strings.</param>
            <returns>The <see cref="T:Neon.DnsTools.NeonDnsClient"/>.</returns>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.#ctor(System.Net.IPAddress[])">
            <summary>
            Constructs an instance to query one or more nameserver IP addresses.
            </summary>
            <param name="nameservers">The name server IP addresses (at least one must be passed).</param>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.#ctor(System.String[])">
            <summary>
            Constructs an instance to query one or more nameserver IP address strings.
            </summary>
            <param name="nameservers">The name server IP addresses (at least one must be passed).</param>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.Dispose(System.Boolean)">
            <summary>
            Releases any important resources associated with the instance.
            </summary>
            <param name="disposing">Pass <c>true</c> if the instance is being disposed as opposed to being finalized.</param>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.EnableCaching">
            <summary>
            Specifies that responses are to be cached until the TTL expires.
            </summary>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.PurgeExpired(System.Object)">
            <summary>
            Removes any expired answers from the cache.
            </summary>
            <param name="state">Not used.</param>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.ClearCache">
            <summary>
            Clears any cached cached answers.
            </summary>
        </member>
        <member name="M:Neon.DnsTools.NeonDnsClient.LookupAsync(System.String,System.Boolean)">
            <summary>
            Attempts to resolve an IP address or fully qualified domain name
            into host IP addresses.
            </summary>
            <param name="addressOrFQDN">The IP address or FQDN.</param>
            <param name="noCache">
            Optionally specify that the method is not to answer from the cache, 
            even if the cache is enabled.
            </param>
            <returns>An empty result set if the lookup failed.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.StaticBytesDataSource">
            <summary>
            Implements a <see cref="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource"/> that wraps an in-memory byte array
            into a form suitable for adding to a <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticBytesDataSource.#ctor(System.Byte[])">
            <summary>
            Constructs a source from raw bytes.
            </summary>
            <param name="data">The data array or <c>null</c>.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticBytesDataSource.#ctor(System.String)">
            <summary>
            Constructs a source from a UTG-8 encopded string.
            </summary>
            <param name="data">The data string</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticBytesDataSource.GetSource">
            <inheritdoc/>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.StaticStringDataSource">
            <summary>
            Implements a <see cref="T:ICSharpCode.SharpZipLib.Zip.IStaticDataSource"/> that wraps a string to be
            returned as URF-8 encoded bytes into a form suitable for adding to a 
            <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticStringDataSource.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="text">The text or <c>null</c>.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.StaticStringDataSource.GetSource">
            <inheritdoc/>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: false</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: false</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: cadence-archive</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: de51d3437</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: de51d3437382bed75f3697fcff434cf25a332c38</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 85</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: 0.5.4-alpha-85-gde51d3437</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: 0.5.4-alpha</summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 5</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 4</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 5</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 89</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: alpha</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: -alpha</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: Tag</summary>
        </member>
    </members>
</doc>
